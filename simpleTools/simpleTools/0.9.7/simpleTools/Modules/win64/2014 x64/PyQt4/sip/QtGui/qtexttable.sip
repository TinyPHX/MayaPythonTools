// qtexttable.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTextTableCell
{
%TypeHeaderCode
#include <qtexttable.h>
%End

public:
    QTextTableCell();
    ~QTextTableCell();
    QTextTableCell(const QTextTableCell &o);
    QTextCharFormat format() const;
%If (Qt_4_2_0 -)
    void setFormat(const QTextCharFormat &format);
%End
    int row() const;
    int column() const;
    int rowSpan() const;
    int columnSpan() const;
    bool isValid() const;
    QTextCursor firstCursorPosition() const;
    QTextCursor lastCursorPosition() const;
%If (Qt_4_5_0 -)
    int tableCellFormatIndex() const;
%End
    bool operator==(const QTextTableCell &other) const;
    bool operator!=(const QTextTableCell &other) const;
};

class QTextTable : QTextFrame
{
%TypeHeaderCode
#include <qtexttable.h>
%End

public:
    explicit QTextTable(QTextDocument *doc);
    virtual ~QTextTable();
    void resize(int rows, int cols);
    void insertRows(int pos, int num);
    void insertColumns(int pos, int num);
    void removeRows(int pos, int num);
    void removeColumns(int pos, int num);
    void mergeCells(int row, int col, int numRows, int numCols);
    void mergeCells(const QTextCursor &cursor);
    void splitCell(int row, int col, int numRows, int numCols);
    int rows() const;
    int columns() const;
    QTextTableCell cellAt(int row, int col) const;
    QTextTableCell cellAt(int position) const;
    QTextTableCell cellAt(const QTextCursor &c) const;
    QTextCursor rowStart(const QTextCursor &c) const;
    QTextCursor rowEnd(const QTextCursor &c) const;
    QTextTableFormat format() const;
    void setFormat(const QTextTableFormat &aformat);
%If (Qt_4_5_0 -)
    void appendRows(int count);
%End
%If (Qt_4_5_0 -)
    void appendColumns(int count);
%End

private:
    QTextTable(const QTextTable &);
};
