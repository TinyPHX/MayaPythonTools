// qrawfont.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_8_0 -)
%If (PyQt_RawFont)

class QRawFont
{
%TypeHeaderCode
#include <qrawfont.h>
%End

public:
    enum AntialiasingType
    {
        PixelAntialiasing,
        SubPixelAntialiasing,
    };

    QRawFont();
    QRawFont(const QString &fileName, qreal pixelSize, QFont::HintingPreference hintingPreference = QFont::PreferDefaultHinting);
    QRawFont(const QByteArray &fontData, qreal pixelSize, QFont::HintingPreference hintingPreference = QFont::PreferDefaultHinting);
    QRawFont(const QRawFont &other);
    ~QRawFont();
    bool isValid() const;
    bool operator==(const QRawFont &other) const;
    bool operator!=(const QRawFont &other) const;
    QString familyName() const;
    QString styleName() const;
    QFont::Style style() const;
    int weight() const;
    QVector<unsigned int> glyphIndexesForString(const QString &text) const;
    QVector<QPointF> advancesForGlyphIndexes(const QVector<unsigned int> &glyphIndexes) const;
    QImage alphaMapForGlyph(quint32 glyphIndex, QRawFont::AntialiasingType antialiasingType = QRawFont::SubPixelAntialiasing, const QTransform &transform = QTransform()) const;
    QPainterPath pathForGlyph(quint32 glyphIndex) const;
    void setPixelSize(qreal pixelSize);
    qreal pixelSize() const;
    QFont::HintingPreference hintingPreference() const;
    qreal ascent() const;
    qreal descent() const;
    qreal leading() const;
    qreal xHeight() const;
    qreal averageCharWidth() const;
    qreal maxCharWidth() const;
    qreal unitsPerEm() const;
    void loadFromFile(const QString &fileName, qreal pixelSize, QFont::HintingPreference hintingPreference) /ReleaseGIL/;
    void loadFromData(const QByteArray &fontData, qreal pixelSize, QFont::HintingPreference hintingPreference) /ReleaseGIL/;
%If (Qt_5_0_0 -)
    bool supportsCharacter(uint ucs4) const;
%End
%If (- Qt_5_0_0)
    bool supportsCharacter(quint32 ucs4) const;
%End
    bool supportsCharacter(QChar character) const;
    QList<QFontDatabase::WritingSystem> supportedWritingSystems() const;
    QByteArray fontTable(const char *tagName) const;
    static QRawFont fromFont(const QFont &font, QFontDatabase::WritingSystem writingSystem = QFontDatabase::Any);
%If (Qt_5_0_0 -)
    QRectF boundingRect(quint32 glyphIndex) const;
%End
%If (Qt_5_0_0 -)
    qreal lineThickness() const;
%End
%If (Qt_5_0_0 -)
    qreal underlinePosition() const;
%End
%If (Qt_5_0_0 -)
    void swap(QRawFont &other);
%End
};

%End
%End
