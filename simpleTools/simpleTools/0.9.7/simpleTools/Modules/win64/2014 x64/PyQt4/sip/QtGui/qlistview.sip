// qlistview.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QListView : QAbstractItemView
{
%TypeHeaderCode
#include <qlistview.h>
%End

public:
    enum Movement
    {
        Static,
        Free,
        Snap,
    };

    enum Flow
    {
        LeftToRight,
        TopToBottom,
    };

    enum ResizeMode
    {
        Fixed,
        Adjust,
    };

    enum LayoutMode
    {
        SinglePass,
        Batched,
    };

    enum ViewMode
    {
        ListMode,
        IconMode,
    };

    explicit QListView(QWidget *parent /TransferThis/ = 0);
    virtual ~QListView();
    void setMovement(QListView::Movement movement);
    QListView::Movement movement() const;
    void setFlow(QListView::Flow flow);
    QListView::Flow flow() const;
    void setWrapping(bool enable);
    bool isWrapping() const;
    void setResizeMode(QListView::ResizeMode mode);
    QListView::ResizeMode resizeMode() const;
    void setLayoutMode(QListView::LayoutMode mode);
    QListView::LayoutMode layoutMode() const;
    void setSpacing(int space);
    int spacing() const;
    void setGridSize(const QSize &size);
    QSize gridSize() const;
    void setViewMode(QListView::ViewMode mode);
    QListView::ViewMode viewMode() const;
    void clearPropertyFlags();
    bool isRowHidden(int row) const;
    void setRowHidden(int row, bool hide);
    void setModelColumn(int column);
    int modelColumn() const;
    void setUniformItemSizes(bool enable);
    bool uniformItemSizes() const;
    virtual QRect visualRect(const QModelIndex &index) const;
    virtual void scrollTo(const QModelIndex &index, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    virtual QModelIndex indexAt(const QPoint &p) const;
    virtual void reset();
    virtual void setRootIndex(const QModelIndex &index);

signals:
%If (Qt_4_2_0 -)
    void indexesMoved(const QModelIndexList &indexes);
%End

protected:
    virtual void scrollContentsBy(int dx, int dy);
%If (Qt_5_0_0 -)
    virtual void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles /DocValue="[]"/ = QVector<int>());
%End
%If (- Qt_5_0_0)
    virtual void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
%End
    virtual void rowsInserted(const QModelIndex &parent, int start, int end);
    virtual void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);
    virtual bool event(QEvent *e);
    virtual void mouseMoveEvent(QMouseEvent *e);
    virtual void mouseReleaseEvent(QMouseEvent *e);
    virtual void timerEvent(QTimerEvent *e);
    virtual void resizeEvent(QResizeEvent *e);
    virtual void dragMoveEvent(QDragMoveEvent *e);
    virtual void dragLeaveEvent(QDragLeaveEvent *e);
    virtual void dropEvent(QDropEvent *e);
    virtual void startDrag(Qt::DropActions supportedActions);
    virtual QStyleOptionViewItem viewOptions() const;
    virtual void paintEvent(QPaintEvent *e);
    virtual int horizontalOffset() const;
    virtual int verticalOffset() const;
    virtual QModelIndex moveCursor(QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
    QRect rectForIndex(const QModelIndex &index) const;
    void setPositionForIndex(const QPoint &position, const QModelIndex &index);
    virtual void setSelection(const QRect &rect, QFlags<QItemSelectionModel::SelectionFlag> command);
    virtual QRegion visualRegionForSelection(const QItemSelection &selection) const;
    virtual QModelIndexList selectedIndexes() const;
    virtual void updateGeometries();
    virtual bool isIndexHidden(const QModelIndex &index) const;

public:
%If (Qt_4_2_0 -)
    void setBatchSize(int batchSize);
%End
%If (Qt_4_2_0 -)
    int batchSize() const;
%End
%If (Qt_4_2_0 -)
    void setWordWrap(bool on);
%End
%If (Qt_4_2_0 -)
    bool wordWrap() const;
%End
%If (Qt_4_3_0 -)
    void setSelectionRectVisible(bool show);
%End
%If (Qt_4_3_0 -)
    bool isSelectionRectVisible() const;
%End

protected:
%If (Qt_4_3_0 -)
    virtual void selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);
%End
%If (Qt_4_3_0 -)
    virtual void currentChanged(const QModelIndex &current, const QModelIndex &previous);
%End

private:
    QListView(const QListView &);
};
