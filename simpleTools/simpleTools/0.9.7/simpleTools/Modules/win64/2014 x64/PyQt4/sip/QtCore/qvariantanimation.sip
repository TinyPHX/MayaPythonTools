// qvariantanimation.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QVariantAnimation : QAbstractAnimation
{
%TypeHeaderCode
#include <qvariantanimation.h>
%End

    typedef QVector<QPair<qreal, QVariant>> KeyValues;

public:
    QVariantAnimation(QObject *parent /TransferThis/ = 0);
    virtual ~QVariantAnimation();
    QVariant startValue() const;
    void setStartValue(const QVariant &value);
    QVariant endValue() const;
    void setEndValue(const QVariant &value);
    QVariant keyValueAt(qreal step) const;
    void setKeyValueAt(qreal step, const QVariant &value);
    KeyValues keyValues() const;
    void setKeyValues(const KeyValues &values);
    QVariant currentValue() const;
    virtual int duration() const;
    void setDuration(int msecs);
    QEasingCurve easingCurve() const;
    void setEasingCurve(const QEasingCurve &easing);

signals:
    void valueChanged(const QVariant &value);

protected:
    virtual bool event(QEvent *event);
    virtual void updateCurrentTime(int);
    virtual void updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState);
%If (Qt_5_0_0 -)
    virtual void updateCurrentValue(const QVariant &value);
%End
%If (- Qt_5_0_0)
    virtual void updateCurrentValue(const QVariant &value) = 0;
%End
    virtual QVariant interpolated(const QVariant &from, const QVariant &to, qreal progress) const;

private:
    QVariantAnimation(const QVariantAnimation &);
};

%End
