// qnetworkrequest.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QNetworkRequest
{
%TypeHeaderCode
#include <qnetworkrequest.h>
%End

public:
    enum KnownHeaders
    {
        ContentTypeHeader,
        ContentLengthHeader,
        LocationHeader,
        LastModifiedHeader,
        CookieHeader,
        SetCookieHeader,
%If (Qt_4_8_0 -)
        ContentDispositionHeader,
%End
%If (Qt_5_0_0 -)
        UserAgentHeader,
%End
%If (Qt_5_0_0 -)
        ServerHeader,
%End
    };

    enum Attribute
    {
        HttpStatusCodeAttribute,
        HttpReasonPhraseAttribute,
        RedirectionTargetAttribute,
        ConnectionEncryptedAttribute,
        CacheLoadControlAttribute,
        CacheSaveControlAttribute,
%If (Qt_4_5_0 -)
        SourceIsFromCacheAttribute,
%End
%If (Qt_4_6_0 -)
        DoNotBufferUploadDataAttribute,
%End
%If (Qt_4_6_0 -)
        HttpPipeliningAllowedAttribute,
%End
%If (Qt_4_6_0 -)
        HttpPipeliningWasUsedAttribute,
%End
%If (Qt_4_7_0 -)
        CustomVerbAttribute,
%End
%If (Qt_4_7_0 -)
        CookieLoadControlAttribute,
%End
%If (Qt_4_7_0 -)
        AuthenticationReuseAttribute,
%End
%If (Qt_4_7_0 -)
        CookieSaveControlAttribute,
%End
%If (Qt_5_0_0 -)
        BackgroundRequestAttribute,
%End
        User,
        UserMax,
    };

    enum CacheLoadControl
    {
        AlwaysNetwork,
        PreferNetwork,
        PreferCache,
        AlwaysCache,
    };

%If (Qt_4_7_0 -)

    enum LoadControl
    {
        Automatic,
        Manual,
    };

%End
%If (Qt_4_7_0 -)

    enum Priority
    {
        HighPriority,
        NormalPriority,
        LowPriority,
    };

%End
    explicit QNetworkRequest(const QUrl &url = QUrl());
    QNetworkRequest(const QNetworkRequest &other);
    ~QNetworkRequest();
    QUrl url() const;
    void setUrl(const QUrl &url);
    QVariant header(QNetworkRequest::KnownHeaders header) const;
    void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &value);
    bool hasRawHeader(const QByteArray &headerName) const;
    QList<QByteArray> rawHeaderList() const;
    QByteArray rawHeader(const QByteArray &headerName) const;
    void setRawHeader(const QByteArray &headerName, const QByteArray &value);
    QVariant attribute(QNetworkRequest::Attribute code, const QVariant &defaultValue /DocValue="Py_v3:None"/ = QVariant()) const;
    void setAttribute(QNetworkRequest::Attribute code, const QVariant &value);
%If (PyQt_OpenSSL)
    QSslConfiguration sslConfiguration() const;
%End
%If (PyQt_OpenSSL)
    void setSslConfiguration(const QSslConfiguration &configuration);
%End
    bool operator==(const QNetworkRequest &other) const;
    bool operator!=(const QNetworkRequest &other) const;
%If (Qt_4_6_0 -)
    void setOriginatingObject(QObject *object /KeepReference/);
%End
%If (Qt_4_6_0 -)
    QObject *originatingObject() const;
%End
%If (Qt_4_7_0 -)
    QNetworkRequest::Priority priority() const;
%End
%If (Qt_4_7_0 -)
    void setPriority(QNetworkRequest::Priority priority);
%End
%If (Qt_5_0_0 -)
    void swap(QNetworkRequest &other);
%End
};

%End
