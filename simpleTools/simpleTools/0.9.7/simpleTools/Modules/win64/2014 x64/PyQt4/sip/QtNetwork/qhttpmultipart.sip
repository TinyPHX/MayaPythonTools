// qhttpmultipart.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_8_0 -)

class QHttpPart
{
%TypeHeaderCode
#include <qhttpmultipart.h>
%End

public:
    QHttpPart();
    QHttpPart(const QHttpPart &other);
    ~QHttpPart();
    bool operator==(const QHttpPart &other) const;
    bool operator!=(const QHttpPart &other) const;
    void setHeader(QNetworkRequest::KnownHeaders header, const QVariant &value);
    void setRawHeader(const QByteArray &headerName, const QByteArray &headerValue);
    void setBody(const QByteArray &body);
    void setBodyDevice(QIODevice *device);
%If (Qt_5_0_0 -)
    void swap(QHttpPart &other);
%End
};

%End
%If (Qt_4_8_0 -)

class QHttpMultiPart : QObject
{
%TypeHeaderCode
#include <qhttpmultipart.h>
%End

public:
    enum ContentType
    {
        MixedType,
        RelatedType,
        FormDataType,
        AlternativeType,
    };

%If (Qt_5_0_0 -)
    explicit QHttpMultiPart(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QHttpMultiPart(QObject *parent /TransferThis/ = 0);
%End
    QHttpMultiPart(QHttpMultiPart::ContentType contentType, QObject *parent /TransferThis/ = 0);
    virtual ~QHttpMultiPart();
    void append(const QHttpPart &httpPart);
    void setContentType(QHttpMultiPart::ContentType contentType);
    QByteArray boundary() const;
    void setBoundary(const QByteArray &boundary);

private:
    QHttpMultiPart(const QHttpMultiPart &);
};

%End
