// qglbuffer.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtOpenGL Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QGLBuffer
{
%TypeHeaderCode
#include <qglbuffer.h>
%End

public:
    enum Access
    {
        ReadOnly,
        WriteOnly,
        ReadWrite,
    };

    enum Type
    {
        VertexBuffer,
        IndexBuffer,
        PixelPackBuffer,
        PixelUnpackBuffer,
    };

    enum UsagePattern
    {
        StreamDraw,
        StreamRead,
        StreamCopy,
        StaticDraw,
        StaticRead,
        StaticCopy,
        DynamicDraw,
        DynamicRead,
        DynamicCopy,
    };

    QGLBuffer();
    explicit QGLBuffer(QGLBuffer::Type type);
    QGLBuffer(const QGLBuffer &other);
    ~QGLBuffer();
    QGLBuffer::Type type() const;
    QGLBuffer::UsagePattern usagePattern() const;
    void setUsagePattern(QGLBuffer::UsagePattern value);
    bool create();
    bool isCreated() const;
    void destroy();
    bool bind();
    void release();
    static void release(QGLBuffer::Type type);
    GLuint bufferId() const;
    int size() const;
    bool read(int offset, void *data, int count);
    void write(int offset, const void *data, int count);
    void allocate(const void *data, int count);
    void allocate(int count);
    void *map(QGLBuffer::Access access);
    bool unmap();
};

%End
