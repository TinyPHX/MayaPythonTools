// qprogressbar.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QProgressBar : QWidget
{
%TypeHeaderCode
#include <qprogressbar.h>
%End

public:
    enum Direction
    {
        TopToBottom,
        BottomToTop,
    };

    explicit QProgressBar(QWidget *parent /TransferThis/ = 0);
%If (Qt_5_0_0 -)
    virtual ~QProgressBar();
%End
    int minimum() const;
    int maximum() const;
    void setRange(int minimum, int maximum);
    int value() const;
    virtual QString text() const;
    void setTextVisible(bool visible);
    bool isTextVisible() const;
    Qt::Alignment alignment() const;
    void setAlignment(Qt::Alignment alignment);
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    Qt::Orientation orientation() const;
    void setInvertedAppearance(bool invert);
%If (- Qt_5_0_0)
    bool invertedAppearance();
%End
    void setTextDirection(QProgressBar::Direction textDirection);
%If (- Qt_5_0_0)
    QProgressBar::Direction textDirection();
%End
%If (Qt_4_2_0 -)
    void setFormat(const QString &format);
%End
%If (Qt_4_2_0 -)
    QString format() const;
%End

public slots:
    void reset();
    void setMinimum(int minimum);
    void setMaximum(int maximum);
    void setValue(int value);
    void setOrientation(Qt::Orientation);

signals:
    void valueChanged(int value);

protected:
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionProgressBar *option) const;
%End
    virtual bool event(QEvent *e);
    virtual void paintEvent(QPaintEvent *);

private:
    QProgressBar(const QProgressBar &);
};
