// qdnslookup.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_5_0_0 -)

class QDnsDomainNameRecord
{
%TypeHeaderCode
#include <qdnslookup.h>
%End

public:
    QDnsDomainNameRecord();
    QDnsDomainNameRecord(const QDnsDomainNameRecord &other);
    ~QDnsDomainNameRecord();
    void swap(QDnsDomainNameRecord &other);
    QString name() const;
    quint32 timeToLive() const;
    QString value() const;
};

%End
%If (Qt_5_0_0 -)

class QDnsHostAddressRecord
{
%TypeHeaderCode
#include <qdnslookup.h>
%End

public:
    QDnsHostAddressRecord();
    QDnsHostAddressRecord(const QDnsHostAddressRecord &other);
    ~QDnsHostAddressRecord();
    void swap(QDnsHostAddressRecord &other);
    QString name() const;
    quint32 timeToLive() const;
    QHostAddress value() const;
};

%End
%If (Qt_5_0_0 -)

class QDnsMailExchangeRecord
{
%TypeHeaderCode
#include <qdnslookup.h>
%End

public:
    QDnsMailExchangeRecord();
    QDnsMailExchangeRecord(const QDnsMailExchangeRecord &other);
    ~QDnsMailExchangeRecord();
    void swap(QDnsMailExchangeRecord &other);
    QString exchange() const;
    QString name() const;
    quint16 preference() const;
    quint32 timeToLive() const;
};

%End
%If (Qt_5_0_0 -)

class QDnsServiceRecord
{
%TypeHeaderCode
#include <qdnslookup.h>
%End

public:
    QDnsServiceRecord();
    QDnsServiceRecord(const QDnsServiceRecord &other);
    ~QDnsServiceRecord();
    void swap(QDnsServiceRecord &other);
    QString name() const;
    quint16 port() const;
    quint16 priority() const;
    QString target() const;
    quint32 timeToLive() const;
    quint16 weight() const;
};

%End
%If (Qt_5_0_0 -)

class QDnsTextRecord
{
%TypeHeaderCode
#include <qdnslookup.h>
%End

public:
    QDnsTextRecord();
    QDnsTextRecord(const QDnsTextRecord &other);
    ~QDnsTextRecord();
    void swap(QDnsTextRecord &other);
    QString name() const;
    quint32 timeToLive() const;
    QList<QByteArray> values() const;
};

%End
%If (Qt_5_0_0 -)

class QDnsLookup : QObject
{
%TypeHeaderCode
#include <qdnslookup.h>
%End

public:
    enum Error
    {
        NoError,
        ResolverError,
        OperationCancelledError,
        InvalidRequestError,
        InvalidReplyError,
        ServerFailureError,
        ServerRefusedError,
        NotFoundError,
    };

    enum Type
    {
        A,
        AAAA,
        ANY,
        CNAME,
        MX,
        NS,
        PTR,
        SRV,
        TXT,
    };

    explicit QDnsLookup(QObject *parent /TransferThis/ = 0);
    QDnsLookup(QDnsLookup::Type type, const QString &name, QObject *parent /TransferThis/ = 0);
    virtual ~QDnsLookup();
    QDnsLookup::Error error() const;
    QString errorString() const;
    bool isFinished() const;
    QString name() const;
    void setName(const QString &name);
    QDnsLookup::Type type() const;
    void setType(QDnsLookup::Type);
    QList<QDnsDomainNameRecord> canonicalNameRecords() const;
    QList<QDnsHostAddressRecord> hostAddressRecords() const;
    QList<QDnsMailExchangeRecord> mailExchangeRecords() const;
    QList<QDnsDomainNameRecord> nameServerRecords() const;
    QList<QDnsDomainNameRecord> pointerRecords() const;
    QList<QDnsServiceRecord> serviceRecords() const;
    QList<QDnsTextRecord> textRecords() const;

public slots:
    void abort() /ReleaseGIL/;
    void lookup() /ReleaseGIL/;

signals:
    void finished();
    void nameChanged(const QString &name);
    void typeChanged(QDnsLookup::Type type);
};

%End
