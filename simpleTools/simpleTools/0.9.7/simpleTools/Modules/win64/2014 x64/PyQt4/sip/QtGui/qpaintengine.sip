// qpaintengine.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qpaintengine.h>
%End

class QTextItem
{
%TypeHeaderCode
#include <qpaintengine.h>
%End

public:
    enum RenderFlag
    {
        RightToLeft,
        Overline,
        Underline,
        StrikeOut,
    };

    typedef QFlags<QTextItem::RenderFlag> RenderFlags;
    qreal descent() const;
    qreal ascent() const;
    qreal width() const;
    QFlags<QTextItem::RenderFlag> renderFlags() const;
    QString text() const;
    QFont font() const;
};

QFlags<QTextItem::RenderFlag> operator|(QTextItem::RenderFlag f1, QFlags<QTextItem::RenderFlag> f2);

class QPaintEngine
{
%TypeHeaderCode
#include <qpaintengine.h>
%End

public:
    enum PaintEngineFeature
    {
        PrimitiveTransform,
        PatternTransform,
        PixmapTransform,
        PatternBrush,
        LinearGradientFill,
        RadialGradientFill,
        ConicalGradientFill,
        AlphaBlend,
        PorterDuff,
        PainterPaths,
        Antialiasing,
        BrushStroke,
%If (Qt_4_2_0 -)
        ConstantOpacity,
%End
%If (Qt_4_2_0 -)
        MaskedBrush,
%End
        PaintOutsidePaintEvent,
%If (Qt_4_3_0 -)
        PerspectiveTransform,
%End
%If (Qt_4_3_0 -)
        BlendModes,
%End
%If (Qt_4_4_0 -)
        ObjectBoundingModeGradients,
%End
%If (Qt_4_5_0 -)
        RasterOpModes,
%End
        AllFeatures,
    };

    typedef QFlags<QPaintEngine::PaintEngineFeature> PaintEngineFeatures;

    enum DirtyFlag
    {
        DirtyPen,
        DirtyBrush,
        DirtyBrushOrigin,
        DirtyFont,
        DirtyBackground,
        DirtyBackgroundMode,
        DirtyTransform,
        DirtyClipRegion,
        DirtyClipPath,
        DirtyHints,
        DirtyCompositionMode,
        DirtyClipEnabled,
%If (Qt_4_2_0 -)
        DirtyOpacity,
%End
        AllDirty,
    };

    typedef QFlags<QPaintEngine::DirtyFlag> DirtyFlags;

    enum PolygonDrawMode
    {
        OddEvenMode,
        WindingMode,
        ConvexMode,
        PolylineMode,
    };

    explicit QPaintEngine(QFlags<QPaintEngine::PaintEngineFeature> features = 0);
    virtual ~QPaintEngine();
    bool isActive() const;
    void setActive(bool newState);
    virtual bool begin(QPaintDevice *pdev) = 0;
    virtual bool end() = 0;
    virtual void updateState(const QPaintEngineState &state /NoCopy/) = 0;
    virtual void drawRects(const QRect *rects /Array/, int rectCount /ArraySize/);
    virtual void drawRects(const QRectF *rects /Array/, int rectCount /ArraySize/);
    virtual void drawLines(const QLine *lines /Array/, int lineCount /ArraySize/);
    virtual void drawLines(const QLineF *lines /Array/, int lineCount /ArraySize/);
    virtual void drawEllipse(const QRectF &r);
    virtual void drawEllipse(const QRect &r);
    virtual void drawPath(const QPainterPath &path);
    virtual void drawPoints(const QPointF *points /Array/, int pointCount /ArraySize/);
    virtual void drawPoints(const QPoint *points /Array/, int pointCount /ArraySize/);
    virtual void drawPolygon(const QPointF *points /Array/, int pointCount /ArraySize/, QPaintEngine::PolygonDrawMode mode);
    virtual void drawPolygon(const QPoint *points /Array/, int pointCount /ArraySize/, QPaintEngine::PolygonDrawMode mode);
    virtual void drawPixmap(const QRectF &r, const QPixmap &pm, const QRectF &sr) = 0;
    virtual void drawTextItem(const QPointF &p, const QTextItem &textItem /NoCopy/);
    virtual void drawTiledPixmap(const QRectF &r, const QPixmap &pixmap, const QPointF &s);
    virtual void drawImage(const QRectF &r, const QImage &pm, const QRectF &sr, Qt::ImageConversionFlags flags = Qt::AutoColor);
    void setPaintDevice(QPaintDevice *device);
    QPaintDevice *paintDevice() const;

    enum Type
    {
        X11,
        Windows,
        QuickDraw,
        CoreGraphics,
        MacPrinter,
        QWindowSystem,
        PostScript,
        OpenGL,
        Picture,
        SVG,
        Raster,
%If (Qt_4_3_0 -)
        Direct3D,
%End
%If (Qt_4_4_0 -)
        Pdf,
%End
%If (Qt_4_5_0 -)
        OpenVG,
%End
%If (Qt_4_6_0 -)
        OpenGL2,
%End
%If (Qt_4_6_0 -)
        PaintBuffer,
%End
%If (Qt_4_8_0 -)
        Blitter,
%End
        User,
        MaxUser,
    };

    virtual QPaintEngine::Type type() const = 0;
    bool hasFeature(QFlags<QPaintEngine::PaintEngineFeature> feature) const;
    QPainter *painter() const;

private:
%If (Qt_4_2_0 -)
    QPaintEngine(const QPaintEngine &);
%End
};

QFlags<QPaintEngine::PaintEngineFeature> operator|(QPaintEngine::PaintEngineFeature f1, QFlags<QPaintEngine::PaintEngineFeature> f2);

class QPaintEngineState
{
%TypeHeaderCode
#include <qpaintengine.h>
%End

public:
    QFlags<QPaintEngine::DirtyFlag> state() const;
    QPen pen() const;
    QBrush brush() const;
    QPointF brushOrigin() const;
    QBrush backgroundBrush() const;
    Qt::BGMode backgroundMode() const;
    QFont font() const;
    QMatrix matrix() const;
%If (Qt_4_2_0 -)
    qreal opacity() const;
%End
    Qt::ClipOperation clipOperation() const;
    QRegion clipRegion() const;
    QPainterPath clipPath() const;
    bool isClipEnabled() const;
    QFlags<QPainter::RenderHint> renderHints() const;
    QPainter::CompositionMode compositionMode() const;
    QPainter *painter() const;
%If (Qt_4_3_0 -)
    QTransform transform() const;
%End
%If (Qt_4_3_0 -)
    bool brushNeedsResolving() const;
%End
%If (Qt_4_3_0 -)
    bool penNeedsResolving() const;
%End
};
