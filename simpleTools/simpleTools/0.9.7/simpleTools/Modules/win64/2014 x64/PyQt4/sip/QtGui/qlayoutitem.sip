// qlayoutitem.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QLayoutItem /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qlayoutitem.h>
%End

%ConvertToSubClassCode
    if (sipCpp->widget())
    {
        sipType = sipType_QWidgetItem;
    }
    else if (sipCpp->spacerItem())
    {
        sipType = sipType_QSpacerItem;
    }
    else
    {
        // Cause a restart looking for a QLayout.
        *sipCppRet = sipCpp->layout();
        sipType = sipType_QLayout;
    }
%End

public:
    explicit QLayoutItem(Qt::Alignment alignment = 0);
    virtual ~QLayoutItem();
    virtual QSize sizeHint() const = 0;
    virtual QSize minimumSize() const = 0;
    virtual QSize maximumSize() const = 0;
    virtual Qt::Orientations expandingDirections() const = 0;
    virtual void setGeometry(const QRect &) = 0;
    virtual QRect geometry() const = 0;
    virtual bool isEmpty() const = 0;
    virtual bool hasHeightForWidth() const;
    virtual int heightForWidth(int) const;
    virtual int minimumHeightForWidth(int) const;
    virtual void invalidate();
    virtual QWidget *widget();
    virtual QLayout *layout();
    virtual QSpacerItem *spacerItem();
    Qt::Alignment alignment() const;
    void setAlignment(Qt::Alignment a);
%If (Qt_4_3_0 - Qt_5_0_0)
    QFlags<QSizePolicy::ControlType> controlTypes() const;
%End
%If (Qt_5_0_0 -)
    virtual QFlags<QSizePolicy::ControlType> controlTypes() const;
%End
};

class QSpacerItem : QLayoutItem
{
%TypeHeaderCode
#include <qlayoutitem.h>
%End

public:
    QSpacerItem(int w, int h, QSizePolicy::Policy hPolicy = QSizePolicy::Minimum, QSizePolicy::Policy vPolicy = QSizePolicy::Minimum);
%If (Qt_5_0_0 -)
    virtual ~QSpacerItem();
%End
    void changeSize(int w, int h, QSizePolicy::Policy hPolicy = QSizePolicy::Minimum, QSizePolicy::Policy vPolicy = QSizePolicy::Minimum);
    virtual QSize sizeHint() const;
    virtual QSize minimumSize() const;
    virtual QSize maximumSize() const;
    virtual Qt::Orientations expandingDirections() const;
    virtual bool isEmpty() const;
    virtual void setGeometry(const QRect &);
    virtual QRect geometry() const;
    virtual QSpacerItem *spacerItem();
};

class QWidgetItem : QLayoutItem
{
%TypeHeaderCode
#include <qlayoutitem.h>
%End

public:
    explicit QWidgetItem(QWidget *w);
%If (Qt_5_0_0 -)
    virtual ~QWidgetItem();
%End
    virtual QSize sizeHint() const;
    virtual QSize minimumSize() const;
    virtual QSize maximumSize() const;
    virtual Qt::Orientations expandingDirections() const;
    virtual bool isEmpty() const;
    virtual void setGeometry(const QRect &);
    virtual QRect geometry() const;
    virtual QWidget *widget();
    virtual bool hasHeightForWidth() const;
    virtual int heightForWidth(int) const;
%If (Qt_5_0_0 -)
    virtual QFlags<QSizePolicy::ControlType> controlTypes() const;
%End

private:
%If (Qt_4_2_0 -)
    QWidgetItem(const QWidgetItem &);
%End
};
