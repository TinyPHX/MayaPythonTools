// qdeclarativeexpression.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtDeclarative Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDeclarativeExpression : QObject
{
%TypeHeaderCode
#include <qdeclarativeexpression.h>
%End

public:
    QDeclarativeExpression();
    QDeclarativeExpression(QDeclarativeContext *, QObject *, const QString &, QObject *parent /TransferThis/ = 0);
    virtual ~QDeclarativeExpression();
    QDeclarativeEngine *engine() const;
    QDeclarativeContext *context() const;
    QString expression() const;
    void setExpression(const QString &);
    bool notifyOnValueChanged() const;
    void setNotifyOnValueChanged(bool);
    QString sourceFile() const;
    int lineNumber() const;
    void setSourceLocation(const QString &fileName, int line);
    QObject *scopeObject() const;
    bool hasError() const;
    void clearError();
    QDeclarativeError error() const;
    QVariant evaluate(bool *valueIsUndefined = 0);

signals:
    void valueChanged();

private:
    QDeclarativeExpression(const QDeclarativeExpression &);
};

%End
