// qdeclarativecomponent.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtDeclarative Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDeclarativeComponent : QObject
{
%TypeHeaderCode
#include <qdeclarativecomponent.h>
%End

public:
    QDeclarativeComponent(QDeclarativeEngine *, QObject *parent /TransferThis/ = 0);
    QDeclarativeComponent(QDeclarativeEngine *, const QString &fileName, QObject *parent /TransferThis/ = 0);
    QDeclarativeComponent(QDeclarativeEngine *, const QUrl &url, QObject *parent /TransferThis/ = 0);
    virtual ~QDeclarativeComponent();

    enum Status
    {
        Null,
        Ready,
        Loading,
        Error,
    };

    QDeclarativeComponent::Status status() const;
    bool isNull() const;
    bool isReady() const;
    bool isError() const;
    bool isLoading() const;
    QList<QDeclarativeError> errors() const;
    qreal progress() const;
    QUrl url() const;
    virtual QObject *create(QDeclarativeContext *context = 0) /Factory/;
    virtual QObject *beginCreate(QDeclarativeContext *) /Factory/;
    virtual void completeCreate();
    void loadUrl(const QUrl &url);
    void setData(const QByteArray &, const QUrl &baseUrl);
    QDeclarativeContext *creationContext() const;

signals:
    void statusChanged(QDeclarativeComponent::Status);
    void progressChanged(qreal);

private:
    QDeclarativeComponent(const QDeclarativeComponent &);
};

%End
