// qdeclarativeview.sip generated by MetaSIP on Fri Mar  1 21:46:03 2013
//
// This file is part of the QtDeclarative Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDeclarativeView : QGraphicsView
{
%TypeHeaderCode
#include <qdeclarativeview.h>
%End

public:
    explicit QDeclarativeView(QWidget *parent /TransferThis/ = 0);
    QDeclarativeView(const QUrl &source, QWidget *parent /TransferThis/ = 0);
    virtual ~QDeclarativeView();
    QUrl source() const;
    void setSource(const QUrl &);
    QDeclarativeEngine *engine() const /KeepReference/;
    QDeclarativeContext *rootContext() const /KeepReference/;
    QGraphicsObject *rootObject() const /KeepReference/;

    enum ResizeMode
    {
        SizeViewToRootObject,
        SizeRootObjectToView,
    };

    QDeclarativeView::ResizeMode resizeMode() const;
    void setResizeMode(QDeclarativeView::ResizeMode);

    enum Status
    {
        Null,
        Ready,
        Loading,
        Error,
    };

    QDeclarativeView::Status status() const;
    QList<QDeclarativeError> errors() const;
    virtual QSize sizeHint() const;
    QSize initialSize() const;

signals:
    void sceneResized(QSize size);
    void statusChanged(QDeclarativeView::Status);

protected:
    virtual void resizeEvent(QResizeEvent *);
    virtual void paintEvent(QPaintEvent *event);
    virtual void timerEvent(QTimerEvent *);
    virtual bool eventFilter(QObject *watched, QEvent *e);

private:
    QDeclarativeView(const QDeclarativeView &);
};

%End
