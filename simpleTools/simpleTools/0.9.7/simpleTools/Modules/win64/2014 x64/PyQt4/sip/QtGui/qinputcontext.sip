// qinputcontext.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (- Qt_5_0_0)

class QInputContext : QObject
{
%TypeHeaderCode
#include <qinputcontext.h>
%End

public:
    explicit QInputContext(QObject *parent /TransferThis/ = 0);
    virtual ~QInputContext();
    virtual QString identifierName() = 0;
    virtual QString language() = 0;
    virtual void reset() = 0;
    virtual void update();
    virtual void mouseHandler(int x, QMouseEvent *event);
    virtual QFont font() const;
    virtual bool isComposing() const = 0;
    QWidget *focusWidget() const;
    virtual void setFocusWidget(QWidget *w);
    virtual void widgetDestroyed(QWidget *w);
    virtual QList<QAction*> actions();
    virtual bool filterEvent(const QEvent *event);
    void sendEvent(const QInputMethodEvent &event);

    enum StandardFormat
    {
        PreeditFormat,
        SelectionFormat,
    };

    QTextFormat standardFormat(QInputContext::StandardFormat s) const;

private:
    QInputContext(const QInputContext &);
};

%End
