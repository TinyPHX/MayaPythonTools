// qscriptclass.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtScript Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)
%ModuleCode
#include <qscriptclass.h>
%End
%End

%If (Qt_4_4_0 -)

class QScriptClass
{
%TypeHeaderCode
#include <qscriptclass.h>
%End

public:
    enum QueryFlag
    {
        HandlesReadAccess,
        HandlesWriteAccess,
    };

    typedef QFlags<QScriptClass::QueryFlag> QueryFlags;

    enum Extension
    {
        Callable,
%If (Qt_4_5_0 -)
        HasInstance,
%End
    };

    QScriptClass(QScriptEngine *engine);
    virtual ~QScriptClass();
    QScriptEngine *engine() const;
    virtual QFlags<QScriptClass::QueryFlag> queryProperty(const QScriptValue &object, const QScriptString &name, QFlags<QScriptClass::QueryFlag> flags, uint *id);
    virtual QScriptValue property(const QScriptValue &object, const QScriptString &name, uint id);
    virtual void setProperty(QScriptValue &object, const QScriptString &name, uint id, const QScriptValue &value);
    virtual QFlags<QScriptValue::PropertyFlag> propertyFlags(const QScriptValue &object, const QScriptString &name, uint id);
    virtual QScriptClassPropertyIterator *newIterator(const QScriptValue &object);
    virtual QScriptValue prototype() const;
    virtual QString name() const;
    virtual bool supportsExtension(QScriptClass::Extension extension) const;
    virtual QVariant extension(QScriptClass::Extension extension, const QVariant &argument /DocValue="Py_v3:None"/ = QVariant());

private:
    QScriptClass(const QScriptClass &);
};

%End
%If (Qt_4_4_0 -)
QFlags<QScriptClass::QueryFlag> operator|(QScriptClass::QueryFlag f1, QFlags<QScriptClass::QueryFlag> f2);
%End
