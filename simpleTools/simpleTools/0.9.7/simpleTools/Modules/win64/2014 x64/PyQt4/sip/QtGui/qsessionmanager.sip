// qsessionmanager.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (PyQt_SessionManager)

class QSessionManager : QObject
{
%TypeHeaderCode
#include <qsessionmanager.h>
%End

%If (Qt_5_0_0 -)
    QSessionManager(QGuiApplication *app /TransferThis/, QString &id, QString &key);
%End
%If (- Qt_5_0_0)
    QSessionManager(QApplication *app /TransferThis/, QString &id, QString &key);
%End
    virtual ~QSessionManager();

public:
    QString sessionId() const;
    QString sessionKey() const;
    bool allowsInteraction();
    bool allowsErrorInteraction();
    void release();
    void cancel();

    enum RestartHint
    {
        RestartIfRunning,
        RestartAnyway,
        RestartImmediately,
        RestartNever,
    };

    void setRestartHint(QSessionManager::RestartHint);
    QSessionManager::RestartHint restartHint() const;
    void setRestartCommand(const QStringList &);
    QStringList restartCommand() const;
    void setDiscardCommand(const QStringList &);
    QStringList discardCommand() const;
    void setManagerProperty(const QString &name, const QString &value);
    void setManagerProperty(const QString &name, const QStringList &value);
    bool isPhase2() const;
    void requestPhase2();
};

%End
