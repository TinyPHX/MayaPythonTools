// qdbusextratypes.sip generated by MetaSIP on Fri Mar  1 21:46:03 2013
//
// This file is part of the QtDBus Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)
%ModuleCode
#include <qdbusextratypes.h>
%End
%End

%If (Qt_5_0_0 -)

class QDBusObjectPath
{
%TypeHeaderCode
#include <qdbusextratypes.h>
%End

public:
    QDBusObjectPath();
    explicit QDBusObjectPath(const QString &objectPath);
    QString path() const;
    void setPath(const QString &objectPath);
    long __hash__() const;
%MethodCode
        sipRes = qHash(*sipCpp, 0);
%End
};

%End
%If (Qt_4_7_0 - Qt_5_0_0)

class QDBusObjectPath : private QString
{
%TypeHeaderCode
#include <qdbusextratypes.h>
%End

%TypeCode
#include <QHash>
%End

public:
    QDBusObjectPath();
    explicit QDBusObjectPath(const QString &path);
    QString path() const;
    void setPath(const QString &path);
    long __hash__() const;
%MethodCode
        sipRes = qHash(*sipCpp);
%End
};

%End
%If (Qt_4_7_0 -)
bool operator==(const QDBusObjectPath &lhs, const QDBusObjectPath &rhs);
%End
%If (Qt_4_7_0 -)
bool operator!=(const QDBusObjectPath &lhs, const QDBusObjectPath &rhs);
%End
%If (Qt_4_7_0 -)
bool operator<(const QDBusObjectPath &lhs, const QDBusObjectPath &rhs);
%End
%If (Qt_5_0_0 -)

class QDBusSignature
{
%TypeHeaderCode
#include <qdbusextratypes.h>
%End

public:
    QDBusSignature();
    explicit QDBusSignature(const QString &dBusSignature);
    QString signature() const;
    void setSignature(const QString &dBusSignature);
    long __hash__() const;
%MethodCode
        sipRes = qHash(*sipCpp, 0);
%End
};

%End
%If (Qt_4_7_0 - Qt_5_0_0)

class QDBusSignature : private QString
{
%TypeHeaderCode
#include <qdbusextratypes.h>
%End

%TypeCode
#include <QHash>
%End

public:
    QDBusSignature();
    explicit QDBusSignature(const QString &signature);
    QString signature() const;
    void setSignature(const QString &signature);
    long __hash__() const;
%MethodCode
        sipRes = qHash(*sipCpp);
%End
};

%End
%If (Qt_4_7_0 -)
bool operator==(const QDBusSignature &lhs, const QDBusSignature &rhs);
%End
%If (Qt_4_7_0 -)
bool operator!=(const QDBusSignature &lhs, const QDBusSignature &rhs);
%End
%If (Qt_4_7_0 -)
bool operator<(const QDBusSignature &lhs, const QDBusSignature &rhs);
%End
%If (Qt_5_0_0 -)

class QDBusVariant
{
%TypeHeaderCode
#include <qdbusextratypes.h>
%End

public:
    QDBusVariant();
    explicit QDBusVariant(const QVariant &dBusVariant);
    QVariant variant() const;
    void setVariant(const QVariant &dBusVariant);
};

%End
%If (Qt_4_7_0 - Qt_5_0_0)

class QDBusVariant : private QVariant
{
%TypeHeaderCode
#include <qdbusextratypes.h>
%End

public:
    QDBusVariant();
    explicit QDBusVariant(const QVariant &variant);
    QVariant variant() const;
    void setVariant(const QVariant &variant);
};

%End
%If (Qt_4_7_0 -)
bool operator==(const QDBusVariant &v1, const QDBusVariant &v2);
%End
