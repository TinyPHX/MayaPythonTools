// qtoolbar.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QToolBar : QWidget
{
%TypeHeaderCode
#include <qtoolbar.h>
%End

public:
    QToolBar(const QString &title, QWidget *parent /TransferThis/ = 0);
    explicit QToolBar(QWidget *parent /TransferThis/ = 0);
    virtual ~QToolBar();
    void setMovable(bool movable);
    bool isMovable() const;
    void setAllowedAreas(Qt::ToolBarAreas areas);
    Qt::ToolBarAreas allowedAreas() const;
    bool isAreaAllowed(Qt::ToolBarArea area) const;
    void setOrientation(Qt::Orientation orientation);
    Qt::Orientation orientation() const;
    void clear();
    void addAction(QAction *action);
    QAction *addAction(const QString &text) /Transfer/;
    QAction *addAction(const QIcon &icon, const QString &text) /Transfer/;
    QAction *addAction(const QString &text, SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member) /Transfer/ [QAction * (const QString &text, const QObject *receiver, const char *member)];
    QAction *addAction(const QIcon &icon, const QString &text, SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member) /Transfer/ [QAction * (const QIcon &icon, const QString &text, const QObject *receiver, const char *member)];
    QAction *addSeparator() /Transfer/;
    QAction *insertSeparator(QAction *before) /Transfer/;
    QAction *addWidget(QWidget *widget /Transfer/) /Transfer/;
    QAction *insertWidget(QAction *before, QWidget *widget /Transfer/) /Transfer/;
    QRect actionGeometry(QAction *action) const;
    QAction *actionAt(const QPoint &p) const;
    QAction *actionAt(int ax, int ay) const;
    QAction *toggleViewAction() const;
    QSize iconSize() const;
    Qt::ToolButtonStyle toolButtonStyle() const;
%If (Qt_4_2_0 -)
    QWidget *widgetForAction(QAction *action) const;
%End

public slots:
    void setIconSize(const QSize &iconSize);
    void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle);

signals:
    void actionTriggered(QAction *action);
    void movableChanged(bool movable);
    void allowedAreasChanged(Qt::ToolBarAreas allowedAreas);
    void orientationChanged(Qt::Orientation orientation);
    void iconSizeChanged(const QSize &iconSize);
    void toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle);
%If (Qt_4_6_0 -)
    void topLevelChanged(bool topLevel);
%End
%If (Qt_4_7_0 -)
    void visibilityChanged(bool visible);
%End

protected:
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionToolBar *option) const;
%End
    virtual void actionEvent(QActionEvent *event);
    virtual void changeEvent(QEvent *event);
%If (- Qt_5_0_0)
    virtual void childEvent(QChildEvent *event);
%End
    virtual void paintEvent(QPaintEvent *event);
%If (- Qt_5_0_0)
    virtual void resizeEvent(QResizeEvent *event);
%End
    virtual bool event(QEvent *event);

public:
%If (Qt_4_3_0 -)
    bool isFloatable() const;
%End
%If (Qt_4_3_0 -)
    void setFloatable(bool floatable);
%End
%If (Qt_4_3_0 -)
    bool isFloating() const;
%End

private:
    QToolBar(const QToolBar &);
};
