// qmenubar.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QMenuBar : QWidget
{
%TypeHeaderCode
#include <qmenubar.h>
%End

public:
    explicit QMenuBar(QWidget *parent /TransferThis/ = 0);
    virtual ~QMenuBar();
    void addAction(QAction *action);
    QAction *addAction(const QString &text) /Transfer/;
    QAction *addAction(const QString &text, SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member) /Transfer/ [QAction * (const QString &text, const QObject *receiver, const char *member)];
    QAction *addMenu(QMenu *menu);
    QMenu *addMenu(const QString &title) /Transfer/;
    QMenu *addMenu(const QIcon &icon, const QString &title) /Transfer/;
    QAction *addSeparator() /Transfer/;
    QAction *insertMenu(QAction *before, QMenu *menu);
%If (Qt_4_2_0 -)
    QAction *insertSeparator(QAction *before) /Transfer/;
%End
    void clear();
    QAction *activeAction() const;
    void setActiveAction(QAction *action);
    void setDefaultUp(bool);
    bool isDefaultUp() const;
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    virtual int heightForWidth(int) const;
    QRect actionGeometry(QAction *) const;
    QAction *actionAt(const QPoint &) const;
    void setCornerWidget(QWidget *widget /Transfer/, Qt::Corner corner = Qt::TopRightCorner);
    QWidget *cornerWidget(Qt::Corner corner = Qt::TopRightCorner) const;
%If (Qt_4_3_0 -)
    virtual void setVisible(bool visible);
%End

signals:
    void triggered(QAction *action);
    void hovered(QAction *action);

protected:
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionMenuItem *option, const QAction *action) const;
%End
    virtual void changeEvent(QEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void leaveEvent(QEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void actionEvent(QActionEvent *);
    virtual void focusOutEvent(QFocusEvent *);
    virtual void focusInEvent(QFocusEvent *);
    virtual bool eventFilter(QObject *, QEvent *);
    virtual bool event(QEvent *);
%If (Qt_4_4_0 -)
    virtual void timerEvent(QTimerEvent *);
%End

public:
%If (Qt_4_6_0 -)
    bool isNativeMenuBar() const;
%End
%If (Qt_4_6_0 -)
    void setNativeMenuBar(bool nativeMenuBar);
%End

private:
    QMenuBar(const QMenuBar &);
};
