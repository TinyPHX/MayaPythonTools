// qtoolbox.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QToolBox : QFrame
{
%TypeHeaderCode
#include <qtoolbox.h>
%End

public:
%If (Qt_4_2_0 -)
    QToolBox(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QToolBox(QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
%End
    virtual ~QToolBox();
    int addItem(QWidget *item /Transfer/, const QString &text);
    int addItem(QWidget *item /Transfer/, const QIcon &iconSet, const QString &text);
    int insertItem(int index, QWidget *item /Transfer/, const QString &text);
    int insertItem(int index, QWidget *widget /Transfer/, const QIcon &icon, const QString &text);
    void removeItem(int index);
    void setItemEnabled(int index, bool enabled);
    bool isItemEnabled(int index) const;
    void setItemText(int index, const QString &text);
    QString itemText(int index) const;
    void setItemIcon(int index, const QIcon &icon);
    QIcon itemIcon(int index) const;
    void setItemToolTip(int index, const QString &toolTip);
    QString itemToolTip(int index) const;
    int currentIndex() const;
    QWidget *currentWidget() const;
    QWidget *widget(int index) const;
    int indexOf(QWidget *widget) const;
    int count() const /__len__/;

public slots:
    void setCurrentIndex(int index);
    void setCurrentWidget(QWidget *widget);

signals:
    void currentChanged(int index);

protected:
    virtual void itemInserted(int index);
    virtual void itemRemoved(int index);
    virtual bool event(QEvent *e);
    virtual void showEvent(QShowEvent *e);
    virtual void changeEvent(QEvent *);

private:
    QToolBox(const QToolBox &);
};
