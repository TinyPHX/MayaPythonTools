// qmdisubwindow.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_3_0 -)
%ModuleCode
#include <qmdisubwindow.h>
%End
%End

%If (Qt_4_3_0 -)

class QMdiSubWindow : QWidget
{
%TypeHeaderCode
#include <qmdisubwindow.h>
%End

public:
    enum SubWindowOption
    {
        RubberBandResize,
        RubberBandMove,
    };

    typedef QFlags<QMdiSubWindow::SubWindowOption> SubWindowOptions;
    QMdiSubWindow(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
    virtual ~QMdiSubWindow();
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    void setWidget(QWidget *widget /Transfer/);
%MethodCode
        // We have to implement /TransferBack/ on any existing widget.
        QWidget *w = sipCpp->widget();
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setWidget(a0);
        Py_END_ALLOW_THREADS
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferBack(wo);
        }
%End

    QWidget *widget() const;
    bool isShaded() const;
    void setOption(QMdiSubWindow::SubWindowOption option, bool on = true);
    bool testOption(QMdiSubWindow::SubWindowOption) const;
    void setKeyboardSingleStep(int step);
    int keyboardSingleStep() const;
    void setKeyboardPageStep(int step);
    int keyboardPageStep() const;
    void setSystemMenu(QMenu *systemMenu /Transfer/);
%MethodCode
        // We have to break the parent association on any existing menu.
        QMenu *w = sipCpp->systemMenu();
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QMenu);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setSystemMenu(a0);
        Py_END_ALLOW_THREADS
%End

    QMenu *systemMenu() const;
%If (Qt_4_4_0 -)
    QMdiArea *mdiArea() const;
%End

signals:
    void windowStateChanged(Qt::WindowStates oldState, Qt::WindowStates newState);
    void aboutToActivate();

public slots:
    void showSystemMenu();
    void showShaded();

protected:
    virtual bool eventFilter(QObject *object, QEvent *event);
    virtual bool event(QEvent *event);
    virtual void showEvent(QShowEvent *showEvent);
    virtual void hideEvent(QHideEvent *hideEvent);
    virtual void changeEvent(QEvent *changeEvent);
    virtual void closeEvent(QCloseEvent *closeEvent);
    virtual void leaveEvent(QEvent *leaveEvent);
    virtual void resizeEvent(QResizeEvent *resizeEvent);
    virtual void timerEvent(QTimerEvent *timerEvent);
    virtual void moveEvent(QMoveEvent *moveEvent);
    virtual void paintEvent(QPaintEvent *paintEvent);
    virtual void mousePressEvent(QMouseEvent *mouseEvent);
    virtual void mouseDoubleClickEvent(QMouseEvent *mouseEvent);
    virtual void mouseReleaseEvent(QMouseEvent *mouseEvent);
    virtual void mouseMoveEvent(QMouseEvent *mouseEvent);
    virtual void keyPressEvent(QKeyEvent *keyEvent);
    virtual void contextMenuEvent(QContextMenuEvent *contextMenuEvent);
    virtual void focusInEvent(QFocusEvent *focusInEvent);
    virtual void focusOutEvent(QFocusEvent *focusOutEvent);
    virtual void childEvent(QChildEvent *childEvent);

private:
    QMdiSubWindow(const QMdiSubWindow &);
};

%End
%If (Qt_4_3_0 -)
QFlags<QMdiSubWindow::SubWindowOption> operator|(QMdiSubWindow::SubWindowOption f1, QFlags<QMdiSubWindow::SubWindowOption> f2);
%End
