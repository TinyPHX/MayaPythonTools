// qwebsettings.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtWebKit Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QWebSettings
{
%TypeHeaderCode
#include <qwebsettings.h>
%End

public:
    enum FontFamily
    {
        StandardFont,
        FixedFont,
        SerifFont,
        SansSerifFont,
        CursiveFont,
        FantasyFont,
    };

    enum WebAttribute
    {
        AutoLoadImages,
        JavascriptEnabled,
        JavaEnabled,
        PluginsEnabled,
        PrivateBrowsingEnabled,
        JavascriptCanOpenWindows,
%If (Qt_4_8_0 -)
        JavascriptCanCloseWindows,
%End
        JavascriptCanAccessClipboard,
        DeveloperExtrasEnabled,
        LinksIncludedInFocusChain,
%If (Qt_4_5_0 -)
        ZoomTextOnly,
%End
%If (Qt_4_5_0 -)
        PrintElementBackgrounds,
%End
%If (Qt_4_5_0 -)
        OfflineStorageDatabaseEnabled,
%End
%If (Qt_4_5_0 -)
        OfflineWebApplicationCacheEnabled,
%End
%If (Qt_4_5_0 -)
        LocalStorageDatabaseEnabled,
%End
%If (Qt_4_6_0 -)
        LocalStorageEnabled,
%End
%If (Qt_4_6_0 -)
        LocalContentCanAccessRemoteUrls,
%End
%If (Qt_4_6_0 -)
        DnsPrefetchEnabled,
%End
%If (Qt_4_7_0 -)
        XSSAuditingEnabled,
%End
%If (Qt_4_7_0 -)
        AcceleratedCompositingEnabled,
%End
%If (Qt_4_7_0 -)
        SpatialNavigationEnabled,
%End
%If (Qt_4_7_0 -)
        LocalContentCanAccessFileUrls,
%End
%If (Qt_4_7_0 -)
        TiledBackingStoreEnabled,
%End
%If (Qt_4_7_0 -)
        FrameFlatteningEnabled,
%End
%If (Qt_4_7_0 -)
        SiteSpecificQuirksEnabled,
%End
%If (Qt_4_8_0 -)
        WebGLEnabled,
%End
%If (Qt_4_8_0 -)
        HyperlinkAuditingEnabled,
%End
%If (Qt_5_0_0 -)
        CSSRegionsEnabled,
%End
%If (Qt_5_0_0 -)
        CSSGridLayoutEnabled,
%End
%If (Qt_5_0_0 -)
        ScrollAnimatorEnabled,
%End
%If (Qt_5_0_0 -)
        CaretBrowsingEnabled,
%End
%If (Qt_5_0_0 -)
        NotificationsEnabled,
%End
    };

    enum WebGraphic
    {
        MissingImageGraphic,
        MissingPluginGraphic,
        DefaultFrameIconGraphic,
        TextAreaSizeGripCornerGraphic,
%If (Qt_4_8_0 -)
        InputSpeechButtonGraphic,
%End
%If (Qt_4_8_0 -)
        SearchCancelButtonGraphic,
%End
%If (Qt_4_8_0 -)
        SearchCancelButtonPressedGraphic,
%End
    };

    enum FontSize
    {
        MinimumFontSize,
        MinimumLogicalFontSize,
        DefaultFontSize,
        DefaultFixedFontSize,
    };

    static QWebSettings *globalSettings();
    void setFontFamily(QWebSettings::FontFamily which, const QString &family);
    QString fontFamily(QWebSettings::FontFamily which) const;
    void resetFontFamily(QWebSettings::FontFamily which);
    void setFontSize(QWebSettings::FontSize type, int size);
    int fontSize(QWebSettings::FontSize type) const;
    void resetFontSize(QWebSettings::FontSize type);
    void setAttribute(QWebSettings::WebAttribute attr, bool on);
    bool testAttribute(QWebSettings::WebAttribute attr) const;
    void resetAttribute(QWebSettings::WebAttribute attr);
    void setUserStyleSheetUrl(const QUrl &location);
    QUrl userStyleSheetUrl() const;
    static void setIconDatabasePath(const QString &location);
    static QString iconDatabasePath();
    static void clearIconDatabase();
    static QIcon iconForUrl(const QUrl &url);
    static void setWebGraphic(QWebSettings::WebGraphic type, const QPixmap &graphic);
    static QPixmap webGraphic(QWebSettings::WebGraphic type);
    static void setMaximumPagesInCache(int pages);
    static int maximumPagesInCache();
    static void setObjectCacheCapacities(int cacheMinDeadCapacity, int cacheMaxDead, int totalCapacity);

private:
    QWebSettings();
    QWebSettings(const QWebSettings &);
    ~QWebSettings();

public:
%If (Qt_4_5_0 -)
    static void setOfflineStoragePath(const QString &path);
%End
%If (Qt_4_5_0 -)
    static QString offlineStoragePath();
%End
%If (Qt_4_5_0 -)
    static void setOfflineStorageDefaultQuota(qint64 maximumSize);
%End
%If (Qt_4_5_0 -)
    static qint64 offlineStorageDefaultQuota();
%End
%If (Qt_4_6_0 -)
    void setDefaultTextEncoding(const QString &encoding);
%End
%If (Qt_4_6_0 -)
    QString defaultTextEncoding() const;
%End
%If (Qt_4_6_0 -)
    static void setOfflineWebApplicationCachePath(const QString &path);
%End
%If (Qt_4_6_0 -)
    static QString offlineWebApplicationCachePath();
%End
%If (Qt_4_6_0 -)
    static void setOfflineWebApplicationCacheQuota(qint64 maximumSize);
%End
%If (Qt_4_6_0 -)
    static qint64 offlineWebApplicationCacheQuota();
%End
%If (Qt_4_6_0 -)
    void setLocalStoragePath(const QString &path);
%End
%If (Qt_4_6_0 -)
    QString localStoragePath() const;
%End
%If (Qt_4_6_0 -)
    static void clearMemoryCaches();
%End
%If (Qt_4_6_0 -)
    static void enablePersistentStorage(const QString &path = QString());
%End
%If (Qt_5_0_0 -)

    enum ThirdPartyCookiePolicy
    {
        AlwaysAllowThirdPartyCookies,
        AlwaysBlockThirdPartyCookies,
        AllowThirdPartyWithExistingCookies,
    };

%End
%If (Qt_5_0_0 -)
    void setThirdPartyCookiePolicy(QWebSettings::ThirdPartyCookiePolicy);
%End
%If (Qt_5_0_0 -)
    QWebSettings::ThirdPartyCookiePolicy thirdPartyCookiePolicy() const;
%End
};

%End
