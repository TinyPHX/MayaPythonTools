// qftp.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (- Qt_5_0_0)

class QFtp : QObject
{
%TypeHeaderCode
#include <qftp.h>
%End

public:
    explicit QFtp(QObject *parent /TransferThis/ = 0);
    virtual ~QFtp();

    enum State
    {
        Unconnected,
        HostLookup,
        Connecting,
        Connected,
        LoggedIn,
        Closing,
    };

    enum Error
    {
        NoError,
        UnknownError,
        HostNotFound,
        ConnectionRefused,
        NotConnected,
    };

    enum Command
    {
        None /PyName=None_/,
        SetTransferMode,
        SetProxy,
        ConnectToHost,
        Login,
        Close,
        List,
        Cd,
        Get,
        Put,
        Remove,
        Mkdir,
        Rmdir,
        Rename,
        RawCommand,
    };

    enum TransferMode
    {
        Active,
        Passive,
    };

    enum TransferType
    {
        Binary,
        Ascii,
    };

    int setProxy(const QString &host, quint16 port);
    int connectToHost(const QString &host, quint16 port = 21) /ReleaseGIL/;
    int login(const QString &user /DocValue="Py_v3:''"/ = QString(), const QString &password /DocValue="Py_v3:''"/ = QString()) /ReleaseGIL/;
    int close() /ReleaseGIL/;
    int setTransferMode(QFtp::TransferMode mode);
    int list(const QString &directory /DocValue="Py_v3:''"/ = QString()) /ReleaseGIL/;
    int cd(const QString &directory) /ReleaseGIL/;
    int get(const QString &file, QIODevice *device = 0, QFtp::TransferType type = QFtp::Binary) /ReleaseGIL/;
    int put(const QByteArray &data, const QString &file, QFtp::TransferType type = QFtp::Binary) /ReleaseGIL/;
    int put(QIODevice *device, const QString &file, QFtp::TransferType type = QFtp::Binary) /ReleaseGIL/;
    int remove(const QString &file) /ReleaseGIL/;
    int mkdir(const QString &dir) /ReleaseGIL/;
    int rmdir(const QString &dir) /ReleaseGIL/;
    int rename(const QString &oldname, const QString &newname) /ReleaseGIL/;
    int rawCommand(const QString &command) /ReleaseGIL/;
    qint64 bytesAvailable() const;
    SIP_PYOBJECT read(qint64 maxlen) /DocType="Py_v3:bytes;str",ReleaseGIL/;
%MethodCode
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
%End

    QByteArray readAll() /ReleaseGIL/;
    int currentId() const;
    QIODevice *currentDevice() const;
    QFtp::Command currentCommand() const;
    bool hasPendingCommands() const;
    void clearPendingCommands();
    QFtp::State state() const;
    QFtp::Error error() const;
    QString errorString() const;

public slots:
    void abort();

signals:
    void stateChanged(int);
    void listInfo(const QUrlInfo &);
    void readyRead();
    void dataTransferProgress(qint64, qint64);
    void rawCommandReply(int, const QString &);
    void commandStarted(int);
    void commandFinished(int, bool);
    void done(bool);

private:
    QFtp(const QFtp &);
};

%End
