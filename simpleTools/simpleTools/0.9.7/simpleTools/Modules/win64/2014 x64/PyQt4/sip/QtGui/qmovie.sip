// qmovie.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QMovie : QObject
{
%TypeHeaderCode
#include <qmovie.h>
%End

public:
    enum MovieState
    {
        NotRunning,
        Paused,
        Running,
    };

    enum CacheMode
    {
        CacheNone,
        CacheAll,
    };

%If (Qt_5_0_0 -)
    explicit QMovie(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QMovie(QObject *parent /TransferThis/ = 0);
%End
    QMovie(QIODevice *device, const QByteArray &format = QByteArray(), QObject *parent /TransferThis/ = 0);
    QMovie(const QString &fileName, const QByteArray &format = QByteArray(), QObject *parent /TransferThis/ = 0);
    virtual ~QMovie();
    static QList<QByteArray> supportedFormats();
    void setDevice(QIODevice *device);
    QIODevice *device() const;
    void setFileName(const QString &fileName);
    QString fileName() const;
    void setFormat(const QByteArray &format);
    QByteArray format() const;
    void setBackgroundColor(const QColor &color);
    QColor backgroundColor() const;
    QMovie::MovieState state() const;
    QRect frameRect() const;
    QImage currentImage() const;
    QPixmap currentPixmap() const;
    bool isValid() const;
    bool jumpToFrame(int frameNumber);
    int loopCount() const;
    int frameCount() const;
    int nextFrameDelay() const;
    int currentFrameNumber() const;
    void setSpeed(int percentSpeed);
    int speed() const;
    QSize scaledSize();
    void setScaledSize(const QSize &size);
%If (Qt_4_2_0 -)
    QMovie::CacheMode cacheMode() const;
%End
%If (- Qt_4_2_0)
    QMovie::CacheMode cacheMode();
%End
    void setCacheMode(QMovie::CacheMode mode);

signals:
    void started();
    void resized(const QSize &size);
    void updated(const QRect &rect);
    void stateChanged(QMovie::MovieState state);
    void error(QImageReader::ImageReaderError error);
    void finished();
    void frameChanged(int frameNumber);

public slots:
    void start();
    bool jumpToNextFrame();
    void setPaused(bool paused);
    void stop();

private:
    QMovie(const QMovie &);
};
