// qbitarray.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qbitarray.h>
%End

class QBitArray
{
%TypeHeaderCode
#include <qbitarray.h>
%End

%TypeCode
// This is needed by __hash__().
#include <qhash.h>
%End

public:
    QBitArray();
    QBitArray(int size, bool value = false);
    QBitArray(const QBitArray &other);
    int size() const;
    int count() const /__len__/;
    bool isEmpty() const;
    bool isNull() const;
    void resize(int size);
    void detach();
    bool isDetached() const;
    void clear();
    QBitArray &operator&=(const QBitArray &);
    QBitArray &operator|=(const QBitArray &);
    QBitArray &operator^=(const QBitArray &);
    QBitArray operator~() const;
    bool operator==(const QBitArray &a) const;
    bool operator!=(const QBitArray &a) const;
    void fill(bool val, int first, int last);
    void truncate(int pos);
    bool fill(bool value, int size = -1);
    bool testBit(int i) const;
    void setBit(int i);
    void clearBit(int i);
    void setBit(int i, bool val);
    bool toggleBit(int i);
    bool operator[](int i) const;
%MethodCode
        SIP_SSIZE_T idx = sipConvertFromSequenceIndex(a0, sipCpp->count());
        
        if (idx < 0)
            sipIsErr = 1;
        else
            sipRes = sipCpp->operator[]((int)idx);
%End

    bool at(int i) const;
    int count(bool on) const;
%If (Qt_4_3_0 -)
    long __hash__() const;
%MethodCode
        sipRes = qHash(*sipCpp);
%End

%End
%If (Qt_4_8_0 -)
    void swap(QBitArray &other);
%End
};

QBitArray operator&(const QBitArray &, const QBitArray &);
QBitArray operator|(const QBitArray &, const QBitArray &);
QBitArray operator^(const QBitArray &, const QBitArray &);
QDataStream &operator<<(QDataStream &, const QBitArray & /Constrained/);
QDataStream &operator>>(QDataStream &, QBitArray & /Constrained/);
%If (Qt_4_3_0 -)
void qSwap(QBitArray &value1, QBitArray &value2);
%End
