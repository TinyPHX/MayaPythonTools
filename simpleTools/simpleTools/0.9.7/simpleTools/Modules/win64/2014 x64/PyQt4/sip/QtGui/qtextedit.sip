// qtextedit.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qtextedit.h>
%End

class QTextEdit : QAbstractScrollArea
{
%TypeHeaderCode
#include <qtextedit.h>
%End

public:
%If (Qt_4_2_0 -)

    struct ExtraSelection
    {
%TypeHeaderCode
#include <qtextedit.h>
%End

        QTextCursor cursor;
        QTextCharFormat format;
    };

%End

    enum LineWrapMode
    {
        NoWrap,
        WidgetWidth,
        FixedPixelWidth,
        FixedColumnWidth,
    };

    enum AutoFormattingFlag
    {
        AutoNone,
        AutoBulletList,
        AutoAll,
    };

    typedef QFlags<QTextEdit::AutoFormattingFlag> AutoFormatting;
%If (- Qt_4_2_0)

    enum CursorAction
    {
        MoveBackward,
        MoveForward,
        MoveWordBackward,
        MoveWordForward,
        MoveUp,
        MoveDown,
        MoveLineStart,
        MoveLineEnd,
        MoveHome,
        MoveEnd,
        MovePageUp,
        MovePageDown,
    };

%End
    explicit QTextEdit(QWidget *parent /TransferThis/ = 0);
    QTextEdit(const QString &text, QWidget *parent /TransferThis/ = 0);
    virtual ~QTextEdit();
    void setDocument(QTextDocument *document /KeepReference/);
    QTextDocument *document() const;
    void setTextCursor(const QTextCursor &cursor);
    QTextCursor textCursor() const;
    bool isReadOnly() const;
    void setReadOnly(bool ro);
    qreal fontPointSize() const;
    QString fontFamily() const;
    int fontWeight() const;
    bool fontUnderline() const;
    bool fontItalic() const;
    QColor textColor() const;
    QFont currentFont() const;
    Qt::Alignment alignment() const;
    void mergeCurrentCharFormat(const QTextCharFormat &modifier);
    void setCurrentCharFormat(const QTextCharFormat &format);
    QTextCharFormat currentCharFormat() const;
    QFlags<QTextEdit::AutoFormattingFlag> autoFormatting() const;
    void setAutoFormatting(QFlags<QTextEdit::AutoFormattingFlag> features);
    bool tabChangesFocus() const;
    void setTabChangesFocus(bool b);
    void setDocumentTitle(const QString &title);
    QString documentTitle() const;
    bool isUndoRedoEnabled() const;
    void setUndoRedoEnabled(bool enable);
    QTextEdit::LineWrapMode lineWrapMode() const;
    void setLineWrapMode(QTextEdit::LineWrapMode mode);
    int lineWrapColumnOrWidth() const;
    void setLineWrapColumnOrWidth(int w);
    QTextOption::WrapMode wordWrapMode() const;
    void setWordWrapMode(QTextOption::WrapMode policy);
    bool find(const QString &exp, QFlags<QTextDocument::FindFlag> options = 0);
    QString toPlainText() const;
    QString toHtml() const;
    void append(const QString &text);
    void ensureCursorVisible();
    virtual QVariant loadResource(int type, const QUrl &name);
    QMenu *createStandardContextMenu() /Factory/;
%If (Qt_4_4_0 -)
    QMenu *createStandardContextMenu(const QPoint &position) /Factory/;
%End
    QTextCursor cursorForPosition(const QPoint &pos) const;
    QRect cursorRect(const QTextCursor &cursor) const;
    QRect cursorRect() const;
    QString anchorAt(const QPoint &pos) const;
    bool overwriteMode() const;
    void setOverwriteMode(bool overwrite);
    int tabStopWidth() const;
    void setTabStopWidth(int width);
    bool acceptRichText() const;
    void setAcceptRichText(bool accept);
%If (Qt_4_2_0 -)
    void setTextInteractionFlags(Qt::TextInteractionFlags flags);
%End
%If (Qt_4_2_0 -)
    Qt::TextInteractionFlags textInteractionFlags() const;
%End
%If (Qt_4_2_0 -)
    void setCursorWidth(int width);
%End
%If (Qt_4_2_0 -)
    int cursorWidth() const;
%End
%If (Qt_4_2_0 -)
    void setExtraSelections(const QList<QTextEdit::ExtraSelection> &selections);
%End
%If (Qt_4_2_0 -)
    QList<QTextEdit::ExtraSelection> extraSelections() const;
%End
%If (Qt_4_2_0 -)
    bool canPaste() const;
%End
%If (Qt_4_2_0 -)
    void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor);
%End
%If (Qt_5_0_0 -)
    void print(QPagedPaintDevice *printer) const /PyName=print_/;
%End
%If (Qt_5_0_0 -)
%If (Py_v3)
    void print(QPagedPaintDevice *printer) const;
%End
%End
%If (Qt_4_3_0 - Qt_5_0_0)
%If (PyQt_Printer)
    void print(QPrinter *printer) const /PyName=print_/;
%End
%End
%If (Qt_4_3_0 - Qt_5_0_0)
%If (Py_v3 || PyQt_Printer)
    void print(QPrinter *printer) const;
%End
%End

public slots:
    void setFontPointSize(qreal s);
    void setFontFamily(const QString &fontFamily);
    void setFontWeight(int w);
    void setFontUnderline(bool b);
    void setFontItalic(bool b);
%If (Qt_4_2_0 -)
    void setText(const QString &text);
%End
    void setTextColor(const QColor &c);
    void setCurrentFont(const QFont &f);
    void setAlignment(Qt::Alignment a);
    void setPlainText(const QString &text);
    void setHtml(const QString &text);
    void cut();
    void copy();
    void paste();
    void clear();
    void selectAll();
    void insertPlainText(const QString &text);
    void insertHtml(const QString &text);
    void scrollToAnchor(const QString &name);
%If (Qt_4_2_0 -)
    void redo();
%End
%If (Qt_4_2_0 -)
    void undo();
%End
    void zoomIn(int range = 1);
    void zoomOut(int range = 1);

signals:
    void textChanged();
    void undoAvailable(bool b);
    void redoAvailable(bool b);
    void currentCharFormatChanged(const QTextCharFormat &format);
    void copyAvailable(bool b);
    void selectionChanged();
    void cursorPositionChanged();

protected:
    virtual bool event(QEvent *e);
    virtual void timerEvent(QTimerEvent *e);
    virtual void keyPressEvent(QKeyEvent *e);
%If (Qt_4_2_0 -)
    virtual void keyReleaseEvent(QKeyEvent *e);
%End
    virtual void resizeEvent(QResizeEvent *);
    virtual void paintEvent(QPaintEvent *e);
    virtual void mousePressEvent(QMouseEvent *e);
    virtual void mouseMoveEvent(QMouseEvent *e);
    virtual void mouseReleaseEvent(QMouseEvent *e);
    virtual void mouseDoubleClickEvent(QMouseEvent *e);
    virtual bool focusNextPrevChild(bool next);
    virtual void contextMenuEvent(QContextMenuEvent *e);
    virtual void dragEnterEvent(QDragEnterEvent *e);
    virtual void dragLeaveEvent(QDragLeaveEvent *e);
    virtual void dragMoveEvent(QDragMoveEvent *e);
    virtual void dropEvent(QDropEvent *e);
    virtual void focusInEvent(QFocusEvent *e);
    virtual void focusOutEvent(QFocusEvent *e);
    virtual void showEvent(QShowEvent *);
    virtual void changeEvent(QEvent *e);
    virtual void wheelEvent(QWheelEvent *e);
    virtual QMimeData *createMimeDataFromSelection() const /Factory/;
    virtual bool canInsertFromMimeData(const QMimeData *source) const;
    virtual void insertFromMimeData(const QMimeData *source);
    virtual void inputMethodEvent(QInputMethodEvent *);

public:
%If (Qt_5_0_0 -)
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery property) const;
%End

protected:
%If (- Qt_5_0_0)
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery property) const;
%End
    virtual void scrollContentsBy(int dx, int dy);

public:
%If (Qt_4_4_0 -)
    QColor textBackgroundColor() const;
%End

public slots:
%If (Qt_4_4_0 -)
    void setTextBackgroundColor(const QColor &c);
%End

private:
    QTextEdit(const QTextEdit &);
};

%If (Qt_4_2_0 -)
QFlags<QTextEdit::AutoFormattingFlag> operator|(QTextEdit::AutoFormattingFlag f1, QFlags<QTextEdit::AutoFormattingFlag> f2);
%End
