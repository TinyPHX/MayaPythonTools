// qnetworksession.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QNetworkSession : QObject
{
%TypeHeaderCode
#include <qnetworksession.h>
%End

public:
    enum State
    {
        Invalid,
        NotAvailable,
        Connecting,
        Connected,
        Closing,
        Disconnected,
        Roaming,
    };

    enum SessionError
    {
        UnknownSessionError,
        SessionAbortedError,
        RoamingError,
        OperationNotSupportedError,
        InvalidConfigurationError,
    };

    QNetworkSession(const QNetworkConfiguration &connConfig, QObject *parent /TransferThis/ = 0);
    virtual ~QNetworkSession();
    bool isOpen() const;
    QNetworkConfiguration configuration() const;
    QNetworkInterface interface() const;
    QNetworkSession::State state() const;
    QNetworkSession::SessionError error() const;
    QString errorString() const;
    QVariant sessionProperty(const QString &key) const;
    void setSessionProperty(const QString &key, const QVariant &value);
    quint64 bytesWritten() const;
    quint64 bytesReceived() const;
    quint64 activeTime() const;
    bool waitForOpened(int msecs = 30000) /ReleaseGIL/;

public slots:
    void open();
    void close();
    void stop();
    void migrate();
    void ignore();
    void accept();
    void reject();

signals:
    void stateChanged(QNetworkSession::State);
    void opened();
    void closed();
    void error(QNetworkSession::SessionError);
    void preferredConfigurationChanged(const QNetworkConfiguration &config, bool isSeamless);
    void newConfigurationActivated();

protected:
%If (Qt_5_0_0 -)
    virtual void connectNotify(const QMetaMethod &signal);
%End
%If (- Qt_5_0_0)
    virtual void connectNotify(SIP_SIGNAL signal);
%End
%If (Qt_5_0_0 -)
    virtual void disconnectNotify(const QMetaMethod &signal);
%End
%If (- Qt_5_0_0)
    virtual void disconnectNotify(SIP_SIGNAL signal);
%End

public:
%If (Qt_5_0_0 -)

    enum UsagePolicy
    {
        NoPolicy,
        NoBackgroundTrafficPolicy,
    };

%End
%If (Qt_5_0_0 -)
    typedef QFlags<QNetworkSession::UsagePolicy> UsagePolicies;
%End
%If (Qt_5_0_0 -)
    QFlags<QNetworkSession::UsagePolicy> usagePolicies() const;
%End

signals:
%If (Qt_5_0_0 -)
    void usagePoliciesChanged(QFlags<QNetworkSession::UsagePolicy>);
%End

private:
%If (Qt_5_0_0 -)
    QNetworkSession(const QNetworkSession &);
%End
};

%End
