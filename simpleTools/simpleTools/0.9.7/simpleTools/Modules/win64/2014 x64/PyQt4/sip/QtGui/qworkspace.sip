// qworkspace.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (- Qt_5_0_0)

class QWorkspace : QWidget
{
%TypeHeaderCode
#include <qworkspace.h>
%End

public:
    explicit QWorkspace(QWidget *parent /TransferThis/ = 0);
    virtual ~QWorkspace();

    enum WindowOrder
    {
        CreationOrder,
        StackingOrder,
    };

    QWidget *activeWindow() const;
    QWidgetList windowList(QWorkspace::WindowOrder order = QWorkspace::CreationOrder) const;
%If (Qt_4_2_0 -)
    QWidget *addWindow(QWidget *w /Transfer/, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QWidget *addWindow(QWidget *w /Transfer/, Qt::WFlags flags = 0);
%End
    virtual QSize sizeHint() const;
    bool scrollBarsEnabled() const;
    void setScrollBarsEnabled(bool enable);
    void setBackground(const QBrush &background);
    QBrush background() const;

signals:
    void windowActivated(QWidget *w);

public slots:
    void setActiveWindow(QWidget *w);
    void cascade();
    void tile();
    void arrangeIcons();
    void closeActiveWindow();
    void closeAllWindows();
    void activateNextWindow();
    void activatePreviousWindow();

protected:
    virtual bool event(QEvent *e);
    virtual void paintEvent(QPaintEvent *e);
    virtual void changeEvent(QEvent *);
    virtual void childEvent(QChildEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual bool eventFilter(QObject *, QEvent *);
    virtual void showEvent(QShowEvent *e);
    virtual void hideEvent(QHideEvent *e);
    virtual void wheelEvent(QWheelEvent *e);

private:
    QWorkspace(const QWorkspace &);
};

%End
