// qwidget.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qwidget.h>
%End

class QWidget : QObject, QPaintDevice
{
%TypeHeaderCode
#include <qwidget.h>
%End

%TypeCode
// Transfer ownership of all widgets in a layout to their new parent.
static void qtgui_TransferLayoutWidgets(QLayout *lay, PyObject *pw)
{
    int n = lay->count();

    for (int i = 0; i < n; ++i)
    {
        QLayoutItem *item = lay->itemAt(i);
        QWidget *w = item->widget();

        if (w)
        {
            PyObject *obj = sipGetPyObject(w, sipType_QWidget);

            if (obj)
                sipTransferTo(obj, pw);
        }
        else
        {
            QLayout *l = item->layout();

            if (l)
                qtgui_TransferLayoutWidgets(l, pw);
        }
    }
}
%End

public:
%If (Qt_4_2_0 -)
    QWidget(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QWidget(QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
%End
    virtual ~QWidget();
    virtual int devType() const;
    QStyle *style() const;
    void setStyle(QStyle * /KeepReference/);
%If (Qt_5_0_0 -)
    bool isEnabledTo(const QWidget *) const;
%End
%If (- Qt_5_0_0)
    bool isEnabledTo(QWidget *) const;
%End

public slots:
    void setEnabled(bool);
    void setDisabled(bool);
    void setWindowModified(bool);

public:
    QRect frameGeometry() const;
    QRect normalGeometry() const;
    int x() const;
    int y() const;
    QPoint pos() const;
    QSize frameSize() const;
    QRect childrenRect() const;
    QRegion childrenRegion() const;
    QSize minimumSize() const;
    QSize maximumSize() const;
    void setMinimumSize(int minw, int minh);
    void setMaximumSize(int maxw, int maxh);
    void setMinimumWidth(int minw);
    void setMinimumHeight(int minh);
    void setMaximumWidth(int maxw);
    void setMaximumHeight(int maxh);
    QSize sizeIncrement() const;
    void setSizeIncrement(int w, int h);
    QSize baseSize() const;
    void setBaseSize(int basew, int baseh);
    void setFixedSize(const QSize &);
    void setFixedSize(int w, int h);
    void setFixedWidth(int w);
    void setFixedHeight(int h);
    QPoint mapToGlobal(const QPoint &) const;
    QPoint mapFromGlobal(const QPoint &) const;
    QPoint mapToParent(const QPoint &) const;
    QPoint mapFromParent(const QPoint &) const;
%If (Qt_5_0_0 -)
    QPoint mapTo(const QWidget *, const QPoint &) const;
%End
%If (- Qt_5_0_0)
    QPoint mapTo(QWidget *, const QPoint &) const;
%End
%If (Qt_5_0_0 -)
    QPoint mapFrom(const QWidget *, const QPoint &) const;
%End
%If (- Qt_5_0_0)
    QPoint mapFrom(QWidget *, const QPoint &) const;
%End
    QWidget *window() const;
    QWidget *topLevelWidget() const;
    const QPalette &palette() const;
    void setPalette(const QPalette &);
    void setBackgroundRole(QPalette::ColorRole);
    QPalette::ColorRole backgroundRole() const;
    void setForegroundRole(QPalette::ColorRole);
    QPalette::ColorRole foregroundRole() const;
    void setFont(const QFont &);
    QCursor cursor() const;
    void setCursor(const QCursor &);
    void unsetCursor();
    void setMask(const QBitmap &);
    void setMask(const QRegion &);
    QRegion mask() const;
    void clearMask();
    void setWindowTitle(const QString &);
    QString windowTitle() const;
    void setWindowIcon(const QIcon &icon);
    QIcon windowIcon() const;
    void setWindowIconText(const QString &);
    QString windowIconText() const;
    void setWindowRole(const QString &);
    QString windowRole() const;
    void setWindowOpacity(qreal level);
    qreal windowOpacity() const;
    bool isWindowModified() const;
%If (PyQt_ToolTip)
    void setToolTip(const QString &);
%End
%If (PyQt_ToolTip)
    QString toolTip() const;
%End
%If (PyQt_StatusTip)
    void setStatusTip(const QString &);
%End
%If (PyQt_StatusTip)
    QString statusTip() const;
%End
%If (PyQt_WhatsThis)
    void setWhatsThis(const QString &);
%End
%If (PyQt_WhatsThis)
    QString whatsThis() const;
%End
%If (PyQt_Accessibility)
    QString accessibleName() const;
%End
%If (PyQt_Accessibility)
    void setAccessibleName(const QString &name);
%End
%If (PyQt_Accessibility)
    QString accessibleDescription() const;
%End
%If (PyQt_Accessibility)
    void setAccessibleDescription(const QString &description);
%End
    void setLayoutDirection(Qt::LayoutDirection direction);
    Qt::LayoutDirection layoutDirection() const;
    void unsetLayoutDirection();
    bool isRightToLeft() const;
    bool isLeftToRight() const;

public slots:
    void setFocus();

public:
    bool isActiveWindow() const;
    void activateWindow();
    void clearFocus();
    void setFocus(Qt::FocusReason reason);
    Qt::FocusPolicy focusPolicy() const;
    void setFocusPolicy(Qt::FocusPolicy policy);
    bool hasFocus() const;
    static void setTabOrder(QWidget *, QWidget *);
    void setFocusProxy(QWidget * /KeepReference/);
    QWidget *focusProxy() const;
    Qt::ContextMenuPolicy contextMenuPolicy() const;
    void setContextMenuPolicy(Qt::ContextMenuPolicy policy);
    void grabMouse();
    void grabMouse(const QCursor &);
    void releaseMouse();
    void grabKeyboard();
    void releaseKeyboard();
    int grabShortcut(const QKeySequence &key, Qt::ShortcutContext context = Qt::WindowShortcut);
    void releaseShortcut(int id);
    void setShortcutEnabled(int id, bool enabled = true);
    static QWidget *mouseGrabber();
    static QWidget *keyboardGrabber();
    void setUpdatesEnabled(bool enable);

public slots:
    void update();
    void repaint();

public:
    void update(const QRect &);
    void update(const QRegion &);
    void repaint(int x, int y, int w, int h);
    void repaint(const QRect &);
    void repaint(const QRegion &);

public slots:
    virtual void setVisible(bool visible);
    void setHidden(bool hidden);
    void show();
    void hide();
%If (- Qt_5_0_0)
    void setShown(bool shown);
%End
    void showMinimized();
    void showMaximized();
    void showFullScreen();
    void showNormal();
    bool close();
    void raise() /PyName=raise_/;
    void lower();

public:
    void stackUnder(QWidget *);
    void move(const QPoint &);
    void resize(const QSize &);
    void setGeometry(const QRect &);
    void adjustSize();
%If (Qt_5_0_0 -)
    bool isVisibleTo(const QWidget *) const;
%End
%If (- Qt_5_0_0)
    bool isVisibleTo(QWidget *) const;
%End
    bool isMinimized() const;
    bool isMaximized() const;
    bool isFullScreen() const;
    Qt::WindowStates windowState() const;
    void setWindowState(Qt::WindowStates state);
    void overrideWindowState(Qt::WindowStates state);
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    QSizePolicy sizePolicy() const;
    void setSizePolicy(QSizePolicy);
    virtual int heightForWidth(int) const;
    QRegion visibleRegion() const;
    void setContentsMargins(int left, int top, int right, int bottom);
    void getContentsMargins(int *left, int *top, int *right, int *bottom) const;
    QRect contentsRect() const;
    QLayout *layout() const;
    void setLayout(QLayout * /Transfer/);
%MethodCode
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setLayout(a0);
        Py_END_ALLOW_THREADS
        
        // Internally Qt has reparented all of the widgets in the layout, so we need
        // to update the ownership hierachy.
        qtgui_TransferLayoutWidgets(a0, sipSelf);
%End

    void updateGeometry();
    void setParent(QWidget *parent /TransferThis/);
%If (Qt_4_2_0 -)
    void setParent(QWidget *parent /TransferThis/, Qt::WindowFlags f);
%End
%If (- Qt_4_2_0)
    void setParent(QWidget *parent /TransferThis/, Qt::WFlags f);
%End
    void scroll(int dx, int dy);
    void scroll(int dx, int dy, const QRect &);
    QWidget *focusWidget() const;
    QWidget *nextInFocusChain() const;
    bool acceptDrops() const;
    void setAcceptDrops(bool on);
    void addAction(QAction *action);
    void addActions(QList<QAction*> actions);
    void insertAction(QAction *before, QAction *action);
    void insertActions(QAction *before, QList<QAction*> actions);
    void removeAction(QAction *action);
    QList<QAction*> actions() const;
    void setWindowFlags(Qt::WindowFlags type);
    void overrideWindowFlags(Qt::WindowFlags type);
    static QWidget *find(WId);
    QWidget *childAt(const QPoint &p) const;
%If (- Qt_5_0_0)
%If (WS_X11)
    const QX11Info &x11Info() const;
%End
%End
%If (- Qt_5_0_0)
%If (WS_X11)
    Qt::HANDLE x11PictureHandle() const;
%End
%End
%If (- Qt_5_0_0)
%If (WS_X11 || WS_MACX)
    Qt::HANDLE handle() const;
%End
%End
    void setAttribute(Qt::WidgetAttribute attribute, bool on = true);
    virtual QPaintEngine *paintEngine() const;
    void ensurePolished() const;
%If (- Qt_5_0_0)
    QInputContext *inputContext();
%End
%If (- Qt_5_0_0)
    void setInputContext(QInputContext * /Transfer/);
%End
    bool isAncestorOf(const QWidget *child) const;

signals:
    void customContextMenuRequested(const QPoint &pos);

protected:
    virtual bool event(QEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void mouseDoubleClickEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void wheelEvent(QWheelEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void keyReleaseEvent(QKeyEvent *);
    virtual void focusInEvent(QFocusEvent *);
    virtual void focusOutEvent(QFocusEvent *);
    virtual void enterEvent(QEvent *);
    virtual void leaveEvent(QEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void moveEvent(QMoveEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void closeEvent(QCloseEvent *);
    virtual void contextMenuEvent(QContextMenuEvent *);
    virtual void tabletEvent(QTabletEvent *);
    virtual void actionEvent(QActionEvent *);
    virtual void dragEnterEvent(QDragEnterEvent *);
    virtual void dragMoveEvent(QDragMoveEvent *);
    virtual void dragLeaveEvent(QDragLeaveEvent *);
    virtual void dropEvent(QDropEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void hideEvent(QHideEvent *);
%If (- Qt_5_0_0)
%If (WS_WIN)
    virtual bool winEvent(MSG *message, long *result);
%End
%End
    virtual void changeEvent(QEvent *);
    virtual int metric(QPaintDevice::PaintDeviceMetric) const;
    virtual void inputMethodEvent(QInputMethodEvent *);

public:
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery) const;

protected:
%If (- Qt_5_0_0)
    void resetInputContext();
%End
    void updateMicroFocus();
    void create(WId window = 0, bool initializeWindow = true, bool destroyOldWindow = true);
    void destroy(bool destroyWindow = true, bool destroySubWindows = true);
    virtual bool focusNextPrevChild(bool next);
    bool focusNextChild();
    bool focusPreviousChild();
%If (- Qt_5_0_0)
    virtual void enabledChange(bool);
%End
%If (- Qt_5_0_0)
    virtual void paletteChange(const QPalette &);
%End
%If (- Qt_5_0_0)
    virtual void fontChange(const QFont &);
%End
%If (- Qt_5_0_0)
    virtual void windowActivationChange(bool);
%End
%If (- Qt_5_0_0)
    virtual void languageChange();
%End

public:
    QWidget *childAt(int ax, int ay) const;
    Qt::WindowType windowType() const;
    Qt::WindowFlags windowFlags() const;
    WId winId() const;
    bool isTopLevel() const;
    bool isWindow() const;
    bool isEnabled() const;
    bool isModal() const;
    bool isEnabledToTLW() const;
    int minimumWidth() const;
    int minimumHeight() const;
    int maximumWidth() const;
    int maximumHeight() const;
    void setMinimumSize(const QSize &s);
    void setMaximumSize(const QSize &s);
    void setSizeIncrement(const QSize &s);
    void setBaseSize(const QSize &s);
    const QFont &font() const;
    QFontMetrics fontMetrics() const;
    QFontInfo fontInfo() const;
    void setMouseTracking(bool enable);
    bool hasMouseTracking() const;
    bool underMouse() const;
    bool updatesEnabled() const;
    void update(int ax, int ay, int aw, int ah);
    bool isVisible() const;
    bool isHidden() const;
    void move(int ax, int ay);
    void resize(int w, int h);
    void setGeometry(int ax, int ay, int aw, int ah);
    QRect rect() const;
    const QRect &geometry() const;
    QSize size() const;
    int width() const;
    int height() const;
    QWidget *parentWidget() const;
    void setSizePolicy(QSizePolicy::Policy hor, QSizePolicy::Policy ver);
    bool testAttribute(Qt::WidgetAttribute attribute) const;
    Qt::WindowModality windowModality() const;
    void setWindowModality(Qt::WindowModality windowModality);
    bool autoFillBackground() const;
    void setAutoFillBackground(bool enabled);
%If (Qt_4_2_0 -)
    void setStyleSheet(const QString &styleSheet);
%End
%If (Qt_4_2_0 -)
    QString styleSheet() const;
%End
%If (Qt_4_2_0 -)
    void setShortcutAutoRepeat(int id, bool enabled = true);
%End
%If (Qt_4_2_0 -)
    QByteArray saveGeometry() const;
%End
%If (Qt_4_2_0 -)
    bool restoreGeometry(const QByteArray &geometry);
%End
%If (Qt_4_3_0 -)

    enum RenderFlag
    {
        DrawWindowBackground,
        DrawChildren,
        IgnoreMask,
    };

%End
%If (Qt_4_3_0 -)
    typedef QFlags<QWidget::RenderFlag> RenderFlags;
%End
%If (Qt_4_4_0 -)
    void render(QPaintDevice *target, const QPoint &targetOffset = QPoint(), const QRegion &sourceRegion = QRegion(), QFlags<QWidget::RenderFlag> flags = QWidget::DrawWindowBackground|QWidget::DrawChildren);
%End
%If (Qt_4_4_0 -)
    void render(QPainter *painter, const QPoint &targetOffset = QPoint(), const QRegion &sourceRegion = QRegion(), QFlags<QWidget::RenderFlag> flags = QWidget::DrawWindowBackground|QWidget::DrawChildren);
%End
%If (Qt_4_3_0 -)
    void setLocale(const QLocale &locale);
%End
%If (Qt_4_3_0 -)
    QLocale locale() const;
%End
%If (Qt_4_3_0 -)
    void unsetLocale();
%End
%If (Qt_4_4_0 -)
    WId effectiveWinId() const;
%End
%If (Qt_4_4_0 -)
    QWidget *nativeParentWidget() const;
%End
%If (Qt_4_4_0 -)
    void setWindowFilePath(const QString &filePath);
%End
%If (Qt_4_4_0 -)
    QString windowFilePath() const;
%End
%If (Qt_4_5_0 -)
    QGraphicsProxyWidget *graphicsProxyWidget() const;
%End
%If (Qt_4_6_0 -)
    QGraphicsEffect *graphicsEffect() const;
%End
%If (Qt_4_6_0 -)
    void setGraphicsEffect(QGraphicsEffect *effect /Transfer/);
%End
%If (Qt_4_6_0 -)
    void grabGesture(Qt::GestureType type, Qt::GestureFlags flags = Qt::GestureFlags(0));
%End
%If (Qt_4_6_0 -)
    void ungrabGesture(Qt::GestureType type);
%End
%If (Qt_4_6_0 -)
    void setContentsMargins(const QMargins &margins);
%End
%If (Qt_4_6_0 -)
    QMargins contentsMargins() const;
%End
%If (Qt_4_6_0 -)
    QWidget *previousInFocusChain() const;
%End
%If (Qt_4_6_0 -)
    Qt::InputMethodHints inputMethodHints() const;
%End
%If (Qt_4_6_0 -)
    void setInputMethodHints(Qt::InputMethodHints hints);
%End
%If (Qt_5_0_0 -)
    virtual bool hasHeightForWidth() const;
%End
%If (Qt_5_0_0 -)
    QPixmap grab(const QRect &rectangle = QRect(QPoint(0, 0), QSize(-1, -1)));
%End

protected:
%If (Qt_5_0_0 -)
    virtual bool nativeEvent(const QByteArray &eventType, void *message, long *result);
%End
%If (Qt_5_0_0 -)
    virtual QPaintDevice *redirected(QPoint *offset) const;
%End
%If (Qt_5_0_0 -)
    virtual QPainter *sharedPainter() const;
%End
%If (Qt_5_0_0 -)
    virtual void initPainter(QPainter *painter) const;
%End

private:
    QWidget(const QWidget &);
};

%If (Qt_4_3_0 -)
QFlags<QWidget::RenderFlag> operator|(QWidget::RenderFlag f1, QFlags<QWidget::RenderFlag> f2);
%End
