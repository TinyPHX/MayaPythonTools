// qgraphicssvgitem.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtSvg Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_2_0 - Qt_4_6_0)

class QGraphicsSvgItem : QObject, QGraphicsItem
{
%TypeHeaderCode
#include <qgraphicssvgitem.h>
%End

%ConvertToSubClassCode
    if (sipCpp->type() == 13)
    {
        // We need to explicitly cast because of the multiple inheritance.
        *sipCppRet = static_cast<QGraphicsSvgItem *>(sipCpp);
        sipType = sipType_QGraphicsSvgItem;
    }
    else
        sipType = 0;
%End

public:
    QGraphicsSvgItem(QGraphicsItem *parent /TransferThis/ = 0);
    QGraphicsSvgItem(const QString &fileName, QGraphicsItem *parent /TransferThis/ = 0);
    void setSharedRenderer(QSvgRenderer *renderer /KeepReference/);
    QSvgRenderer *renderer() const;
    void setElementId(const QString &id);
    QString elementId() const;
    void setCachingEnabled(bool);
    bool isCachingEnabled() const;
    void setMaximumCacheSize(const QSize &size);
    QSize maximumCacheSize() const;
    virtual QRectF boundingRect() const;
    virtual void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);
    virtual int type() const;

private:
    QGraphicsSvgItem(const QGraphicsSvgItem &);
};

%End
%If (Qt_4_6_0 -)

class QGraphicsSvgItem : QGraphicsObject
{
%TypeHeaderCode
#include <qgraphicssvgitem.h>
%End

%ConvertToSubClassCode
    if (sipCpp->type() == 13)
    {
        // We need to explicitly cast because of the multiple inheritance.
        *sipCppRet = static_cast<QGraphicsSvgItem *>(sipCpp);
        sipType = sipType_QGraphicsSvgItem;
    }
    else
        sipType = 0;
%End

public:
    QGraphicsSvgItem(QGraphicsItem *parent /TransferThis/ = 0);
    QGraphicsSvgItem(const QString &fileName, QGraphicsItem *parent /TransferThis/ = 0);
    void setSharedRenderer(QSvgRenderer *renderer /KeepReference/);
    QSvgRenderer *renderer() const;
    void setElementId(const QString &id);
    QString elementId() const;
    void setCachingEnabled(bool);
    bool isCachingEnabled() const;
    void setMaximumCacheSize(const QSize &size);
    QSize maximumCacheSize() const;
    virtual QRectF boundingRect() const;
    virtual void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget = 0);
    virtual int type() const;

private:
    QGraphicsSvgItem(const QGraphicsSvgItem &);
};

%End

%ModuleHeaderCode
#include <qglobal.h>

#if QT_VERSION >= 0x040200

// This is needed by the %ConvertToSubClassCode.
#include <qgraphicssvgitem.h>

#endif
%End
