// qsignaltransition.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QSignalTransition : QAbstractTransition
{
%TypeHeaderCode
#include <qsignaltransition.h>
%End

public:
    QSignalTransition(QState *sourceState /KeepReference/ = 0);
%If (Qt_5_0_0 -)
    QSignalTransition(const QObject *sender, SIP_SIGNAL signal, QState *sourceState /KeepReference/ = 0);
%End
%If (- Qt_5_0_0)
    QSignalTransition(QObject *sender, SIP_SIGNAL signal, QState *sourceState /KeepReference/ = 0);
%End
    QSignalTransition(SIP_PYOBJECT signal /DocType="signal"/, QState *sourceState /KeepReference/ = 0) /NoDerived/;
%MethodCode
        QObject *sender;
        const char *signal = qpycore_pyqtsignal_get_parts(a0, &sender);
        
        if (signal)
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipQSignalTransition(sender, signal, a1);
            Py_END_ALLOW_THREADS
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
%End

    virtual ~QSignalTransition();
    QObject *senderObject() const;
%If (Qt_5_0_0 -)
    void setSenderObject(const QObject *sender /KeepReference/);
%End
%If (- Qt_5_0_0)
    void setSenderObject(QObject *sender /KeepReference/);
%End
    QByteArray signal() const;
    void setSignal(const QByteArray &signal);

protected:
    virtual bool eventTest(QEvent *event);
    virtual void onTransition(QEvent *event);
    virtual bool event(QEvent *e);

private:
    QSignalTransition(const QSignalTransition &);
};

%End
