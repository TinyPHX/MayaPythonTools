// qdesktopservices.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_2_0 -)

class QDesktopServices
{
%TypeHeaderCode
#include <qdesktopservices.h>
%End

public:
%If (Qt_4_4_0 -)
%If (PyQt_Deprecated_5_0)

    enum StandardLocation
    {
        DesktopLocation,
        DocumentsLocation,
        FontsLocation,
        ApplicationsLocation,
        MusicLocation,
        MoviesLocation,
        PicturesLocation,
        TempLocation,
        HomeLocation,
        DataLocation,
%If (Qt_4_5_0 -)
        CacheLocation,
%End
    };

%End
%End
    static bool openUrl(const QUrl &url) /ReleaseGIL/;
    static void setUrlHandler(const QString &scheme, QObject *receiver, const char *method);
    static void setUrlHandler(const QString &scheme, SIP_PYCALLABLE method);
%MethodCode
        // Allow a callable that must be a slot of a QObject, although we never tell
        // the user if it isn't.
        if (PyMethod_Check(a1))
        {
            PyObject *self = PyMethod_GET_SELF(a1);
            PyObject *func = PyMethod_GET_FUNCTION(a1);
        
            int iserr = 0;
            QObject *receiver = reinterpret_cast<QObject *>(sipForceConvertToType(
                    self, sipType_QObject, NULL, SIP_NOT_NONE, NULL, &iserr));
        
            if (!iserr && PyFunction_Check(func))
            {
                PyObject *ascii_obj = ((PyFunctionObject *)func)->func_name;
                const char *ascii = sipString_AsASCIIString(&ascii_obj);
        
                if (ascii)
                {
                    QDesktopServices::setUrlHandler(*a0, receiver, ascii);
        
                    Py_DECREF(ascii_obj);
                }
            }
        }
%End

    static void unsetUrlHandler(const QString &scheme);
%If (Qt_4_4_0 -)
%If (PyQt_Deprecated_5_0)
    static QString storageLocation(QDesktopServices::StandardLocation type);
%End
%End
%If (Qt_4_4_0 -)
%If (PyQt_Deprecated_5_0)
    static QString displayName(QDesktopServices::StandardLocation type);
%End
%End
};

%End
