// qtimer.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTimer : QObject
{
%TypeHeaderCode
#include <qtimer.h>
%End

public:
    explicit QTimer(QObject *parent /TransferThis/ = 0);
    virtual ~QTimer();
    bool isActive() const;
    int timerId() const;
    void setInterval(int msec);
    int interval() const;
    bool isSingleShot() const;
    void setSingleShot(bool asingleShot);
    static void singleShot(int msec, SIP_RXOBJ_CON receiver /SingleShot/, SIP_SLOT_CON() member) [void (int msec, QObject *receiver, const char *member)];

public slots:
    void start(int msec);
    void start();
    void stop();

signals:
    void timeout();

protected:
    virtual void timerEvent(QTimerEvent *);

public:
%If (Qt_5_0_0 -)
    void setTimerType(Qt::TimerType atype);
%End
%If (Qt_5_0_0 -)
    Qt::TimerType timerType() const;
%End
%If (Qt_5_0_0 -)
    int remainingTime() const;
%End

private:
    QTimer(const QTimer &);
};
