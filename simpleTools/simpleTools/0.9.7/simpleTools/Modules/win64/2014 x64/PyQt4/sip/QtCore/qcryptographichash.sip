// qcryptographichash.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_3_0 -)

class QCryptographicHash
{
%TypeHeaderCode
#include <qcryptographichash.h>
%End

public:
    enum Algorithm
    {
        Md4,
        Md5,
        Sha1,
%If (Qt_5_0_0 -)
        Sha224,
%End
%If (Qt_5_0_0 -)
        Sha256,
%End
%If (Qt_5_0_0 -)
        Sha384,
%End
%If (Qt_5_0_0 -)
        Sha512,
%End
    };

%If (Qt_5_0_0 -)
    explicit QCryptographicHash(QCryptographicHash::Algorithm method);
%End
%If (- Qt_5_0_0)
    QCryptographicHash(QCryptographicHash::Algorithm method);
%End
    ~QCryptographicHash();
    void reset();
    void addData(const char *data /Array/, int length /ArraySize/);
    void addData(const QByteArray &data);
%If (Qt_5_0_0 -)
    bool addData(QIODevice *device);
%End
    QByteArray result() const;
    static QByteArray hash(const QByteArray &data, QCryptographicHash::Algorithm method);

private:
    QCryptographicHash(const QCryptographicHash &);
};

%End
