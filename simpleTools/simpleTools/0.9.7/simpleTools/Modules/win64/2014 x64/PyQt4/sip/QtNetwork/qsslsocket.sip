// qsslsocket.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_3_0 -)
%If (PyQt_OpenSSL)

class QSslSocket : QTcpSocket
{
%TypeHeaderCode
#include <qsslsocket.h>
%End

public:
    enum SslMode
    {
        UnencryptedMode,
        SslClientMode,
        SslServerMode,
    };

%If (Qt_5_0_0 -)
    explicit QSslSocket(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QSslSocket(QObject *parent /TransferThis/ = 0);
%End
    virtual ~QSslSocket();
%If (Qt_5_0_0 -)
    void connectToHostEncrypted(const QString &hostName, quint16 port, QFlags<QIODevice::OpenModeFlag> mode = QIODevice::ReadWrite, QAbstractSocket::NetworkLayerProtocol protocol = QAbstractSocket::AnyIPProtocol) /ReleaseGIL/;
%End
%If (- Qt_5_0_0)
    void connectToHostEncrypted(const QString &hostName, quint16 port, QFlags<QIODevice::OpenModeFlag> mode = QIODevice::ReadWrite) /ReleaseGIL/;
%End
%If (Qt_5_0_0 -)
    void connectToHostEncrypted(const QString &hostName, quint16 port, const QString &sslPeerName, QFlags<QIODevice::OpenModeFlag> mode = QIODevice::ReadWrite, QAbstractSocket::NetworkLayerProtocol protocol = QAbstractSocket::AnyIPProtocol) /ReleaseGIL/;
%End
%If (Qt_4_6_0 - Qt_5_0_0)
    void connectToHostEncrypted(const QString &hostName, quint16 port, const QString &sslPeerName, QFlags<QIODevice::OpenModeFlag> mode = QIODevice::ReadWrite) /ReleaseGIL/;
%End
%If (Qt_5_0_0 -)
    virtual bool setSocketDescriptor(qintptr socketDescriptor, QAbstractSocket::SocketState state = QAbstractSocket::ConnectedState, QFlags<QIODevice::OpenModeFlag> mode = QIODevice::ReadWrite);
%End
%If (- Qt_5_0_0)
    bool setSocketDescriptor(int socketDescriptor, QAbstractSocket::SocketState state = QAbstractSocket::ConnectedState, QIODevice::OpenMode mode = QIODevice::ReadWrite);
%End
    QSslSocket::SslMode mode() const;
    bool isEncrypted() const;
    QSsl::SslProtocol protocol() const;
    void setProtocol(QSsl::SslProtocol protocol);
    virtual qint64 bytesAvailable() const;
    virtual qint64 bytesToWrite() const;
    virtual bool canReadLine() const;
    virtual void close();
    virtual bool atEnd() const;
    bool flush();
    void abort();
    void setLocalCertificate(const QSslCertificate &certificate);
    void setLocalCertificate(const QString &path, QSsl::EncodingFormat format = QSsl::Pem);
    QSslCertificate localCertificate() const;
    QSslCertificate peerCertificate() const;
    QList<QSslCertificate> peerCertificateChain() const;
    QSslCipher sessionCipher() const;
    void setPrivateKey(const QSslKey &key);
    void setPrivateKey(const QString &fileName, QSsl::KeyAlgorithm algorithm = QSsl::Rsa, QSsl::EncodingFormat format = QSsl::Pem, const QByteArray &passPhrase = QByteArray());
    QSslKey privateKey() const;
    QList<QSslCipher> ciphers() const;
    void setCiphers(const QList<QSslCipher> &ciphers);
    void setCiphers(const QString &ciphers);
    static void setDefaultCiphers(const QList<QSslCipher> &ciphers);
    static QList<QSslCipher> defaultCiphers();
    static QList<QSslCipher> supportedCiphers();
    bool addCaCertificates(const QString &path, QSsl::EncodingFormat format = QSsl::Pem, QRegExp::PatternSyntax syntax = QRegExp::FixedString);
    void addCaCertificate(const QSslCertificate &certificate);
    void addCaCertificates(const QList<QSslCertificate> &certificates);
    void setCaCertificates(const QList<QSslCertificate> &certificates);
    QList<QSslCertificate> caCertificates() const;
    static bool addDefaultCaCertificates(const QString &path, QSsl::EncodingFormat format = QSsl::Pem, QRegExp::PatternSyntax syntax = QRegExp::FixedString);
    static void addDefaultCaCertificate(const QSslCertificate &certificate);
    static void addDefaultCaCertificates(const QList<QSslCertificate> &certificates);
    static void setDefaultCaCertificates(const QList<QSslCertificate> &certificates);
    static QList<QSslCertificate> defaultCaCertificates();
    static QList<QSslCertificate> systemCaCertificates();
%If (Qt_5_0_0 -)
    virtual bool waitForConnected(int msecs = 30000) /ReleaseGIL/;
%End
%If (- Qt_5_0_0)
    bool waitForConnected(int msecs = 30000) /ReleaseGIL/;
%End
    bool waitForEncrypted(int msecs = 30000) /ReleaseGIL/;
    virtual bool waitForReadyRead(int msecs = 30000) /ReleaseGIL/;
    virtual bool waitForBytesWritten(int msecs = 30000) /ReleaseGIL/;
%If (Qt_5_0_0 -)
    virtual bool waitForDisconnected(int msecs = 30000) /ReleaseGIL/;
%End
%If (- Qt_5_0_0)
    bool waitForDisconnected(int msecs = 30000) /ReleaseGIL/;
%End
    QList<QSslError> sslErrors() const;
    static bool supportsSsl();

public slots:
    void startClientEncryption();
    void startServerEncryption();
    void ignoreSslErrors();

signals:
    void encrypted();
    void sslErrors(const QList<QSslError> &errors);
    void modeChanged(QSslSocket::SslMode newMode);

protected slots:
%If (- Qt_5_0_0)
    void connectToHostImplementation(const QString &hostName, quint16 port, QFlags<QIODevice::OpenModeFlag> openMode);
%End
%If (- Qt_5_0_0)
    void disconnectFromHostImplementation();
%End

protected:
    virtual SIP_PYOBJECT readData(qint64 maxlen) /DocType="Py_v3:bytes;str",ReleaseGIL/ [qint64 (char *data, qint64 maxlen)];
%MethodCode
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            len = sipSelfWasArg ? sipCpp->QSslSocket::readData(s, a0) : sipCpp->readData(s, a0);
        #else
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
        #endif
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
%End

    virtual qint64 writeData(const char *data /Array/, qint64 len /ArraySize/) /ReleaseGIL/;

public:
%If (Qt_4_4_0 -)

    enum PeerVerifyMode
    {
        VerifyNone,
        QueryPeer,
        VerifyPeer,
        AutoVerifyPeer,
    };

%End
%If (Qt_4_4_0 -)
    QSslSocket::PeerVerifyMode peerVerifyMode() const;
%End
%If (Qt_4_4_0 -)
    void setPeerVerifyMode(QSslSocket::PeerVerifyMode mode);
%End
%If (Qt_4_4_0 -)
    int peerVerifyDepth() const;
%End
%If (Qt_4_4_0 -)
    void setPeerVerifyDepth(int depth);
%End
%If (Qt_5_0_0 -)
    virtual void setReadBufferSize(qint64 size);
%End
%If (Qt_4_4_0 - Qt_5_0_0)
    void setReadBufferSize(qint64 size);
%End
%If (Qt_4_4_0 -)
    qint64 encryptedBytesAvailable() const;
%End
%If (Qt_4_4_0 -)
    qint64 encryptedBytesToWrite() const;
%End
%If (Qt_4_4_0 -)
    QSslConfiguration sslConfiguration() const;
%End
%If (Qt_4_4_0 -)
    void setSslConfiguration(const QSslConfiguration &config);
%End

signals:
%If (Qt_4_4_0 -)
    void peerVerifyError(const QSslError &error);
%End
%If (Qt_4_4_0 -)
    void encryptedBytesWritten(qint64 totalBytes);
%End

public:
%If (Qt_5_0_0 -)
    virtual void setSocketOption(QAbstractSocket::SocketOption option, const QVariant &value);
%End
%If (Qt_4_6_0 - Qt_5_0_0)
    void setSocketOption(QAbstractSocket::SocketOption option, const QVariant &value);
%End
%If (Qt_5_0_0 -)
    virtual QVariant socketOption(QAbstractSocket::SocketOption option);
%End
%If (Qt_4_6_0 - Qt_5_0_0)
    QVariant socketOption(QAbstractSocket::SocketOption option);
%End
%If (Qt_4_6_0 -)
    void ignoreSslErrors(const QList<QSslError> &errors);
%End
%If (Qt_4_8_0 -)
    QString peerVerifyName() const;
%End
%If (Qt_4_8_0 -)
    void setPeerVerifyName(const QString &hostName);
%End
%If (Qt_5_0_0 -)
    virtual void resume() /ReleaseGIL/;
%End
%If (Qt_5_0_0 -)
    virtual void connectToHost(const QString &hostName, quint16 port, QFlags<QIODevice::OpenModeFlag> mode = QIODevice::ReadWrite, QAbstractSocket::NetworkLayerProtocol protocol = QAbstractSocket::AnyIPProtocol) /ReleaseGIL/;
%End
%If (Qt_5_0_0 -)
    virtual void disconnectFromHost() /ReleaseGIL/;
%End
%If (Qt_5_0_0 -)
    static long sslLibraryVersionNumber();
%End
%If (Qt_5_0_0 -)
    static QString sslLibraryVersionString();
%End

private:
    QSslSocket(const QSslSocket &);
};

%End
%End
