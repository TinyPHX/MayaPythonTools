// qthreadpool.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QThreadPool : QObject
{
%TypeHeaderCode
#include <qthreadpool.h>
%End

public:
    QThreadPool(QObject *parent /TransferThis/ = 0);
    virtual ~QThreadPool();
    static QThreadPool *globalInstance();
    void start(QRunnable *runnable /GetWrapper/, int priority = 0);
%MethodCode
        // We have to handle the object ownership manually.
        if (a0->autoDelete())
            sipTransferTo(a0Wrapper, sipSelf);
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->start(a0, a1);
        Py_END_ALLOW_THREADS
%End

    bool tryStart(QRunnable *runnable /GetWrapper/);
%MethodCode
        // We have to handle the object ownership manually.
        if (a0->autoDelete())
            sipTransferTo(a0Wrapper, sipSelf);
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = sipCpp->tryStart(a0);
        Py_END_ALLOW_THREADS
%End

    int expiryTimeout() const;
    void setExpiryTimeout(int expiryTimeout);
    int maxThreadCount() const;
    void setMaxThreadCount(int maxThreadCount);
    int activeThreadCount() const;
    void reserveThread();
    void releaseThread();
%If (Qt_5_0_0 -)
    bool waitForDone(int msecs = -1) /ReleaseGIL/;
%End
%If (- Qt_5_0_0)
    void waitForDone() /ReleaseGIL/;
%End
%If (Qt_4_8_0 - Qt_5_0_0)
    bool waitForDone(int msecs) /ReleaseGIL/;
%End
};

%End
