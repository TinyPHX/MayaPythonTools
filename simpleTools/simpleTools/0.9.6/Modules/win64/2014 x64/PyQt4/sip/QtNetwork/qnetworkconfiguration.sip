// qnetworkconfiguration.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QNetworkConfiguration
{
%TypeHeaderCode
#include <qnetworkconfiguration.h>
%End

public:
    QNetworkConfiguration();
    QNetworkConfiguration(const QNetworkConfiguration &other);
    ~QNetworkConfiguration();
    bool operator==(const QNetworkConfiguration &cp) const;
    bool operator!=(const QNetworkConfiguration &cp) const;

    enum Type
    {
        InternetAccessPoint,
        ServiceNetwork,
        UserChoice,
        Invalid,
    };

    enum Purpose
    {
        UnknownPurpose,
        PublicPurpose,
        PrivatePurpose,
        ServiceSpecificPurpose,
    };

    enum StateFlag
    {
        Undefined,
        Defined,
        Discovered,
        Active,
    };

    typedef QFlags<QNetworkConfiguration::StateFlag> StateFlags;

    enum BearerType
    {
        BearerUnknown,
        BearerEthernet,
        BearerWLAN,
        Bearer2G,
        BearerCDMA2000,
        BearerWCDMA,
        BearerHSPA,
        BearerBluetooth,
        BearerWiMAX,
    };

    QFlags<QNetworkConfiguration::StateFlag> state() const;
    QNetworkConfiguration::Type type() const;
    QNetworkConfiguration::Purpose purpose() const;
%If (- Qt_5_0_0)
    QString bearerName() const;
%End
    QNetworkConfiguration::BearerType bearerType() const;
    QString bearerTypeName() const;
    QString identifier() const;
    bool isRoamingAvailable() const;
    QList<QNetworkConfiguration> children() const;
    QString name() const;
    bool isValid() const;
%If (Qt_5_0_0 -)
    void swap(QNetworkConfiguration &other);
%End
};

%End
