// qmimedata.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QMimeData : QObject
{
%TypeHeaderCode
#include <qmimedata.h>
%End

public:
    QMimeData();
    virtual ~QMimeData();
    QList<QUrl> urls() const;
    void setUrls(const QList<QUrl> &urls);
    bool hasUrls() const;
    QString text() const;
    void setText(const QString &text);
    bool hasText() const;
    QString html() const;
    void setHtml(const QString &html);
    bool hasHtml() const;
    QVariant imageData() const;
    void setImageData(const QVariant &image);
    bool hasImage() const;
    QVariant colorData() const;
    void setColorData(const QVariant &color);
    bool hasColor() const;
    QByteArray data(const QString &mimetype) const;
    void setData(const QString &mimetype, const QByteArray &data);
    virtual bool hasFormat(const QString &mimetype) const;
    virtual QStringList formats() const;
    void clear();
%If (Qt_4_4_0 -)
    void removeFormat(const QString &mimetype);
%End

protected:
    virtual QVariant retrieveData(const QString &mimetype, QVariant::Type preferredType) const;

private:
    QMimeData(const QMimeData &);
};
