// qtcpserver.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTcpServer : QObject
{
%TypeHeaderCode
#include <qtcpserver.h>
%End

public:
    explicit QTcpServer(QObject *parent /TransferThis/ = 0);
    virtual ~QTcpServer();
    bool listen(const QHostAddress &address = QHostAddress::Any, quint16 port = 0);
    void close();
    bool isListening() const;
    void setMaxPendingConnections(int numConnections);
    int maxPendingConnections() const;
    quint16 serverPort() const;
    QHostAddress serverAddress() const;
%If (Qt_5_0_0 -)
    qintptr socketDescriptor() const;
%End
%If (- Qt_5_0_0)
    int socketDescriptor() const;
%End
%If (Qt_5_0_0 -)
    bool setSocketDescriptor(qintptr socketDescriptor);
%End
%If (- Qt_5_0_0)
    bool setSocketDescriptor(int socketDescriptor);
%End
    bool waitForNewConnection(int msecs = 0, bool *timedOut = 0) /ReleaseGIL/;
    virtual bool hasPendingConnections() const;
    virtual QTcpSocket *nextPendingConnection();
    QAbstractSocket::SocketError serverError() const;
    QString errorString() const;
    void setProxy(const QNetworkProxy &networkProxy);
    QNetworkProxy proxy() const;
%If (Qt_5_0_0 -)
    void pauseAccepting();
%End
%If (Qt_5_0_0 -)
    void resumeAccepting();
%End

protected:
%If (Qt_5_0_0 -)
    virtual void incomingConnection(qintptr handle);
%End
%If (- Qt_5_0_0)
    virtual void incomingConnection(int handle);
%End
%If (Qt_4_7_0 -)
    void addPendingConnection(QTcpSocket *socket);
%End

signals:
    void newConnection();
%If (Qt_5_0_0 -)
    void acceptError(QAbstractSocket::SocketError socketError);
%End

private:
    QTcpServer(const QTcpServer &);
};
