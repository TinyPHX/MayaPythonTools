// qtextbrowser.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTextBrowser : QTextEdit
{
%TypeHeaderCode
#include <qtextbrowser.h>
%End

public:
    explicit QTextBrowser(QWidget *parent /TransferThis/ = 0);
    virtual ~QTextBrowser();
    QUrl source() const;
    QStringList searchPaths() const;
    void setSearchPaths(const QStringList &paths);
    virtual QVariant loadResource(int type, const QUrl &name);

public slots:
    virtual void setSource(const QUrl &name);
    virtual void backward();
    virtual void forward();
    virtual void home();
    virtual void reload();

signals:
    void backwardAvailable(bool);
    void forwardAvailable(bool);
    void sourceChanged(const QUrl &);
    void highlighted(const QUrl &);
    void highlighted(const QString &);
    void anchorClicked(const QUrl &);

protected:
    virtual bool event(QEvent *e);
    virtual void keyPressEvent(QKeyEvent *ev);
    virtual void mouseMoveEvent(QMouseEvent *ev);
    virtual void mousePressEvent(QMouseEvent *ev);
    virtual void mouseReleaseEvent(QMouseEvent *ev);
    virtual void focusOutEvent(QFocusEvent *ev);
    virtual bool focusNextPrevChild(bool next);
    virtual void paintEvent(QPaintEvent *e);

public:
%If (Qt_4_2_0 -)
    bool isBackwardAvailable() const;
%End
%If (Qt_4_2_0 -)
    bool isForwardAvailable() const;
%End
%If (Qt_4_2_0 -)
    void clearHistory();
%End
%If (Qt_4_2_0 -)
    bool openExternalLinks() const;
%End
%If (Qt_4_2_0 -)
    void setOpenExternalLinks(bool open);
%End
%If (Qt_4_3_0 -)
    bool openLinks() const;
%End
%If (Qt_4_3_0 -)
    void setOpenLinks(bool open);
%End
%If (Qt_4_4_0 -)
    QString historyTitle(int) const;
%End
%If (Qt_4_4_0 -)
    QUrl historyUrl(int) const;
%End
%If (Qt_4_4_0 -)
    int backwardHistoryCount() const;
%End
%If (Qt_4_4_0 -)
    int forwardHistoryCount() const;
%End

signals:
%If (Qt_4_4_0 -)
    void historyChanged();
%End

private:
    QTextBrowser(const QTextBrowser &);
};
