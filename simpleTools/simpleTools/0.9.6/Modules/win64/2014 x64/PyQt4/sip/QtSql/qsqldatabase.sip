// qsqldatabase.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSqlDriverCreatorBase /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qsqldatabase.h>
%End

public:
    virtual ~QSqlDriverCreatorBase();
    virtual QSqlDriver *createObject() const = 0 /Factory/;
};

class QSqlDatabase
{
%TypeHeaderCode
#include <qsqldatabase.h>
%End

public:
    QSqlDatabase();
    QSqlDatabase(const QSqlDatabase &other);
    ~QSqlDatabase();
    bool open() /ReleaseGIL/;
    bool open(const QString &user, const QString &password) /ReleaseGIL/;
    void close();
    bool isOpen() const;
    bool isOpenError() const;
    QStringList tables(QSql::TableType type = QSql::Tables) const;
    QSqlIndex primaryIndex(const QString &tablename) const;
    QSqlRecord record(const QString &tablename) const;
    QSqlQuery exec(const QString &query /DocValue="Py_v3:''"/ = QString()) const /PyName=exec_,ReleaseGIL/;
%If (Py_v3)
    QSqlQuery exec(const QString &query /DocValue="Py_v3:''"/ = QString()) const /ReleaseGIL/;
%End
    QSqlError lastError() const;
    bool isValid() const;
    bool transaction() /ReleaseGIL/;
    bool commit() /ReleaseGIL/;
    bool rollback() /ReleaseGIL/;
    void setDatabaseName(const QString &name);
    void setUserName(const QString &name);
    void setPassword(const QString &password);
    void setHostName(const QString &host);
    void setPort(int p);
    void setConnectOptions(const QString &options /DocValue="Py_v3:''"/ = QString());
    QString databaseName() const;
    QString userName() const;
    QString password() const;
    QString hostName() const;
    QString driverName() const;
    int port() const;
    QString connectOptions() const;
%If (Qt_4_4_0 -)
    QString connectionName() const;
%End
    QSqlDriver *driver() const;
    static QSqlDatabase addDatabase(const QString &type, const QString &connectionName = QLatin1String(QSqlDatabase::defaultConnection));
    static QSqlDatabase addDatabase(QSqlDriver *driver, const QString &connectionName = QLatin1String(QSqlDatabase::defaultConnection));
    static QSqlDatabase cloneDatabase(const QSqlDatabase &other, const QString &connectionName);
    static QSqlDatabase database(const QString &connectionName = QLatin1String(QSqlDatabase::defaultConnection), bool open = true);
    static void removeDatabase(const QString &connectionName);
    static bool contains(const QString &connectionName = QLatin1String(QSqlDatabase::defaultConnection));
    static QStringList drivers();
    static QStringList connectionNames();
    static void registerSqlDriver(const QString &name, QSqlDriverCreatorBase *creator /Transfer/);
    static bool isDriverAvailable(const QString &name);

protected:
    explicit QSqlDatabase(const QString &type);
    explicit QSqlDatabase(QSqlDriver *driver);

public:
%If (Qt_4_6_0 -)
    void setNumericalPrecisionPolicy(QSql::NumericalPrecisionPolicy precisionPolicy);
%End
%If (Qt_4_6_0 -)
    QSql::NumericalPrecisionPolicy numericalPrecisionPolicy() const;
%End
};
