// qfilesystemmodel.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QFileSystemModel : QAbstractItemModel
{
%TypeHeaderCode
#include <qfilesystemmodel.h>
%End

public:
    enum Roles
    {
        FileIconRole,
        FilePathRole,
        FileNameRole,
        FilePermissions,
    };

    explicit QFileSystemModel(QObject *parent /TransferThis/ = 0);
    virtual ~QFileSystemModel();
    virtual QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
    QModelIndex index(const QString &path, int column = 0) const;
    virtual QModelIndex parent(const QModelIndex &child) const;
    virtual bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
    virtual bool canFetchMore(const QModelIndex &parent) const;
    virtual void fetchMore(const QModelIndex &parent);
    virtual int rowCount(const QModelIndex &parent = QModelIndex()) const;
    virtual int columnCount(const QModelIndex &parent = QModelIndex()) const;
    QVariant myComputer(int role = Qt::DisplayRole) const;
    virtual QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
    virtual bool setData(const QModelIndex &idx, const QVariant &value, int role = Qt::EditRole);
    virtual QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;
    virtual Qt::ItemFlags flags(const QModelIndex &index) const;
    virtual void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);
    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QModelIndexList &indexes) const;
    virtual bool dropMimeData(const QMimeData *data, Qt::DropAction action, int row, int column, const QModelIndex &parent);
    virtual Qt::DropActions supportedDropActions() const;
    QModelIndex setRootPath(const QString &path);
    QString rootPath() const;
    QDir rootDirectory() const;
    void setIconProvider(QFileIconProvider *provider /KeepReference/);
    QFileIconProvider *iconProvider() const;
    void setFilter(QFlags<QDir::Filter> filters);
    QFlags<QDir::Filter> filter() const;
    void setResolveSymlinks(bool enable);
    bool resolveSymlinks() const;
    void setReadOnly(bool enable);
    bool isReadOnly() const;
    void setNameFilterDisables(bool enable);
    bool nameFilterDisables() const;
    void setNameFilters(const QStringList &filters);
    QStringList nameFilters() const;
    QString filePath(const QModelIndex &index) const;
    bool isDir(const QModelIndex &index) const;
    qint64 size(const QModelIndex &index) const;
    QString type(const QModelIndex &index) const;
    QDateTime lastModified(const QModelIndex &index) const;
    QModelIndex mkdir(const QModelIndex &parent, const QString &name);
%If (Qt_5_0_0 -)
    QFlags<QFileDevice::Permission> permissions(const QModelIndex &index) const;
%End
%If (- Qt_5_0_0)
    QFlags<QFile::Permission> permissions(const QModelIndex &index) const;
%End
%If (Qt_5_0_0 -)
    bool rmdir(const QModelIndex &index);
%End
%If (- Qt_5_0_0)
    bool rmdir(const QModelIndex &aindex) const;
%End
    QString fileName(const QModelIndex &aindex) const;
    QIcon fileIcon(const QModelIndex &aindex) const;
    QFileInfo fileInfo(const QModelIndex &aindex) const;
%If (Qt_5_0_0 -)
    bool remove(const QModelIndex &index);
%End
%If (- Qt_5_0_0)
    bool remove(const QModelIndex &aindex) const;
%End

signals:
    void fileRenamed(const QString &path, const QString &oldName, const QString &newName);
    void rootPathChanged(const QString &newPath);
%If (Qt_4_7_0 -)
    void directoryLoaded(const QString &path);
%End

protected:
%If (Qt_4_4_1 -)
    virtual bool event(QEvent *event);
%End
    virtual void timerEvent(QTimerEvent *event);

private:
    QFileSystemModel(const QFileSystemModel &);
};

%End
