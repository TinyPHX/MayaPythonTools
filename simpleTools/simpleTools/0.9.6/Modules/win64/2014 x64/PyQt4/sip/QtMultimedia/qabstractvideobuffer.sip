// qabstractvideobuffer.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtMultimedia Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QAbstractVideoBuffer
{
%TypeHeaderCode
#include <qabstractvideobuffer.h>
%End

public:
    enum HandleType
    {
        NoHandle,
        GLTextureHandle,
%If (Qt_4_7_0 -)
        XvShmImageHandle,
%End
%If (Qt_4_7_0 -)
        CoreImageHandle,
%End
%If (Qt_4_7_0 -)
        QPixmapHandle,
%End
        UserHandle,
    };

    enum MapMode
    {
        NotMapped,
        ReadOnly,
        WriteOnly,
        ReadWrite,
    };

    QAbstractVideoBuffer(QAbstractVideoBuffer::HandleType type);
    virtual ~QAbstractVideoBuffer();
    QAbstractVideoBuffer::HandleType handleType() const;
    virtual QAbstractVideoBuffer::MapMode mapMode() const = 0;
    virtual SIP_PYOBJECT map(QAbstractVideoBuffer::MapMode mode, int *numBytes, int *bytesPerLine) = 0 /DocType="sip.voidptr"/ [uchar * (QAbstractVideoBuffer::MapMode mode, int *numBytes, int *bytesPerLine)];
%MethodCode
        uchar *mem;
        
        Py_BEGIN_ALLOW_THREADS
        mem = sipCpp->map(a0, &a1, &a2);
        Py_END_ALLOW_THREADS
        
        if (mem)
        {
            if (a0 & QAbstractVideoBuffer::WriteOnly)
                sipRes = sipConvertFromVoidPtrAndSize(mem, a1);
            else
                sipRes = sipConvertFromConstVoidPtrAndSize(mem, a1);
        }
        else
        {
            sipRes = Py_None;
            Py_INCREF(sipRes);
        }
%End

    virtual void unmap() = 0;
    virtual QVariant handle() const;
%If (Qt_5_0_0 -)
    virtual void release();
%End

private:
    QAbstractVideoBuffer(const QAbstractVideoBuffer &);
};

%End
