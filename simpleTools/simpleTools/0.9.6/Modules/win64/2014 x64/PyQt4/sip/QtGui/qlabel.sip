// qlabel.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QLabel : QFrame
{
%TypeHeaderCode
#include <qlabel.h>
%End

public:
%If (Qt_4_2_0 -)
    QLabel(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QLabel(QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
%End
%If (Qt_4_2_0 -)
    QLabel(const QString &text, QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QLabel(const QString &text, QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
%End
    virtual ~QLabel();
    QString text() const;
    const QPixmap *pixmap() const;
    const QPicture *picture() const;
    QMovie *movie() const;
    Qt::TextFormat textFormat() const;
    void setTextFormat(Qt::TextFormat);
    Qt::Alignment alignment() const;
    void setAlignment(Qt::Alignment);
    void setWordWrap(bool on);
    bool wordWrap() const;
    int indent() const;
    void setIndent(int);
    int margin() const;
    void setMargin(int);
    bool hasScaledContents() const;
    void setScaledContents(bool);
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    void setBuddy(QWidget * /KeepReference/);
    QWidget *buddy() const;
    virtual int heightForWidth(int) const;
%If (Qt_4_2_0 -)
    bool openExternalLinks() const;
%End
%If (Qt_4_2_0 -)
    void setTextInteractionFlags(Qt::TextInteractionFlags flags);
%End
%If (Qt_4_2_0 -)
    Qt::TextInteractionFlags textInteractionFlags() const;
%End
%If (Qt_4_2_0 -)
    void setOpenExternalLinks(bool open);
%End

public slots:
    void clear();
    void setMovie(QMovie *movie /KeepReference/);
    void setNum(double /Constrained/);
    void setNum(int);
    void setPicture(const QPicture &);
    void setPixmap(const QPixmap &);
    void setText(const QString &);

signals:
%If (Qt_4_2_0 -)
    void linkActivated(const QString &link);
%End
%If (Qt_4_2_0 -)
    void linkHovered(const QString &link);
%End

protected:
    virtual bool event(QEvent *e);
    virtual void paintEvent(QPaintEvent *);
    virtual void changeEvent(QEvent *);
%If (Qt_4_2_0 -)
    virtual void keyPressEvent(QKeyEvent *ev);
%End
%If (Qt_4_2_0 -)
    virtual void mousePressEvent(QMouseEvent *ev);
%End
%If (Qt_4_2_0 -)
    virtual void mouseMoveEvent(QMouseEvent *ev);
%End
%If (Qt_4_2_0 -)
    virtual void mouseReleaseEvent(QMouseEvent *ev);
%End
%If (Qt_4_2_0 -)
    virtual void contextMenuEvent(QContextMenuEvent *ev);
%End
%If (Qt_4_2_0 -)
    virtual void focusInEvent(QFocusEvent *ev);
%End
%If (Qt_4_2_0 -)
    virtual void focusOutEvent(QFocusEvent *ev);
%End
%If (Qt_4_2_0 -)
    virtual bool focusNextPrevChild(bool next);
%End

public:
%If (Qt_4_7_0 -)
    void setSelection(int, int);
%End
%If (Qt_4_7_0 -)
    bool hasSelectedText() const;
%End
%If (Qt_4_7_0 -)
    QString selectedText() const;
%End
%If (Qt_4_7_0 -)
    int selectionStart() const;
%End

private:
    QLabel(const QLabel &);
};
