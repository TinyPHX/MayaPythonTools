// qpainterpath.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qpainterpath.h>
%End

class QPainterPath
{
%TypeHeaderCode
#include <qpainterpath.h>
%End

public:
    enum ElementType
    {
        MoveToElement,
        LineToElement,
        CurveToElement,
        CurveToDataElement,
    };

    class Element
    {
%TypeHeaderCode
#include <qpainterpath.h>
%End

    public:
        qreal x;
        qreal y;
        QPainterPath::ElementType type;
        bool isMoveTo() const;
        bool isLineTo() const;
        bool isCurveTo() const;
        bool operator==(const QPainterPath::Element &e) const;
%If (Qt_4_2_0 -)
        bool operator!=(const QPainterPath::Element &e) const;
%End
        operator QPointF() const;
    };

    QPainterPath();
    explicit QPainterPath(const QPointF &startPoint);
    QPainterPath(const QPainterPath &other);
    ~QPainterPath();
    void closeSubpath();
    void moveTo(const QPointF &p);
    void lineTo(const QPointF &p);
    void arcTo(const QRectF &rect, qreal startAngle, qreal arcLength);
    void cubicTo(const QPointF &ctrlPt1, const QPointF &ctrlPt2, const QPointF &endPt);
    void quadTo(const QPointF &ctrlPt, const QPointF &endPt);
    QPointF currentPosition() const;
    void addRect(const QRectF &rect);
    void addEllipse(const QRectF &rect);
    void addPolygon(const QPolygonF &polygon);
    void addText(const QPointF &point, const QFont &f, const QString &text);
    void addPath(const QPainterPath &path);
    void addRegion(const QRegion &region);
    void connectPath(const QPainterPath &path);
    bool contains(const QPointF &pt) const;
    bool contains(const QRectF &rect) const;
    bool intersects(const QRectF &rect) const;
    QRectF boundingRect() const;
    QRectF controlPointRect() const;
    Qt::FillRule fillRule() const;
    void setFillRule(Qt::FillRule fillRule);
    QPainterPath toReversed() const;
    QList<QPolygonF> toSubpathPolygons(const QMatrix &matrix = QMatrix()) const;
    QList<QPolygonF> toFillPolygons(const QMatrix &matrix = QMatrix()) const;
    QPolygonF toFillPolygon(const QMatrix &matrix = QMatrix()) const;
    bool operator==(const QPainterPath &other) const;
    bool operator!=(const QPainterPath &other) const;
    void moveTo(qreal x, qreal y);
%If (Qt_4_2_0 -)
    void arcMoveTo(const QRectF &rect, qreal angle);
%End
%If (Qt_4_2_0 -)
    void arcMoveTo(qreal x, qreal y, qreal w, qreal h, qreal angle);
%End
    void arcTo(qreal x, qreal y, qreal w, qreal h, qreal startAngle, qreal arcLenght);
    void lineTo(qreal x, qreal y);
    void cubicTo(qreal ctrlPt1x, qreal ctrlPt1y, qreal ctrlPt2x, qreal ctrlPt2y, qreal endPtx, qreal endPty);
    void quadTo(qreal ctrlPtx, qreal ctrlPty, qreal endPtx, qreal endPty);
    void addEllipse(qreal x, qreal y, qreal w, qreal h);
    void addRect(qreal x, qreal y, qreal w, qreal h);
    void addText(qreal x, qreal y, const QFont &f, const QString &text);
    bool isEmpty() const;
    int elementCount() const;
%If (Qt_5_0_0 -)
    QPainterPath::Element elementAt(int i) const;
%End
%If (- Qt_5_0_0)
    const QPainterPath::Element &elementAt(int i) const;
%End
%If (Qt_4_2_0 -)
    void setElementPositionAt(int i, qreal x, qreal y);
%End
%If (Qt_4_3_0 -)
    void addRoundRect(const QRectF &rect, int xRnd, int yRnd);
%End
%If (Qt_4_3_0 -)
    QList<QPolygonF> toSubpathPolygons(const QTransform &matrix) const;
%End
%If (Qt_4_3_0 -)
    QList<QPolygonF> toFillPolygons(const QTransform &matrix) const;
%End
%If (Qt_4_3_0 -)
    QPolygonF toFillPolygon(const QTransform &matrix) const;
%End
%If (Qt_4_3_0 -)
    qreal length() const;
%End
%If (Qt_4_3_0 -)
    qreal percentAtLength(qreal t) const;
%End
%If (Qt_4_3_0 -)
    QPointF pointAtPercent(qreal t) const;
%End
%If (Qt_4_3_0 -)
    qreal angleAtPercent(qreal t) const;
%End
%If (Qt_4_3_0 -)
    qreal slopeAtPercent(qreal t) const;
%End
%If (Qt_4_3_0 -)
    bool intersects(const QPainterPath &p) const;
%End
%If (Qt_4_3_0 -)
    bool contains(const QPainterPath &p) const;
%End
%If (Qt_4_3_0 -)
    QPainterPath united(const QPainterPath &r) const;
%End
%If (Qt_4_3_0 -)
    QPainterPath intersected(const QPainterPath &r) const;
%End
%If (Qt_4_3_0 -)
    QPainterPath subtracted(const QPainterPath &r) const;
%End
%If (Qt_4_3_0 -)
    QPainterPath subtractedInverted(const QPainterPath &r) const;
%End
%If (Qt_4_3_0 -)
    void addRoundRect(qreal x, qreal y, qreal w, qreal h, int xRnd, int yRnd);
%End
%If (Qt_4_3_0 -)
    void addRoundRect(const QRectF &rect, int roundness);
%End
%If (Qt_4_3_0 -)
    void addRoundRect(qreal x, qreal y, qreal w, qreal h, int roundness);
%End
%If (Qt_4_4_0 -)
    void addRoundedRect(const QRectF &rect, qreal xRadius, qreal yRadius, Qt::SizeMode mode = Qt::AbsoluteSize);
%End
%If (Qt_4_4_0 -)
    void addRoundedRect(qreal x, qreal y, qreal w, qreal h, qreal xRadius, qreal yRadius, Qt::SizeMode mode = Qt::AbsoluteSize);
%End
%If (Qt_4_4_0 -)
    void addEllipse(const QPointF &center, qreal rx, qreal ry);
%End
%If (Qt_4_4_0 -)
    QPainterPath simplified() const;
%End
%If (Qt_4_5_0 -)
    QPainterPath operator&(const QPainterPath &other) const;
%End
%If (Qt_4_5_0 -)
    QPainterPath operator|(const QPainterPath &other) const;
%End
%If (Qt_4_5_0 -)
    QPainterPath operator+(const QPainterPath &other) const;
%End
%If (Qt_4_5_0 -)
    QPainterPath operator-(const QPainterPath &other) const;
%End
%If (Qt_4_5_0 -)
    QPainterPath &operator&=(const QPainterPath &other);
%End
%If (Qt_4_5_0 -)
    QPainterPath &operator|=(const QPainterPath &other);
%End
%If (Qt_4_5_0 -)
    QPainterPath &operator+=(const QPainterPath &other);
%End
%If (Qt_4_5_0 -)
    QPainterPath &operator-=(const QPainterPath &other);
%End
%If (Qt_4_6_0 -)
    void translate(qreal dx, qreal dy);
%End
%If (Qt_4_6_0 -)
    QPainterPath translated(qreal dx, qreal dy) const;
%End
%If (Qt_4_6_0 -)
    void translate(const QPointF &offset);
%End
%If (Qt_4_6_0 -)
    QPainterPath translated(const QPointF &offset) const;
%End
%If (Qt_4_8_0 -)
    void swap(QPainterPath &other);
%End
};

QDataStream &operator<<(QDataStream &, const QPainterPath & /Constrained/);
QDataStream &operator>>(QDataStream &, QPainterPath & /Constrained/);

class QPainterPathStroker
{
%TypeHeaderCode
#include <qpainterpath.h>
%End

public:
    QPainterPathStroker();
    ~QPainterPathStroker();
    void setWidth(qreal width);
    qreal width() const;
    void setCapStyle(Qt::PenCapStyle style);
    Qt::PenCapStyle capStyle() const;
    void setJoinStyle(Qt::PenJoinStyle style);
    Qt::PenJoinStyle joinStyle() const;
    void setMiterLimit(qreal length);
    qreal miterLimit() const;
    void setCurveThreshold(qreal threshold);
    qreal curveThreshold() const;
    void setDashPattern(Qt::PenStyle);
%If (Qt_5_0_0 -)
    void setDashPattern(const QVector<double> &dashPattern);
%End
%If (- Qt_5_0_0)
    void setDashPattern(const QVector<qreal> &dashPattern);
%End
%If (Qt_5_0_0 -)
    QVector<double> dashPattern() const;
%End
%If (- Qt_5_0_0)
    QVector<qreal> dashPattern() const;
%End
    QPainterPath createStroke(const QPainterPath &path) const;
%If (Qt_4_3_0 -)
    void setDashOffset(qreal offset);
%End
%If (Qt_4_3_0 -)
    qreal dashOffset() const;
%End

private:
%If (Qt_4_6_0 -)
    QPainterPathStroker(const QPainterPathStroker &);
%End
};
