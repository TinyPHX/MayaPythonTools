// qwebhistory.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtWebKit Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)
%ModuleCode
#include <qwebhistory.h>
%End
%End

%If (Qt_4_4_0 -)

class QWebHistoryItem
{
%TypeHeaderCode
#include <qwebhistory.h>
%End

public:
    QWebHistoryItem(const QWebHistoryItem &other);
    ~QWebHistoryItem();
    QUrl originalUrl() const;
    QUrl url() const;
    QString title() const;
    QDateTime lastVisited() const;
    QIcon icon() const;
%If (Qt_4_5_0 -)
    QVariant userData() const;
%End
%If (Qt_4_5_0 -)
    void setUserData(const QVariant &userData);
%End
%If (Qt_4_5_0 -)
    bool isValid() const;
%End
};

%End
%If (Qt_4_4_0 -)

class QWebHistory
{
%TypeHeaderCode
#include <qwebhistory.h>
%End

public:
    void clear();
    QList<QWebHistoryItem> items() const;
    QList<QWebHistoryItem> backItems(int maxItems) const;
    QList<QWebHistoryItem> forwardItems(int maxItems) const;
    bool canGoBack() const;
    bool canGoForward() const;
    void back();
    void forward();
    void goToItem(const QWebHistoryItem &item);
    QWebHistoryItem backItem() const;
    QWebHistoryItem currentItem() const;
    QWebHistoryItem forwardItem() const;
    QWebHistoryItem itemAt(int i) const;
    int count() const /__len__/;

private:
    QWebHistory();
    QWebHistory(const QWebHistory &);
    ~QWebHistory();

public:
%If (Qt_4_5_0 -)
    int currentItemIndex() const;
%End
%If (Qt_4_5_0 -)
    int maximumItemCount() const;
%End
%If (Qt_4_5_0 -)
    void setMaximumItemCount(int count);
%End
};

%End
%If (Qt_4_6_0 -)
QDataStream &operator<<(QDataStream &, const QWebHistory & /Constrained/);
%End
%If (Qt_4_6_0 -)
QDataStream &operator>>(QDataStream &, QWebHistory & /Constrained/);
%End
