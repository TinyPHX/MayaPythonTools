// qstackedlayout.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QStackedLayout : QLayout
{
%TypeHeaderCode
#include <qstackedlayout.h>
%End

public:
%If (Qt_4_4_0 -)

    enum StackingMode
    {
        StackOne,
        StackAll,
    };

%End
    QStackedLayout();
    explicit QStackedLayout(QWidget *parent /TransferThis/);
    explicit QStackedLayout(QLayout *parentLayout /TransferThis/);
    virtual ~QStackedLayout();
    int addWidget(QWidget *w /Transfer/);
    int insertWidget(int index, QWidget *w /Transfer/);
    QWidget *currentWidget() const;
    int currentIndex() const;
    QWidget *widget(int) const;
    virtual QWidget *widget();
    virtual int count() const;
    virtual void addItem(QLayoutItem *item /Transfer/);
    virtual QSize sizeHint() const;
    virtual QSize minimumSize() const;
    virtual QLayoutItem *itemAt(int) const;
    virtual QLayoutItem *takeAt(int) /TransferBack/;
    virtual void setGeometry(const QRect &rect);

signals:
    void widgetRemoved(int index);
    void currentChanged(int index);

public slots:
    void setCurrentIndex(int index);
    void setCurrentWidget(QWidget *w);

public:
%If (Qt_4_4_0 -)
    QStackedLayout::StackingMode stackingMode() const;
%End
%If (Qt_4_4_0 -)
    void setStackingMode(QStackedLayout::StackingMode stackingMode);
%End
%If (Qt_5_0_0 -)
    virtual bool hasHeightForWidth() const;
%End
%If (Qt_5_0_0 -)
    virtual int heightForWidth(int width) const;
%End

private:
    QStackedLayout(const QStackedLayout &);
};
