// qabstractanimation.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QAbstractAnimation : QObject
{
%TypeHeaderCode
#include <qabstractanimation.h>
%End

public:
    enum Direction
    {
        Forward,
        Backward,
    };

    enum State
    {
        Stopped,
        Paused,
        Running,
    };

    enum DeletionPolicy
    {
        KeepWhenStopped,
        DeleteWhenStopped,
    };

    QAbstractAnimation(QObject *parent /TransferThis/ = 0);
    virtual ~QAbstractAnimation();
    QAbstractAnimation::State state() const;
    QAnimationGroup *group() const;
    QAbstractAnimation::Direction direction() const;
    void setDirection(QAbstractAnimation::Direction direction);
    int currentTime() const;
    int currentLoopTime() const;
    int loopCount() const;
    void setLoopCount(int loopCount);
    int currentLoop() const;
    virtual int duration() const = 0;
    int totalDuration() const;

signals:
    void finished();
    void stateChanged(QAbstractAnimation::State newState, QAbstractAnimation::State oldState);
    void currentLoopChanged(int currentLoop);
    void directionChanged(QAbstractAnimation::Direction);

public slots:
    void start(QAbstractAnimation::DeletionPolicy policy = QAbstractAnimation::KeepWhenStopped);
    void pause();
    void resume();
    void setPaused(bool);
    void stop();
    void setCurrentTime(int msecs);

protected:
    virtual bool event(QEvent *event);
    virtual void updateCurrentTime(int currentTime) = 0;
    virtual void updateState(QAbstractAnimation::State newState, QAbstractAnimation::State oldState);
    virtual void updateDirection(QAbstractAnimation::Direction direction);

private:
    QAbstractAnimation(const QAbstractAnimation &);
};

%End
