// qlibrary.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qlibrary.h>
%End

class QLibrary : QObject
{
%TypeHeaderCode
#include <qlibrary.h>
%End

public:
%If (Qt_4_2_0 -)

    enum LoadHint
    {
        ResolveAllSymbolsHint,
        ExportExternalSymbolsHint,
        LoadArchiveMemberHint,
%If (Qt_5_0_0 -)
        PreventUnloadHint,
%End
    };

%End
%If (Qt_4_2_0 -)
    typedef QFlags<QLibrary::LoadHint> LoadHints;
%End
    explicit QLibrary(QObject *parent /TransferThis/ = 0);
    QLibrary(const QString &fileName, QObject *parent /TransferThis/ = 0);
    QLibrary(const QString &fileName, int verNum, QObject *parent /TransferThis/ = 0);
%If (Qt_4_4_0 -)
    QLibrary(const QString &fileName, const QString &version, QObject *parent /TransferThis/ = 0);
%End
    virtual ~QLibrary();
%If (Qt_4_2_0 -)
    QString errorString() const;
%End
    QString fileName() const;
    bool isLoaded() const;
    bool load();
%If (Qt_4_2_0 -)
    QFlags<QLibrary::LoadHint> loadHints() const;
%End
%If (Qt_5_0_0 -)
    QFunctionPointer resolve(const char *symbol);
%End
%If (- Qt_5_0_0)
    void *resolve(const char *symbol);
%End
%If (Qt_5_0_0 -)
    static QFunctionPointer resolve(const QString &fileName, const char *symbol);
%End
%If (- Qt_5_0_0)
    static void *resolve(const QString &fileName, const char *symbol);
%End
%If (Qt_5_0_0 -)
    static QFunctionPointer resolve(const QString &fileName, int verNum, const char *symbol);
%End
%If (- Qt_5_0_0)
    static void *resolve(const QString &fileName, int verNum, const char *symbol);
%End
%If (Qt_5_0_0 -)
    static QFunctionPointer resolve(const QString &fileName, const QString &version, const char *symbol);
%End
%If (Qt_4_4_0 - Qt_5_0_0)
    static void *resolve(const QString &fileName, const QString &version, const char *symbol);
%End
    bool unload();
    static bool isLibrary(const QString &fileName);
    void setFileName(const QString &fileName);
    void setFileNameAndVersion(const QString &fileName, int verNum);
%If (Qt_4_4_0 -)
    void setFileNameAndVersion(const QString &fileName, const QString &version);
%End
%If (Qt_4_2_0 -)
    void setLoadHints(QFlags<QLibrary::LoadHint> hints);
%End
};

%If (Qt_4_2_0 -)
QFlags<QLibrary::LoadHint> operator|(QLibrary::LoadHint f1, QFlags<QLibrary::LoadHint> f2);
%End
