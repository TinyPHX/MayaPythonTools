// qclipboard.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QClipboard : QObject
{
%TypeHeaderCode
#include <qclipboard.h>
%End

%If (Qt_5_0_0 -)
    explicit QClipboard(QObject *parent /TransferThis/);
%End
%If (- Qt_5_0_0)
    QClipboard(QObject *parent /TransferThis/);
%End
    virtual ~QClipboard();

public:
    enum Mode
    {
        Clipboard,
        Selection,
%If (Qt_4_2_0 -)
        FindBuffer,
%End
    };

    void clear(QClipboard::Mode mode = QClipboard::Clipboard);
%If (Qt_4_2_0 -)
    bool supportsFindBuffer() const;
%End
    bool supportsSelection() const;
    bool ownsClipboard() const;
%If (Qt_4_2_0 -)
    bool ownsFindBuffer() const;
%End
    bool ownsSelection() const;
    QString text(QClipboard::Mode mode = QClipboard::Clipboard) const;
    SIP_PYTUPLE text(const QString &subtype, QClipboard::Mode mode = QClipboard::Clipboard) const /DocType="Py_v3:(str, str);(QString, QString)", API=QString:2 - /;
%MethodCode
        QString *text;
        QString *subtype = new QString(*a0);
        
        Py_BEGIN_ALLOW_THREADS
        text = new QString(sipCpp->text(*subtype, a1));
        Py_END_ALLOW_THREADS
        
        PyObject *text_obj = sipConvertFromNewType(text, sipType_QString, NULL);
        PyObject *subtype_obj = sipConvertFromNewType(subtype, sipType_QString, NULL);
        
        if (text_obj && subtype_obj)
        {
        #if PY_VERSION_HEX >= 0x02040000
            sipRes = PyTuple_Pack(2, text_obj, subtype_obj);
        #else
            sipRes = Py_BuildValue("(OO)", text_obj, subtype_obj);
        #endif
        }
        
        Py_XDECREF(text_obj);
        Py_XDECREF(subtype_obj);
%End

    QString text(QString &subtype, QClipboard::Mode mode = QClipboard::Clipboard) const /API=QString: - 2/;
    void setText(const QString &, QClipboard::Mode mode = QClipboard::Clipboard);
    const QMimeData *mimeData(QClipboard::Mode mode = QClipboard::Clipboard) const;
    void setMimeData(QMimeData *data /GetWrapper/, QClipboard::Mode mode = QClipboard::Clipboard);
%MethodCode
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setMimeData(a0, a1);
        Py_END_ALLOW_THREADS
        
        // Transfer ownership to C++ and make sure the Python object stays alive by
        // giving it a reference to itself.  The cycle will be broken by QMimeData's
        // virtual dtor.  The reason we don't do the obvious and just use /Transfer/ is
        // that the QClipboard Python object we would transfer ownership to is likely
        // to be garbage collected immediately afterwards.
        sipTransferTo(a0Wrapper, a0Wrapper);
%End

    QImage image(QClipboard::Mode mode = QClipboard::Clipboard) const;
    QPixmap pixmap(QClipboard::Mode mode = QClipboard::Clipboard) const;
    void setImage(const QImage &, QClipboard::Mode mode = QClipboard::Clipboard);
    void setPixmap(const QPixmap &, QClipboard::Mode mode = QClipboard::Clipboard);

signals:
%If (Qt_4_2_0 -)
    void changed(QClipboard::Mode mode);
%End
    void dataChanged();
%If (Qt_4_2_0 -)
    void findBufferChanged();
%End
    void selectionChanged();

protected:
%If (- Qt_5_0_0)
    virtual void connectNotify(SIP_SIGNAL);
%End
%If (- Qt_5_0_0)
    virtual bool event(QEvent *);
%End

private:
    QClipboard(const QClipboard &);
};
