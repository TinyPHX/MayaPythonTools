// qimagereader.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QImageReader
{
%TypeHeaderCode
#include <qimagereader.h>
%End

public:
    enum ImageReaderError
    {
        UnknownError,
        FileNotFoundError,
        DeviceError,
        UnsupportedFormatError,
        InvalidDataError,
    };

    QImageReader();
    QImageReader(QIODevice *device, const QByteArray &format = QByteArray());
    QImageReader(const QString &fileName, const QByteArray &format = QByteArray());
    ~QImageReader();
    void setFormat(const QByteArray &format);
    QByteArray format() const;
    void setDevice(QIODevice *device);
    QIODevice *device() const;
    void setFileName(const QString &fileName);
    QString fileName() const;
    QSize size() const;
    void setClipRect(const QRect &rect);
    QRect clipRect() const;
    void setScaledSize(const QSize &size);
    QSize scaledSize() const;
    void setScaledClipRect(const QRect &rect);
    QRect scaledClipRect() const;
    bool canRead() const;
    QImage read() /ReleaseGIL/;
%If (Qt_4_2_0 -)
    bool read(QImage *image) /ReleaseGIL/;
%End
    bool jumpToNextImage();
    bool jumpToImage(int imageNumber);
    int loopCount() const;
    int imageCount() const;
    int nextImageDelay() const;
    int currentImageNumber() const;
    QRect currentImageRect() const;
    QImageReader::ImageReaderError error() const;
    QString errorString() const;
    static QByteArray imageFormat(const QString &fileName);
    static QByteArray imageFormat(QIODevice *device);
    static QList<QByteArray> supportedImageFormats();
    QStringList textKeys() const;
    QString text(const QString &key) const;
    void setBackgroundColor(const QColor &color);
    QColor backgroundColor() const;
    bool supportsAnimation() const;
%If (Qt_4_2_0 -)
    void setQuality(int quality);
%End
%If (Qt_4_2_0 -)
    int quality() const;
%End
%If (Qt_4_2_0 -)
    bool supportsOption(QImageIOHandler::ImageOption option) const;
%End
%If (Qt_4_5_0 -)
    void setAutoDetectImageFormat(bool enabled);
%End
%If (Qt_4_5_0 -)
    bool autoDetectImageFormat() const;
%End
%If (Qt_4_5_0 -)
    QImage::Format imageFormat() const;
%End
%If (Qt_4_6_0 -)
    void setDecideFormatFromContent(bool ignored);
%End
%If (Qt_4_6_0 -)
    bool decideFormatFromContent() const;
%End

private:
    QImageReader(const QImageReader &);
};
