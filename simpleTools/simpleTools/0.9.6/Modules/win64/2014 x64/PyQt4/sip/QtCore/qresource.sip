// qresource.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_2_0 -)

class QResource
{
%TypeHeaderCode
#include <qresource.h>
%End

public:
    QResource(const QString &fileName /DocValue="Py_v3:''"/ = QString(), const QLocale &locale = QLocale());
    ~QResource();
    QString absoluteFilePath() const;
    SIP_PYOBJECT data() const /DocType="Py_v3:bytes;str"/;
%MethodCode
        // The data may contain embedded '\0's so set the size explicitly.
        
        if (sipCpp->data())
        {
            if ((sipRes = SIPBytes_FromStringAndSize((char *)sipCpp->data(), sipCpp->size())) == NULL)
                sipIsErr = 1;
        }
        else
        {
            Py_INCREF(Py_None);
            sipRes = Py_None;
        }
%End

    QString fileName() const;
    bool isCompressed() const;
    bool isValid() const;
    QLocale locale() const;
    void setFileName(const QString &file);
    void setLocale(const QLocale &locale);
    qint64 size() const;
    static void addSearchPath(const QString &path);
    static bool registerResource(const QString &rccFileName, const QString &mapRoot /DocValue="Py_v3:''"/ = QString());
%If (Qt_4_3_0 -)
    static bool registerResource(const uchar *rccData, const QString &mapRoot /DocValue="Py_v3:''"/ = QString()) /PyName=registerResourceData/;
%End
    static QStringList searchPaths();
    static bool unregisterResource(const QString &rccFileName, const QString &mapRoot /DocValue="Py_v3:''"/ = QString());
%If (Qt_4_3_0 -)
    static bool unregisterResource(const uchar *rccData, const QString &mapRoot /DocValue="Py_v3:''"/ = QString()) /PyName=unregisterResourceData/;
%End

protected:
    QStringList children() const;
    bool isDir() const;
    bool isFile() const;

private:
%If (Qt_4_6_0 -)
    QResource(const QResource &);
%End
};

%End
