// qiconengine.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QIconEngine /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qiconengine.h>
%End

public:
    virtual ~QIconEngine();
    virtual void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state) = 0;
    virtual QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state);
    virtual QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state);
    virtual void addPixmap(const QPixmap &pixmap, QIcon::Mode mode, QIcon::State state);
    virtual void addFile(const QString &fileName, const QSize &size, QIcon::Mode mode, QIcon::State state);
%If (Qt_5_0_0 -)
    virtual QString key() const;
%End
%If (Qt_5_0_0 -)
    virtual QIconEngine *clone() const = 0 /Factory/;
%End
%If (Qt_5_0_0 -)
    virtual bool read(QDataStream &in);
%End
%If (Qt_5_0_0 -)
    virtual bool write(QDataStream &out) const;
%End
%If (Qt_5_0_0 -)

    enum IconEngineHook
    {
        AvailableSizesHook,
        IconNameHook,
    };

%End
%If (Qt_5_0_0 -)

    struct AvailableSizesArgument
    {
%TypeHeaderCode
#include <qiconengine.h>
%End

        QIcon::Mode mode;
        QIcon::State state;
        QList<QSize> sizes;
    };

%End
%If (Qt_5_0_0 -)
    virtual QList<QSize> availableSizes(QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off) const;
%End
%If (Qt_5_0_0 -)
    virtual QString iconName() const;
%End
};

%If (Qt_4_3_0 - Qt_5_0_0)

class QIconEngineV2 : QIconEngine
{
%TypeHeaderCode
#include <qiconengine.h>
%End

public:
    virtual QString key() const;
    virtual QIconEngineV2 *clone() const /Factory/;
    virtual bool read(QDataStream &in);
    virtual bool write(QDataStream &out) const;
%If (Qt_4_5_0 -)

    enum IconEngineHook
    {
        AvailableSizesHook,
%If (Qt_4_7_0 -)
        IconNameHook,
%End
    };

%End
%If (Qt_4_5_0 -)

    struct AvailableSizesArgument
    {
%TypeHeaderCode
#include <qiconengine.h>
%End

        QIcon::Mode mode;
        QIcon::State state;
        QList<QSize> sizes;
    };

%End
%If (Qt_4_5_0 -)
    QList<QSize> availableSizes(QIcon::Mode mode = QIcon::Normal, QIcon::State state = QIcon::Off);
%End
%If (Qt_4_7_0 -)
    QString iconName();
%End
};

%End
