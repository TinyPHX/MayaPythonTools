// qmainwindow.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qmainwindow.h>
%End

class QMainWindow : QWidget
{
%TypeHeaderCode
#include <qmainwindow.h>
%End

public:
%If (Qt_4_2_0 -)
    QMainWindow(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QMainWindow(QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
%End
    virtual ~QMainWindow();
    QSize iconSize() const;
    void setIconSize(const QSize &iconSize);
    Qt::ToolButtonStyle toolButtonStyle() const;
    void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle);
    QMenuBar *menuBar() const /Transfer/;
    void setMenuBar(QMenuBar *menubar /Transfer/);
    QStatusBar *statusBar() const /Transfer/;
    void setStatusBar(QStatusBar *statusbar /Transfer/);
    QWidget *centralWidget() const;
    void setCentralWidget(QWidget *widget /Transfer/);
    void setCorner(Qt::Corner corner, Qt::DockWidgetArea area);
    Qt::DockWidgetArea corner(Qt::Corner corner) const;
    void addToolBarBreak(Qt::ToolBarArea area = Qt::TopToolBarArea);
    void insertToolBarBreak(QToolBar *before);
    void addToolBar(Qt::ToolBarArea area, QToolBar *toolbar /Transfer/);
    void addToolBar(QToolBar *toolbar /Transfer/);
    QToolBar *addToolBar(const QString &title) /Transfer/;
    void insertToolBar(QToolBar *before, QToolBar *toolbar /Transfer/);
    void removeToolBar(QToolBar *toolbar);
    Qt::ToolBarArea toolBarArea(QToolBar *toolbar) const;
    void addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget /Transfer/);
    void addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget /Transfer/, Qt::Orientation orientation);
    void splitDockWidget(QDockWidget *after, QDockWidget *dockwidget /Transfer/, Qt::Orientation orientation);
    void removeDockWidget(QDockWidget *dockwidget /TransferBack/);
    Qt::DockWidgetArea dockWidgetArea(QDockWidget *dockwidget) const;
    QByteArray saveState(int version = 0) const;
    bool restoreState(const QByteArray &state, int version = 0);
    virtual QMenu *createPopupMenu();

public slots:
%If (Qt_4_2_0 -)
    void setAnimated(bool enabled);
%End
%If (Qt_4_2_0 -)
    void setDockNestingEnabled(bool enabled);
%End

signals:
    void iconSizeChanged(const QSize &iconSize);
    void toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle);

protected:
    virtual void contextMenuEvent(QContextMenuEvent *event);
    virtual bool event(QEvent *event);

public:
%If (Qt_4_2_0 -)
    bool isAnimated() const;
%End
%If (Qt_4_2_0 -)
    bool isDockNestingEnabled() const;
%End
%If (Qt_4_2_0 -)
    bool isSeparator(const QPoint &pos) const;
%End
%If (Qt_4_2_0 -)
    QWidget *menuWidget() const;
%End
%If (Qt_4_2_0 -)
    void setMenuWidget(QWidget *menubar /Transfer/);
%End
%If (Qt_4_2_0 -)
    void tabifyDockWidget(QDockWidget *first, QDockWidget *second);
%End
%If (Qt_4_3_0 -)

    enum DockOption
    {
        AnimatedDocks,
        AllowNestedDocks,
        AllowTabbedDocks,
        ForceTabbedDocks,
        VerticalTabs,
    };

%End
%If (Qt_4_3_0 -)
    typedef QFlags<QMainWindow::DockOption> DockOptions;
%End
%If (Qt_4_3_0 -)
    void setDockOptions(QFlags<QMainWindow::DockOption> options);
%End
%If (Qt_4_3_0 -)
    QFlags<QMainWindow::DockOption> dockOptions() const;
%End
%If (Qt_4_3_0 -)
    void removeToolBarBreak(QToolBar *before);
%End
%If (Qt_4_3_0 -)
    bool toolBarBreak(QToolBar *toolbar) const;
%End
%If (Qt_4_3_0 -)
    void setUnifiedTitleAndToolBarOnMac(bool set);
%End
%If (Qt_4_3_0 -)
    bool unifiedTitleAndToolBarOnMac() const;
%End
%If (Qt_4_4_0 -)
    bool restoreDockWidget(QDockWidget *dockwidget);
%End
%If (Qt_4_5_0 -)
    bool documentMode() const;
%End
%If (Qt_4_5_0 -)
    void setDocumentMode(bool enabled);
%End
%If (Qt_4_5_0 -)
    QTabWidget::TabShape tabShape() const;
%End
%If (Qt_4_5_0 -)
    void setTabShape(QTabWidget::TabShape tabShape);
%End
%If (Qt_4_5_0 -)
    QTabWidget::TabPosition tabPosition(Qt::DockWidgetArea area) const;
%End
%If (Qt_4_5_0 -)
    void setTabPosition(Qt::DockWidgetAreas areas, QTabWidget::TabPosition tabPosition);
%End
%If (Qt_4_5_0 -)
    QList<QDockWidget*> tabifiedDockWidgets(QDockWidget *dockwidget) const;
%End

private:
    QMainWindow(const QMainWindow &);
};

%If (Qt_4_3_0 -)
QFlags<QMainWindow::DockOption> operator|(QMainWindow::DockOption f1, QFlags<QMainWindow::DockOption> f2);
%End
