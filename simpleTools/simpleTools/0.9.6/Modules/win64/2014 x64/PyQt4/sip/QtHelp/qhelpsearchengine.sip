// qhelpsearchengine.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtHelp Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QHelpSearchQuery
{
%TypeHeaderCode
#include <qhelpsearchengine.h>
%End

public:
    enum FieldName
    {
        DEFAULT,
        FUZZY,
        WITHOUT,
        PHRASE,
        ALL,
        ATLEAST,
    };

    QHelpSearchQuery();
    QHelpSearchQuery(QHelpSearchQuery::FieldName field, const QStringList &wordList);
};

%End
%If (Qt_4_4_0 -)

class QHelpSearchEngine : QObject
{
%TypeHeaderCode
#include <qhelpsearchengine.h>
%End

public:
    QHelpSearchEngine(QHelpEngineCore *helpEngine, QObject *parent /TransferThis/ = 0);
    virtual ~QHelpSearchEngine();
%If (Qt_4_5_0 -)
    QList<QHelpSearchQuery> query() const;
%End
    QHelpSearchQueryWidget *queryWidget();
    QHelpSearchResultWidget *resultWidget();
    int hitsCount() const;
    QList<QPair<QString, QString>> hits(int start, int end) const;

public slots:
    void reindexDocumentation();
    void cancelIndexing();
    void search(const QList<QHelpSearchQuery> &queryList);
    void cancelSearching();

signals:
    void indexingStarted();
    void indexingFinished();
    void searchingStarted();
    void searchingFinished(int hits);

public:
%If (Qt_4_6_0 -)
    int hitCount() const;
%End
};

%End
