// qlistwidget.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qlistwidget.h>
%End

class QListWidgetItem /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qlistwidget.h>
%End

public:
%If (Qt_4_2_0 -)

    enum ItemType
    {
        Type,
        UserType,
    };

%End
%If (- Qt_4_2_0)

    enum
    {
        Type,
        UserType,
    };

%End
    QListWidgetItem(QListWidget *parent /TransferThis/ = 0, int type = Type);
    QListWidgetItem(const QString &text, QListWidget *parent /TransferThis/ = 0, int type = Type);
    QListWidgetItem(const QIcon &icon, const QString &text, QListWidget *parent /TransferThis/ = 0, int type = Type);
    QListWidgetItem(const QListWidgetItem &other);
    virtual ~QListWidgetItem();
    virtual QListWidgetItem *clone() const /Factory/;
    QListWidget *listWidget() const;
    Qt::ItemFlags flags() const;
    QString text() const;
    QIcon icon() const;
    QString statusTip() const;
%If (PyQt_ToolTip)
    QString toolTip() const;
%End
%If (PyQt_WhatsThis)
    QString whatsThis() const;
%End
    QFont font() const;
    int textAlignment() const;
    void setTextAlignment(int alignment);
    QColor backgroundColor() const;
    virtual void setBackgroundColor(const QColor &color);
    QColor textColor() const;
    void setTextColor(const QColor &color);
    Qt::CheckState checkState() const;
    void setCheckState(Qt::CheckState state);
    QSize sizeHint() const;
    void setSizeHint(const QSize &size);
    virtual QVariant data(int role) const;
    virtual void setData(int role, const QVariant &value);
    virtual bool operator<(const QListWidgetItem &other /NoCopy/) const;
    virtual void read(QDataStream &in) /ReleaseGIL/;
    virtual void write(QDataStream &out) const /ReleaseGIL/;
    int type() const;
    void setFlags(Qt::ItemFlags aflags);
    void setText(const QString &atext);
    void setIcon(const QIcon &aicon);
    void setStatusTip(const QString &astatusTip);
%If (PyQt_ToolTip)
    void setToolTip(const QString &atoolTip);
%End
%If (PyQt_WhatsThis)
    void setWhatsThis(const QString &awhatsThis);
%End
    void setFont(const QFont &afont);
%If (Qt_4_2_0 -)
    QBrush background() const;
%End
%If (Qt_4_2_0 -)
    void setBackground(const QBrush &brush);
%End
%If (Qt_4_2_0 -)
    QBrush foreground() const;
%End
%If (Qt_4_2_0 -)
    void setForeground(const QBrush &brush);
%End
%If (Qt_4_2_0 -)
    void setSelected(bool aselect);
%End
%If (Qt_4_2_0 -)
    bool isSelected() const;
%End
%If (Qt_4_2_0 -)
    void setHidden(bool ahide);
%End
%If (Qt_4_2_0 -)
    bool isHidden() const;
%End

private:
    QListWidgetItem &operator=(const QListWidgetItem &);
};

QDataStream &operator<<(QDataStream &out, const QListWidgetItem &item /Constrained/);
QDataStream &operator>>(QDataStream &in, QListWidgetItem &item /Constrained/);

class QListWidget : QListView
{
%TypeHeaderCode
#include <qlistwidget.h>
%End

public:
    explicit QListWidget(QWidget *parent /TransferThis/ = 0);
    virtual ~QListWidget();
    QListWidgetItem *item(int row) const;
    int row(const QListWidgetItem *item) const;
    void insertItem(int row, QListWidgetItem *item /Transfer/);
    void insertItem(int row, const QString &label);
    void insertItems(int row, const QStringList &labels);
    void addItem(QListWidgetItem *aitem /Transfer/);
    void addItem(const QString &label);
    void addItems(const QStringList &labels);
    QListWidgetItem *takeItem(int row) /TransferBack/;
    int count() const /__len__/;
    QListWidgetItem *currentItem() const;
    void setCurrentItem(QListWidgetItem *item);
%If (Qt_4_4_0 -)
    void setCurrentItem(QListWidgetItem *item, QFlags<QItemSelectionModel::SelectionFlag> command);
%End
    int currentRow() const;
    void setCurrentRow(int row);
%If (Qt_4_4_0 -)
    void setCurrentRow(int row, QFlags<QItemSelectionModel::SelectionFlag> command);
%End
    QListWidgetItem *itemAt(const QPoint &p) const;
    QListWidgetItem *itemAt(int ax, int ay) const;
    QWidget *itemWidget(QListWidgetItem *item) const;
    void setItemWidget(QListWidgetItem *item, QWidget *widget /Transfer/);
%MethodCode
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->itemWidget(a0);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setItemWidget(a0, a1);
        Py_END_ALLOW_THREADS
%End

    QRect visualItemRect(const QListWidgetItem *item) const;
    void sortItems(Qt::SortOrder order = Qt::AscendingOrder);
    void editItem(QListWidgetItem *item);
    void openPersistentEditor(QListWidgetItem *item);
    void closePersistentEditor(QListWidgetItem *item);
    bool isItemSelected(const QListWidgetItem *item) const;
    void setItemSelected(const QListWidgetItem *item, bool select);
    QList<QListWidgetItem*> selectedItems() const;
    QList<QListWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags) const;
    bool isItemHidden(const QListWidgetItem *item) const;
    void setItemHidden(const QListWidgetItem *item, bool hide);

public slots:
    void clear();
    void scrollToItem(const QListWidgetItem *item, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);

signals:
    void itemPressed(QListWidgetItem *item);
    void itemClicked(QListWidgetItem *item);
    void itemDoubleClicked(QListWidgetItem *item);
    void itemActivated(QListWidgetItem *item);
    void itemEntered(QListWidgetItem *item);
    void itemChanged(QListWidgetItem *item);
    void currentItemChanged(QListWidgetItem *current, QListWidgetItem *previous);
    void currentTextChanged(const QString &currentText);
    void currentRowChanged(int currentRow);
    void itemSelectionChanged();

protected:
    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QList<QListWidgetItem*> items) const /TransferBack/;
    virtual bool dropMimeData(int index, const QMimeData *data, Qt::DropAction action);
    virtual Qt::DropActions supportedDropActions() const;
    QList<QListWidgetItem*> items(const QMimeData *data) const;
    QModelIndex indexFromItem(QListWidgetItem *item) const;
    QListWidgetItem *itemFromIndex(const QModelIndex &index) const;
    virtual bool event(QEvent *e);

public:
%If (Qt_4_2_0 -)
    void setSortingEnabled(bool enable);
%End
%If (Qt_4_2_0 -)
    bool isSortingEnabled() const;
%End
%If (Qt_4_2_0 -)
    virtual void dropEvent(QDropEvent *event);
%End
%If (Qt_4_3_0 -)
    void removeItemWidget(QListWidgetItem *aItem);
%MethodCode
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->itemWidget(a0);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->removeItemWidget(a0);
        Py_END_ALLOW_THREADS
%End

%End

private:
    virtual void setModel(QAbstractItemModel *model /KeepReference/);
    QListWidget(const QListWidget &);
};
