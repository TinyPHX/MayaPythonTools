// qtoolbutton.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QToolButton : QAbstractButton
{
%TypeHeaderCode
#include <qtoolbutton.h>
%End

public:
    enum ToolButtonPopupMode
    {
        DelayedPopup,
        MenuButtonPopup,
        InstantPopup,
    };

    explicit QToolButton(QWidget *parent /TransferThis/ = 0);
    virtual ~QToolButton();
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    Qt::ToolButtonStyle toolButtonStyle() const;
    Qt::ArrowType arrowType() const;
    void setArrowType(Qt::ArrowType type);
    void setMenu(QMenu *menu /KeepReference/);
    QMenu *menu() const;
    void setPopupMode(QToolButton::ToolButtonPopupMode mode);
    QToolButton::ToolButtonPopupMode popupMode() const;
    QAction *defaultAction() const;
    void setAutoRaise(bool enable);
    bool autoRaise() const;

public slots:
    void showMenu();
    void setToolButtonStyle(Qt::ToolButtonStyle style);
    void setDefaultAction(QAction * /KeepReference/);

signals:
    void triggered(QAction *);

protected:
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionToolButton *option) const;
%End
    virtual bool event(QEvent *e);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void actionEvent(QActionEvent *);
    virtual void enterEvent(QEvent *);
    virtual void leaveEvent(QEvent *);
    virtual void timerEvent(QTimerEvent *);
    virtual void changeEvent(QEvent *);
%If (Qt_4_2_0 -)
    virtual void mouseReleaseEvent(QMouseEvent *);
%End
    virtual void nextCheckState();
%If (Qt_4_2_0 -)
    virtual bool hitButton(const QPoint &pos) const;
%End

private:
    QToolButton(const QToolButton &);
};
