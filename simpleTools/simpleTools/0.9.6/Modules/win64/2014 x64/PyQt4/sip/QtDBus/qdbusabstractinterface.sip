// qdbusabstractinterface.sip generated by MetaSIP on Fri Mar  1 21:46:03 2013
//
// This file is part of the QtDBus Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDBusAbstractInterface : QObject
{
%TypeHeaderCode
#include <qdbusabstractinterface.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QDBusPendingCallWatcher, &sipType_QDBusPendingCallWatcher, -1, 1},
        {sipName_QDBusAbstractInterface, &sipType_QDBusAbstractInterface, 4, 2},
        {sipName_QDBusServiceWatcher, &sipType_QDBusServiceWatcher, -1, 3},
        {sipName_QDBusAbstractAdaptor, &sipType_QDBusAbstractAdaptor, -1, -1},
        {sipName_QDBusConnectionInterface, &sipType_QDBusConnectionInterface, -1, 5},
        {sipName_QDBusInterface, &sipType_QDBusInterface, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
    virtual ~QDBusAbstractInterface();
    bool isValid() const;
    QDBusConnection connection() const;
    QString service() const;
    QString path() const;
    QString interface() const;
    QDBusError lastError() const;
%If (Qt_4_8_0 -)
    void setTimeout(int timeout);
%End
%If (Qt_4_8_0 -)
    int timeout() const;
%End
    QDBusMessage call(const QString &method, const QVariant &arg1 = QVariant(), const QVariant &arg2 = QVariant(), const QVariant &arg3 = QVariant(), const QVariant &arg4 = QVariant(), const QVariant &arg5 = QVariant(), const QVariant &arg6 = QVariant(), const QVariant &arg7 = QVariant(), const QVariant &arg8 = QVariant()) /ReleaseGIL/;
    QDBusMessage call(QDBus::CallMode mode, const QString &method, const QVariant &arg1 = QVariant(), const QVariant &arg2 = QVariant(), const QVariant &arg3 = QVariant(), const QVariant &arg4 = QVariant(), const QVariant &arg5 = QVariant(), const QVariant &arg6 = QVariant(), const QVariant &arg7 = QVariant(), const QVariant &arg8 = QVariant()) /ReleaseGIL/;
    QDBusMessage callWithArgumentList(QDBus::CallMode mode, const QString &method, const QList<QVariant> &args) /ReleaseGIL/;
    bool callWithCallback(const QString &method, const QList<QVariant> &args, QObject *receiver, SIP_SLOT returnMethod, SIP_SLOT errorMethod);
    SIP_PYOBJECT callWithCallback(const QString &method, const QList<QVariant> &args, SIP_PYCALLABLE returnMethod, SIP_PYCALLABLE errorMethod);
%MethodCode
        QObject *qrx;
        QByteArray return_slot = qpycore_pyqtslot_get_parts(a2, &qrx);
        
        if (!return_slot.isNull())
        {
            QObject *error_qrx;
            QByteArray error_slot = qpycore_pyqtslot_get_parts(a3, &error_qrx);
        
            if (!error_slot.isNull())
            {
                if (qrx == error_qrx)
                {
                    bool ok;
            
                    Py_BEGIN_ALLOW_THREADS
                    ok = sipCpp->callWithCallback(*a0, *a1, qrx, return_slot.constData(), error_slot.constData());
                    Py_END_ALLOW_THREADS
        
                    sipRes = PyBool_FromLong(ok);
                }
                else
                {
                    PyErr_SetString(PyExc_ValueError,
                            "the return and error methods must be bound to the same QObject instance");
                }
            }
        }
%End

    bool callWithCallback(const QString &method, const QList<QVariant> &args, QObject *receiver, SIP_SLOT slot);
    SIP_PYOBJECT callWithCallback(const QString &method, const QList<QVariant> &args, SIP_PYCALLABLE slot);
%MethodCode
        QObject *qrx;
        QByteArray slot = qpycore_pyqtslot_get_parts(a2, &qrx);
        
        if (!slot.isNull())
        {
            bool ok;
            
            Py_BEGIN_ALLOW_THREADS
            ok = sipCpp->callWithCallback(*a0, *a1, qrx, slot.constData());
            Py_END_ALLOW_THREADS
        
            sipRes = PyBool_FromLong(ok);
        }
%End

    QDBusPendingCall asyncCall(const QString &method, const QVariant &arg1 = QVariant(), const QVariant &arg2 = QVariant(), const QVariant &arg3 = QVariant(), const QVariant &arg4 = QVariant(), const QVariant &arg5 = QVariant(), const QVariant &arg6 = QVariant(), const QVariant &arg7 = QVariant(), const QVariant &arg8 = QVariant());
    QDBusPendingCall asyncCallWithArgumentList(const QString &method, const QList<QVariant> &args);

protected:
    QDBusAbstractInterface(const QString &service, const QString &path, const char *interface, const QDBusConnection &connection, QObject *parent /TransferThis/);
%If (Qt_5_0_0 -)
    virtual void connectNotify(const QMetaMethod &signal);
%End
%If (- Qt_5_0_0)
    virtual void connectNotify(SIP_SIGNAL signal);
%End
%If (Qt_5_0_0 -)
    virtual void disconnectNotify(const QMetaMethod &signal);
%End
%If (- Qt_5_0_0)
    virtual void disconnectNotify(SIP_SIGNAL signal);
%End
};

%End

%ModuleHeaderCode
#include <qpydbus_api.h>
%End

%PostInitialisationCode
qpydbus_post_init();
%End
