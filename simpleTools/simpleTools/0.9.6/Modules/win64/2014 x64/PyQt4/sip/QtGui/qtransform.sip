// qtransform.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_3_0 -)
%ModuleCode
#include <qtransform.h>
%End
%End

%If (Qt_4_3_0 -)

class QTransform
{
%TypeHeaderCode
#include <qtransform.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"ddddddddd", sipCpp->m11(), sipCpp->m12(), sipCpp->m13(), sipCpp->m21(), sipCpp->m22(), sipCpp->m23(), sipCpp->m31(), sipCpp->m32(), sipCpp->m33());
%End

public:
    enum TransformationType
    {
        TxNone,
        TxTranslate,
        TxScale,
        TxRotate,
        TxShear,
        TxProject,
    };

    QTransform();
    QTransform(qreal m11, qreal m12, qreal m13, qreal m21, qreal m22, qreal m23, qreal m31, qreal m32, qreal m33 = 1.0e+0);
    QTransform(qreal h11, qreal h12, qreal h13, qreal h21, qreal h22, qreal h23);
    explicit QTransform(const QMatrix &mtx);
    QTransform::TransformationType type() const;
    void setMatrix(qreal m11, qreal m12, qreal m13, qreal m21, qreal m22, qreal m23, qreal m31, qreal m32, qreal m33);
    QTransform inverted(bool *invertible = 0) const;
    QTransform adjoint() const;
    QTransform transposed() const;
    QTransform &translate(qreal dx, qreal dy);
    QTransform &scale(qreal sx, qreal sy);
    QTransform &shear(qreal sh, qreal sv);
    QTransform &rotate(qreal angle, Qt::Axis axis = Qt::ZAxis);
    QTransform &rotateRadians(qreal angle, Qt::Axis axis = Qt::ZAxis);
    static bool squareToQuad(const QPolygonF &square, QTransform &result);
    static bool quadToSquare(const QPolygonF &quad, QTransform &result);
    static bool quadToQuad(const QPolygonF &one, const QPolygonF &two, QTransform &result);
    bool operator==(const QTransform &) const;
    bool operator!=(const QTransform &) const;
    QTransform &operator*=(const QTransform &);
    QTransform operator*(const QTransform &o) const;
    void reset();
    void map(int x /Constrained/, int y /Constrained/, int *tx, int *ty) const;
    void map(qreal x, qreal y, qreal *tx, qreal *ty) const;
    QPoint map(const QPoint &p) const;
    QPointF map(const QPointF &p) const;
    QLine map(const QLine &l) const;
    QLineF map(const QLineF &l) const;
    QPolygonF map(const QPolygonF &a) const;
    QPolygon map(const QPolygon &a) const;
    QRegion map(const QRegion &r) const;
    QPainterPath map(const QPainterPath &p) const;
    QPolygon mapToPolygon(const QRect &r) const;
    QRect mapRect(const QRect &) const;
    QRectF mapRect(const QRectF &) const;
    const QMatrix &toAffine() const;
    bool isAffine() const;
    bool isIdentity() const;
    bool isInvertible() const;
    bool isScaling() const;
    bool isRotating() const;
    bool isTranslating() const;
    qreal determinant() const;
    qreal det() const;
    qreal m11() const;
    qreal m12() const;
    qreal m13() const;
    qreal m21() const;
    qreal m22() const;
    qreal m23() const;
    qreal m31() const;
    qreal m32() const;
    qreal m33() const;
    qreal dx() const;
    qreal dy() const;
%If (Qt_4_5_0 -)
    static QTransform fromTranslate(qreal dx, qreal dy);
%End
%If (Qt_4_5_0 -)
    static QTransform fromScale(qreal dx, qreal dy);
%End
    QTransform &operator*=(qreal num);
    QTransform &operator/=(qreal div);
    QTransform &operator+=(qreal num);
    QTransform &operator-=(qreal num);
};

%End
%If (Qt_4_3_0 -)
QDataStream &operator<<(QDataStream &, const QTransform & /Constrained/);
%End
%If (Qt_4_3_0 -)
QDataStream &operator>>(QDataStream &, QTransform & /Constrained/);
%End
%If (Qt_4_3_0 -)
QPoint operator*(const QPoint &p, const QTransform &m);
%End
%If (Qt_4_3_0 -)
QPointF operator*(const QPointF &p, const QTransform &m);
%End
%If (Qt_4_3_0 -)
QLineF operator*(const QLineF &l, const QTransform &m);
%End
%If (Qt_4_3_0 -)
QLine operator*(const QLine &l, const QTransform &m);
%End
%If (Qt_4_3_0 -)
QPolygon operator*(const QPolygon &a, const QTransform &m);
%End
%If (Qt_4_3_0 -)
QPolygonF operator*(const QPolygonF &a, const QTransform &m);
%End
%If (Qt_4_3_0 -)
QRegion operator*(const QRegion &r, const QTransform &m);
%End
%If (Qt_4_3_0 -)
QPainterPath operator*(const QPainterPath &p, const QTransform &m);
%End
%If (Qt_4_3_0 -)
QTransform operator*(const QTransform &a, qreal n);
%End
%If (Qt_4_3_0 -)
QTransform operator/(const QTransform &a, qreal n);
%End
%If (Qt_4_3_0 -)
QTransform operator+(const QTransform &a, qreal n);
%End
%If (Qt_4_3_0 -)
QTransform operator-(const QTransform &a, qreal n);
%End
%If (Qt_4_6_0 -)
bool qFuzzyCompare(const QTransform &t1, const QTransform &t2);
%End
