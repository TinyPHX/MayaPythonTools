// qnetworkinterface.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_2_0 -)
%ModuleCode
#include <qnetworkinterface.h>
%End
%End

%If (Qt_4_2_0 -)

class QNetworkAddressEntry
{
%TypeHeaderCode
#include <qnetworkinterface.h>
%End

public:
    QNetworkAddressEntry();
    QNetworkAddressEntry(const QNetworkAddressEntry &other);
    ~QNetworkAddressEntry();
    QHostAddress ip() const;
    void setIp(const QHostAddress &newIp);
    QHostAddress netmask() const;
    void setNetmask(const QHostAddress &newNetmask);
    QHostAddress broadcast() const;
    void setBroadcast(const QHostAddress &newBroadcast);
%If (Qt_4_5_0 -)
    bool operator==(const QNetworkAddressEntry &other) const;
%End
%If (Qt_4_5_0 -)
    bool operator!=(const QNetworkAddressEntry &other) const;
%End
%If (Qt_4_5_0 -)
    int prefixLength() const;
%End
%If (Qt_4_5_0 -)
    void setPrefixLength(int length);
%End
%If (Qt_5_0_0 -)
    void swap(QNetworkAddressEntry &other);
%End
};

%End
%If (Qt_4_2_0 -)

class QNetworkInterface
{
%TypeHeaderCode
#include <qnetworkinterface.h>
%End

public:
    enum InterfaceFlag
    {
        IsUp,
        IsRunning,
        CanBroadcast,
        IsLoopBack,
        IsPointToPoint,
        CanMulticast,
    };

    typedef QFlags<QNetworkInterface::InterfaceFlag> InterfaceFlags;
    QNetworkInterface();
    QNetworkInterface(const QNetworkInterface &other);
    ~QNetworkInterface();
    bool isValid() const;
    QString name() const;
    QFlags<QNetworkInterface::InterfaceFlag> flags() const;
    QString hardwareAddress() const;
    QList<QNetworkAddressEntry> addressEntries() const;
    static QNetworkInterface interfaceFromName(const QString &name);
    static QNetworkInterface interfaceFromIndex(int index);
    static QList<QNetworkInterface> allInterfaces();
    static QList<QHostAddress> allAddresses();
%If (Qt_4_5_0 -)
    int index() const;
%End
%If (Qt_4_5_0 -)
    QString humanReadableName() const;
%End
%If (Qt_5_0_0 -)
    void swap(QNetworkInterface &other);
%End
};

%End
%If (Qt_4_2_0 -)
QFlags<QNetworkInterface::InterfaceFlag> operator|(QNetworkInterface::InterfaceFlag f1, QFlags<QNetworkInterface::InterfaceFlag> f2);
%End
