// qvalidator.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QValidator : QObject
{
%TypeHeaderCode
#include <qvalidator.h>
%End

public:
%If (- Qt_4_6_0)
    explicit QValidator(QObject *parent /TransferThis/);
%End
%If (Qt_4_6_0 -)
    explicit QValidator(QObject *parent /TransferThis/ = 0);
%End
    virtual ~QValidator();

    enum State
    {
        Invalid,
        Intermediate,
        Acceptable,
    };

    virtual QValidator::State validate(QString & /In,Out/, int & /In,Out/) const = 0 /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const = 0 /API=QString: - 2/;
    virtual void fixup(QString &input /In,Out/) const /API=QString:2 - /;
    virtual void fixup(QString & /Constrained/) const /API=QString: - 2/;
%If (Qt_4_3_0 -)
    void setLocale(const QLocale &locale);
%End
%If (Qt_4_3_0 -)
    QLocale locale() const;
%End

signals:
%If (Qt_5_0_0 -)
    void changed();
%End

private:
    QValidator(const QValidator &);
};

class QIntValidator : QValidator
{
%TypeHeaderCode
#include <qvalidator.h>
%End

public:
%If (- Qt_4_6_0)
    explicit QIntValidator(QObject *parent /TransferThis/);
%End
%If (Qt_4_6_0 -)
    explicit QIntValidator(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_4_8_0)
    QIntValidator(int bottom, int top, QObject *parent /TransferThis/);
%End
%If (Qt_4_8_0 -)
    QIntValidator(int bottom, int top, QObject *parent /TransferThis/ = 0);
%End
    virtual ~QIntValidator();
    virtual QValidator::State validate(QString & /In,Out/, int & /In,Out/) const /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const /API=QString: - 2/;
%If (Qt_4_7_0 -)
    virtual void fixup(QString &input /In,Out/) const /API=QString:2 - /;
%End
%If (Qt_4_7_0 -)
    virtual void fixup(QString &input /Constrained/) const /API=QString: - 2/;
%End
    void setBottom(int);
    void setTop(int);
    virtual void setRange(int bottom, int top);
    int bottom() const;
    int top() const;
%If (Qt_5_0_0 -)
    void bottomChanged(int bottom);
%End
%If (Qt_5_0_0 -)
    void topChanged(int top);
%End

private:
    QIntValidator(const QIntValidator &);
};

class QDoubleValidator : QValidator
{
%TypeHeaderCode
#include <qvalidator.h>
%End

public:
%If (- Qt_4_7_0)
    explicit QDoubleValidator(QObject *parent /TransferThis/);
%End
%If (Qt_4_7_0 -)
    explicit QDoubleValidator(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_4_8_0)
    QDoubleValidator(double bottom, double top, int decimals, QObject *parent /TransferThis/);
%End
%If (Qt_4_8_0 -)
    QDoubleValidator(double bottom, double top, int decimals, QObject *parent /TransferThis/ = 0);
%End
    virtual ~QDoubleValidator();
    virtual QValidator::State validate(QString & /In,Out/, int & /In,Out/) const /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const /API=QString: - 2/;
    virtual void setRange(double minimum, double maximum, int decimals = 0);
    void setBottom(double);
    void setTop(double);
    void setDecimals(int);
    double bottom() const;
    double top() const;
    int decimals() const;
%If (Qt_4_3_0 -)

    enum Notation
    {
        StandardNotation,
        ScientificNotation,
    };

%End
%If (Qt_4_3_0 -)
    void setNotation(QDoubleValidator::Notation);
%End
%If (Qt_4_3_0 -)
    QDoubleValidator::Notation notation() const;
%End
%If (Qt_5_0_0 -)
    void bottomChanged(double bottom);
%End
%If (Qt_5_0_0 -)
    void topChanged(double top);
%End
%If (Qt_5_0_0 -)
    void decimalsChanged(int decimals);
%End
%If (Qt_5_0_0 -)
    void notationChanged(QDoubleValidator::Notation notation);
%End

private:
    QDoubleValidator(const QDoubleValidator &);
};

class QRegExpValidator : QValidator
{
%TypeHeaderCode
#include <qvalidator.h>
%End

public:
%If (- Qt_4_7_0)
    explicit QRegExpValidator(QObject *parent /TransferThis/);
%End
%If (Qt_4_7_0 -)
    explicit QRegExpValidator(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_4_8_0)
    QRegExpValidator(const QRegExp &rx, QObject *parent /TransferThis/);
%End
%If (Qt_4_8_0 -)
    QRegExpValidator(const QRegExp &rx, QObject *parent /TransferThis/ = 0);
%End
    virtual ~QRegExpValidator();
    virtual QValidator::State validate(QString &input /In,Out/, int &pos /In,Out/) const /API=QString:2 - /;
    virtual QValidator::State validate(QString &input /Constrained/, int &pos /In,Out/) const /API=QString: - 2/;
    void setRegExp(const QRegExp &rx);
    const QRegExp &regExp() const;
%If (Qt_5_0_0 -)
    void regExpChanged(const QRegExp &regExp);
%End

private:
    QRegExpValidator(const QRegExpValidator &);
};
