// qdrag.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QDrag : QObject
{
%TypeHeaderCode
#include <qdrag.h>
%End

public:
%If (Qt_5_0_0 -)
    explicit QDrag(QObject *dragSource /TransferThis/);
%End
%If (- Qt_5_0_0)
    explicit QDrag(QWidget *dragSource /TransferThis/);
%End
    virtual ~QDrag();
%If (Qt_4_3_0 -)
    Qt::DropAction exec(Qt::DropActions supportedActions = Qt::MoveAction) /PyName=exec_,ReleaseGIL/;
%End
%If (Qt_4_3_0 -)
%If (Py_v3)
    Qt::DropAction exec(Qt::DropActions supportedActions = Qt::MoveAction) /ReleaseGIL/;
%End
%End
%If (Qt_4_3_0 -)
    Qt::DropAction exec(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction) /PyName=exec_,ReleaseGIL/;
%End
%If (Qt_4_3_0 -)
    Qt::DropAction exec(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction) /ReleaseGIL/;
%End
    void setMimeData(QMimeData *data /Transfer/);
    QMimeData *mimeData() const;
    void setPixmap(const QPixmap &);
    QPixmap pixmap() const;
    void setHotSpot(const QPoint &hotspot);
    QPoint hotSpot() const;
%If (Qt_5_0_0 -)
    QObject *source() const;
%End
%If (- Qt_5_0_0)
    QWidget *source() const;
%End
%If (Qt_5_0_0 -)
    QObject *target() const;
%End
%If (- Qt_5_0_0)
    QWidget *target() const;
%End
    Qt::DropAction start(Qt::DropActions supportedActions = Qt::CopyAction) /ReleaseGIL/;
    void setDragCursor(const QPixmap &cursor, Qt::DropAction action);

signals:
    void actionChanged(Qt::DropAction action);
%If (Qt_5_0_0 -)
    void targetChanged(QObject *newTarget);
%End
%If (- Qt_5_0_0)
    void targetChanged(QWidget *newTarget);
%End

public:
%If (Qt_5_0_0 -)
    QPixmap dragCursor(Qt::DropAction action) const;
%End
%If (Qt_5_0_0 -)
    Qt::DropActions supportedActions() const;
%End
%If (Qt_5_0_0 -)
    Qt::DropAction defaultAction() const;
%End

private:
    QDrag(const QDrag &);
};
