// qmime.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (- Qt_5_0_0)
%ModuleCode
#include <qmime.h>
%End
%End

%If (- Qt_5_0_0)

class QMimeSource
{
%TypeHeaderCode
#include <qmime.h>
%End

public:
    virtual ~QMimeSource();
    virtual const char *format(int i = 0) const = 0;
    virtual bool provides(const char *) const;
    virtual QByteArray encodedData(const char *) const = 0;
};

%End
%If (Qt_4_2_0 - Qt_5_0_0)
%If (WS_MACX)

class QMacPasteboardMime
{
%TypeHeaderCode
#include <qmime.h>
%End

public:
    enum QMacPasteboardMimeType
    {
        MIME_DND,
        MIME_CLIP,
        MIME_QT_CONVERTOR,
        MIME_QT3_CONVERTOR,
        MIME_ALL,
    };

    explicit QMacPasteboardMime(char t /PyInt/);
    virtual ~QMacPasteboardMime();
    static QList<QMacPasteboardMime*> all(uchar t /PyInt/);
    static QMacPasteboardMime *convertor(uchar t /PyInt/, const QString &mime, QString flav);
    static QString flavorToMime(uchar t /PyInt/, QString flav);
    virtual QString convertorName() = 0;
    virtual bool canConvert(const QString &mime, QString flav) = 0;
    virtual QString mimeFor(QString flav) = 0;
    virtual QString flavorFor(const QString &mime) = 0;
    virtual QVariant convertToMime(const QString &mime, QList<QByteArray> data, QString flav) = 0;
    virtual QList<QByteArray> convertFromMime(const QString &mime, QVariant data, QString flav) = 0;
};

%End
%End
%If (Qt_4_5_0 - Qt_5_0_0)
%If (WS_MACX)
void qRegisterDraggedTypes(const QStringList &types);
%End
%End
