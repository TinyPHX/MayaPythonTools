// qvector3d.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)
%ModuleCode
#include <qvector3d.h>
%End
%End

%If (Qt_4_6_0 -)

class QVector3D
{
%TypeHeaderCode
#include <qvector3d.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"ddd", (double)sipCpp->x(), (double)sipCpp->y(),
            (double)sipCpp->z());
%End

public:
    QVector3D();
%If (Qt_5_0_0 -)
    QVector3D(float xpos, float ypos, float zpos);
%End
%If (- Qt_5_0_0)
    QVector3D(qreal xpos, qreal ypos, qreal zpos);
%End
    explicit QVector3D(const QPoint &point);
    explicit QVector3D(const QPointF &point);
    QVector3D(const QVector2D &vector);
%If (Qt_5_0_0 -)
    QVector3D(const QVector2D &vector, float zpos);
%End
%If (- Qt_5_0_0)
    QVector3D(const QVector2D &vector, qreal zpos);
%End
    explicit QVector3D(const QVector4D &vector);
    SIP_PYOBJECT __repr__() const /DocType="str"/;
%MethodCode
        PyObject *x = PyFloat_FromDouble(sipCpp->x());
        PyObject *y = PyFloat_FromDouble(sipCpp->y());
        PyObject *z = PyFloat_FromDouble(sipCpp->z());
        
        if (x && y && z)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtGui.QVector3D(%R, %R, %R)", x, y,
                    z);
        #else
            sipRes = PyString_FromString("PyQt4.QtGui.QVector3D(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(z));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(x);
        Py_XDECREF(y);
        Py_XDECREF(z);
%End

%If (Qt_5_0_0 -)
    float length() const;
%End
%If (- Qt_5_0_0)
    qreal length() const;
%End
%If (Qt_5_0_0 -)
    float lengthSquared() const;
%End
%If (- Qt_5_0_0)
    qreal lengthSquared() const;
%End
    QVector3D normalized() const;
    void normalize();
%If (Qt_5_0_0 -)
    static float dotProduct(const QVector3D &v1, const QVector3D &v2);
%End
%If (- Qt_5_0_0)
    static qreal dotProduct(const QVector3D &v1, const QVector3D &v2);
%End
    static QVector3D crossProduct(const QVector3D &v1, const QVector3D &v2);
    static QVector3D normal(const QVector3D &v1, const QVector3D &v2);
    static QVector3D normal(const QVector3D &v1, const QVector3D &v2, const QVector3D &v3);
%If (Qt_5_0_0 -)
    float distanceToPlane(const QVector3D &plane, const QVector3D &normal) const;
%End
%If (- Qt_5_0_0)
    qreal distanceToPlane(const QVector3D &plane, const QVector3D &normal) const;
%End
%If (Qt_5_0_0 -)
    float distanceToPlane(const QVector3D &plane1, const QVector3D &plane2, const QVector3D &plane3) const;
%End
%If (- Qt_5_0_0)
    qreal distanceToPlane(const QVector3D &plane1, const QVector3D &plane2, const QVector3D &plane3) const;
%End
%If (Qt_5_0_0 -)
    float distanceToLine(const QVector3D &point, const QVector3D &direction) const;
%End
%If (- Qt_5_0_0)
    qreal distanceToLine(const QVector3D &point, const QVector3D &direction) const;
%End
    QVector2D toVector2D() const;
    QVector4D toVector4D() const;
    bool isNull() const;
%If (Qt_5_0_0 -)
    float x() const;
%End
%If (- Qt_5_0_0)
    qreal x() const;
%End
%If (Qt_5_0_0 -)
    float y() const;
%End
%If (- Qt_5_0_0)
    qreal y() const;
%End
%If (Qt_5_0_0 -)
    float z() const;
%End
%If (- Qt_5_0_0)
    qreal z() const;
%End
%If (Qt_5_0_0 -)
    void setX(float aX);
%End
%If (- Qt_5_0_0)
    void setX(qreal aX);
%End
%If (Qt_5_0_0 -)
    void setY(float aY);
%End
%If (- Qt_5_0_0)
    void setY(qreal aY);
%End
%If (Qt_5_0_0 -)
    void setZ(float aZ);
%End
%If (- Qt_5_0_0)
    void setZ(qreal aZ);
%End
    QVector3D &operator+=(const QVector3D &vector);
    QVector3D &operator-=(const QVector3D &vector);
%If (Qt_5_0_0 -)
    QVector3D &operator*=(float factor);
%End
%If (- Qt_5_0_0)
    QVector3D &operator*=(qreal factor);
%End
    QVector3D &operator*=(const QVector3D &vector);
%If (Qt_5_0_0 -)
    QVector3D &operator/=(float divisor);
%End
%If (- Qt_5_0_0)
    QVector3D &operator/=(qreal divisor);
%End
    QPoint toPoint() const;
    QPointF toPointF() const;
};

%End
%If (Qt_4_6_0 -)
bool operator==(const QVector3D &v1, const QVector3D &v2);
%End
%If (Qt_4_6_0 -)
bool operator!=(const QVector3D &v1, const QVector3D &v2);
%End
%If (Qt_4_6_0 -)
const QVector3D operator+(const QVector3D &v1, const QVector3D &v2);
%End
%If (Qt_4_6_0 -)
const QVector3D operator-(const QVector3D &v1, const QVector3D &v2);
%End
%If (Qt_5_0_0 -)
const QVector3D operator*(float factor, const QVector3D &vector);
%End
%If (Qt_4_6_0 - Qt_5_0_0)
const QVector3D operator*(qreal factor, const QVector3D &vector);
%End
%If (Qt_5_0_0 -)
const QVector3D operator*(const QVector3D &vector, float factor);
%End
%If (Qt_4_6_0 - Qt_5_0_0)
const QVector3D operator*(const QVector3D &vector, qreal factor);
%End
%If (Qt_4_6_0 -)
const QVector3D operator*(const QVector3D &v1, const QVector3D &v2);
%End
%If (Qt_4_6_0 -)
const QVector3D operator-(const QVector3D &vector);
%End
%If (Qt_5_0_0 -)
const QVector3D operator/(const QVector3D &vector, float divisor);
%End
%If (Qt_4_6_0 - Qt_5_0_0)
const QVector3D operator/(const QVector3D &vector, qreal divisor);
%End
%If (Qt_4_6_0 -)
bool qFuzzyCompare(const QVector3D &v1, const QVector3D &v2);
%End
%If (Qt_4_6_0 -)
QDataStream &operator<<(QDataStream &, const QVector3D & /Constrained/);
%End
%If (Qt_4_6_0 -)
QDataStream &operator>>(QDataStream &, QVector3D & /Constrained/);
%End
