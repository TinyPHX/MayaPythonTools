// qprintdialog.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (PyQt_PrintDialog)

class QPrintDialog : QAbstractPrintDialog
{
%TypeHeaderCode
#include <qprintdialog.h>
%End

public:
    QPrintDialog(QPrinter *printer, QWidget *parent /TransferThis/ = 0);
%If (Qt_4_5_0 -)
    explicit QPrintDialog(QWidget *parent /TransferThis/ = 0);
%End
    virtual ~QPrintDialog();
    virtual int exec() /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,PyName=exec_,ReleaseGIL/;
%MethodCode
        // Transfer ownership back to Python (a modal dialog will probably have the
        // main window as it's parent).  This means the Qt dialog will be deleted when
        // the Python wrapper is garbage collected.  Although this is a little
        // inconsistent, it saves having to code it explicitly to avoid the memory
        // leak.
        sipTransferBack(sipSelf);
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = sipSelfWasArg ? sipCpp->QPrintDialog::exec()
                               : sipCpp->exec();
        Py_END_ALLOW_THREADS
%End

%If (Py_v3)
    virtual int exec() /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,ReleaseGIL/;
%MethodCode
        // Transfer ownership back to Python (a modal dialog will probably have the
        // main window as it's parent).  This means the Qt dialog will be deleted when
        // the Python wrapper is garbage collected.  Although this is a little
        // inconsistent, it saves having to code it explicitly to avoid the memory
        // leak.
        sipTransferBack(sipSelf);
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = sipSelfWasArg ? sipCpp->QPrintDialog::exec()
                               : sipCpp->exec();
        Py_END_ALLOW_THREADS
%End

%End
%If (Qt_4_4_0 -)
%If (WS_X11)
    virtual void accept();
%End
%End
%If (Qt_4_5_0 -)
    virtual void done(int result);
%End
%If (Qt_4_5_0 -)
    void setOption(QAbstractPrintDialog::PrintDialogOption option, bool on = true);
%End
%If (Qt_4_5_0 -)
    bool testOption(QAbstractPrintDialog::PrintDialogOption option) const;
%End
%If (Qt_4_5_0 -)
    void setOptions(QFlags<QAbstractPrintDialog::PrintDialogOption> options);
%End
%If (Qt_4_5_0 -)
    QFlags<QAbstractPrintDialog::PrintDialogOption> options() const;
%End
%If (Qt_4_5_0 -)
    virtual void setVisible(bool visible);
%End
%If (Qt_5_0_0 -)
    virtual void open();
%End
%If (Qt_4_5_0 - Qt_5_0_0)
    void open();
%End
%If (Qt_4_5_0 -)
    void open(SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member) [void (QObject *receiver, const char *member)];
%End
%If (Qt_4_5_0 -)
    void accepted();
%End

signals:
%If (Qt_4_5_0 -)
    void accepted(QPrinter *printer);
%End

private:
%If (- Qt_4_2_0)
    QPrintDialog(const QPrintDialog &);
%End
};

%End
