// qinputdialog.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qinputdialog.h>
%End

class QInputDialog : QDialog
{
%TypeHeaderCode
#include <qinputdialog.h>
%End

public:
%If (Qt_4_5_0 -)

    enum InputDialogOption
    {
        NoButtons,
        UseListViewForComboBoxItems,
    };

%End
%If (Qt_4_5_0 -)
    typedef QFlags<QInputDialog::InputDialogOption> InputDialogOptions;
%End
%If (Qt_4_5_0 -)

    enum InputMode
    {
        TextInput,
        IntInput,
        DoubleInput,
    };

%End
%If (Qt_5_0_0 -)
    static QString getText(QWidget *parent, const QString &title, const QString &label, QLineEdit::EchoMode echo = QLineEdit::Normal, const QString &text = QString(), bool *ok = 0, Qt::WindowFlags flags = 0, Qt::InputMethodHints inputMethodHints = Qt::ImhNone);
%End
%If (Qt_4_2_0 - Qt_5_0_0)
    static QString getText(QWidget *parent, const QString &title, const QString &label, QLineEdit::EchoMode mode = QLineEdit::Normal, const QString &text /DocValue="Py_v3:''"/ = QString(), bool *ok = 0, Qt::WindowFlags flags = 0) /ReleaseGIL/;
%End
%If (Qt_4_8_0 - Qt_5_0_0)
    static QString getText(QWidget *parent, const QString &title, const QString &label, QLineEdit::EchoMode mode, const QString &text, bool *ok, Qt::WindowFlags flags, Qt::InputMethodHints inputMethodHints);
%End
%If (- Qt_4_2_0)
    static QString getText(QWidget *parent, const QString &title, const QString &label, QLineEdit::EchoMode mode = QLineEdit::Normal, const QString &text /DocValue="Py_v3:''"/ = QString(), bool *ok = 0, Qt::WFlags flags = 0) /ReleaseGIL/;
%End
%If (Qt_4_5_0 -)
    static int getInt(QWidget *parent, const QString &title, const QString &label, int value = 0, int min = -2147483647, int max = 2147483647, int step = 1, bool *ok = 0, Qt::WindowFlags flags = 0);
%End
%If (Qt_4_2_0 -)
%If (PyQt_Deprecated_5_0)
    static int getInteger(QWidget *parent, const QString &title, const QString &label, int value = 0, int min = -2147483647, int max = 2147483647, int step = 1, bool *ok = 0, Qt::WindowFlags flags = 0) /ReleaseGIL/;
%End
%End
%If (- Qt_4_2_0)
    static int getInteger(QWidget *parent, const QString &title, const QString &label, int value = 0, int min = -2147483647, int max = 2147483647, int step = 1, bool *ok = 0, Qt::WFlags flags = 0) /ReleaseGIL/;
%End
%If (Qt_4_2_0 -)
    static double getDouble(QWidget *parent, const QString &title, const QString &label, double value = 0, double min = -2147483647, double max = 2147483647, int decimals = 1, bool *ok = 0, Qt::WindowFlags flags = 0) /ReleaseGIL/;
%End
%If (- Qt_4_2_0)
    static double getDouble(QWidget *parent, const QString &title, const QString &label, double value = 0, double min = -2147483647, double max = 2147483647, int decimals = 1, bool *ok = 0, Qt::WFlags flags = 0) /ReleaseGIL/;
%End
%If (Qt_5_0_0 -)
    static QString getItem(QWidget *parent, const QString &title, const QString &label, const QStringList &items, int current = 0, bool editable = true, bool *ok = 0, Qt::WindowFlags flags = 0, Qt::InputMethodHints inputMethodHints = Qt::ImhNone);
%End
%If (Qt_4_2_0 - Qt_5_0_0)
    static QString getItem(QWidget *parent, const QString &title, const QString &label, const QStringList &list, int current = 0, bool editable = true, bool *ok = 0, Qt::WindowFlags flags = 0) /ReleaseGIL/;
%End
%If (Qt_4_8_0 - Qt_5_0_0)
    static QString getItem(QWidget *parent, const QString &title, const QString &label, const QStringList &list, int current, bool editable, bool *ok, Qt::WindowFlags flags, Qt::InputMethodHints inputMethodHints);
%End
%If (- Qt_4_2_0)
    static QString getItem(QWidget *parent, const QString &title, const QString &label, const QStringList &list, int current = 0, bool editable = true, bool *ok = 0, Qt::WFlags flags = 0) /ReleaseGIL/;
%End
%If (Qt_4_5_0 -)
    QInputDialog(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End

private:
    QInputDialog(const QInputDialog &);

public:
%If (Qt_4_5_0 -)
    virtual ~QInputDialog();
%End

private:
%If (- Qt_4_5_0)
    virtual ~QInputDialog();
%End

public:
%If (Qt_4_5_0 -)
    void setInputMode(QInputDialog::InputMode mode);
%End
%If (Qt_4_5_0 -)
    QInputDialog::InputMode inputMode() const;
%End
%If (Qt_4_5_0 -)
    void setLabelText(const QString &text);
%End
%If (Qt_4_5_0 -)
    QString labelText() const;
%End
%If (Qt_4_5_0 -)
    void setOption(QInputDialog::InputDialogOption option, bool on = true);
%End
%If (Qt_4_5_0 -)
    bool testOption(QInputDialog::InputDialogOption option) const;
%End
%If (Qt_4_5_0 -)
    void setOptions(QFlags<QInputDialog::InputDialogOption> options);
%End
%If (Qt_4_5_0 -)
    QFlags<QInputDialog::InputDialogOption> options() const;
%End
%If (Qt_4_5_0 -)
    void setTextValue(const QString &text);
%End
%If (Qt_4_5_0 -)
    QString textValue() const;
%End
%If (Qt_4_5_0 -)
    void setTextEchoMode(QLineEdit::EchoMode mode);
%End
%If (Qt_4_5_0 -)
    QLineEdit::EchoMode textEchoMode() const;
%End
%If (Qt_4_5_0 -)
    void setComboBoxEditable(bool editable);
%End
%If (Qt_4_5_0 -)
    bool isComboBoxEditable() const;
%End
%If (Qt_4_5_0 -)
    void setComboBoxItems(const QStringList &items);
%End
%If (Qt_4_5_0 -)
    QStringList comboBoxItems() const;
%End
%If (Qt_4_5_0 -)
    void setIntValue(int value);
%End
%If (Qt_4_5_0 -)
    int intValue() const;
%End
%If (Qt_4_5_0 -)
    void setIntMinimum(int min);
%End
%If (Qt_4_5_0 -)
    int intMinimum() const;
%End
%If (Qt_4_5_0 -)
    void setIntMaximum(int max);
%End
%If (Qt_4_5_0 -)
    int intMaximum() const;
%End
%If (Qt_4_5_0 -)
    void setIntRange(int min, int max);
%End
%If (Qt_4_5_0 -)
    void setIntStep(int step);
%End
%If (Qt_4_5_0 -)
    int intStep() const;
%End
%If (Qt_4_5_0 -)
    void setDoubleValue(double value);
%End
%If (Qt_4_5_0 -)
    double doubleValue() const;
%End
%If (Qt_4_5_0 -)
    void setDoubleMinimum(double min);
%End
%If (Qt_4_5_0 -)
    double doubleMinimum() const;
%End
%If (Qt_4_5_0 -)
    void setDoubleMaximum(double max);
%End
%If (Qt_4_5_0 -)
    double doubleMaximum() const;
%End
%If (Qt_4_5_0 -)
    void setDoubleRange(double min, double max);
%End
%If (Qt_4_5_0 -)
    void setDoubleDecimals(int decimals);
%End
%If (Qt_4_5_0 -)
    int doubleDecimals() const;
%End
%If (Qt_4_5_0 -)
    void setOkButtonText(const QString &text);
%End
%If (Qt_4_5_0 -)
    QString okButtonText() const;
%End
%If (Qt_4_5_0 -)
    void setCancelButtonText(const QString &text);
%End
%If (Qt_4_5_0 -)
    QString cancelButtonText() const;
%End
%If (Qt_5_0_0 -)
    virtual void open();
%End
%If (Qt_4_5_0 - Qt_5_0_0)
    void open();
%End
%If (Qt_4_5_0 -)
    void open(SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member) [void (QObject *receiver, const char *member)];
%End
%If (Qt_4_5_0 -)
    virtual QSize minimumSizeHint() const;
%End
%If (Qt_4_5_0 -)
    virtual QSize sizeHint() const;
%End
%If (Qt_4_5_0 -)
    virtual void setVisible(bool visible);
%End
%If (Qt_4_5_0 -)
    virtual void done(int result);
%End

signals:
%If (Qt_4_5_0 -)
    void textValueChanged(const QString &text);
%End
%If (Qt_4_5_0 -)
    void textValueSelected(const QString &text);
%End
%If (Qt_4_5_0 -)
    void intValueChanged(int value);
%End
%If (Qt_4_5_0 -)
    void intValueSelected(int value);
%End
%If (Qt_4_5_0 -)
    void doubleValueChanged(double value);
%End
%If (Qt_4_5_0 -)
    void doubleValueSelected(double value);
%End
};

%If (Qt_4_5_0 -)
QFlags<QInputDialog::InputDialogOption> operator|(QInputDialog::InputDialogOption f1, QFlags<QInputDialog::InputDialogOption> f2);
%End
