// qeventloop.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qeventloop.h>
%End

class QEventLoop : QObject
{
%TypeHeaderCode
#include <qeventloop.h>
%End

public:
    explicit QEventLoop(QObject *parent /TransferThis/ = 0);
    virtual ~QEventLoop();

    enum ProcessEventsFlag
    {
        AllEvents,
        ExcludeUserInputEvents,
        ExcludeSocketNotifiers,
        WaitForMoreEvents,
        X11ExcludeTimers,
%If (- Qt_5_0_0)
        DeferredDeletion,
%End
    };

    typedef QFlags<QEventLoop::ProcessEventsFlag> ProcessEventsFlags;
    bool processEvents(QFlags<QEventLoop::ProcessEventsFlag> flags = AllEvents) /ReleaseGIL/;
    void processEvents(QFlags<QEventLoop::ProcessEventsFlag> flags, int maximumTime) /ReleaseGIL/;
    int exec(QFlags<QEventLoop::ProcessEventsFlag> flags = AllEvents) /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,PyName=exec_,ReleaseGIL/;
%If (Py_v3)
    int exec(QFlags<QEventLoop::ProcessEventsFlag> flags = AllEvents) /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,ReleaseGIL/;
%End
    void exit(int returnCode = 0);
    bool isRunning() const;
    void wakeUp();

public slots:
    void quit();

public:
%If (Qt_5_0_0 -)
    virtual bool event(QEvent *event);
%End
};

QFlags<QEventLoop::ProcessEventsFlag> operator|(QEventLoop::ProcessEventsFlag f1, QFlags<QEventLoop::ProcessEventsFlag> f2);
