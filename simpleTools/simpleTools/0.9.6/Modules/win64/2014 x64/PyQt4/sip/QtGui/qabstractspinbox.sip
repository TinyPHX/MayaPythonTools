// qabstractspinbox.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qabstractspinbox.h>
%End

class QAbstractSpinBox : QWidget
{
%TypeHeaderCode
#include <qabstractspinbox.h>
%End

public:
    explicit QAbstractSpinBox(QWidget *parent /TransferThis/ = 0);
    virtual ~QAbstractSpinBox();

    enum StepEnabledFlag
    {
        StepNone,
        StepUpEnabled,
        StepDownEnabled,
    };

    typedef QFlags<QAbstractSpinBox::StepEnabledFlag> StepEnabled;

    enum ButtonSymbols
    {
        UpDownArrows,
        PlusMinus,
%If (Qt_4_3_0 -)
        NoButtons,
%End
    };

    QAbstractSpinBox::ButtonSymbols buttonSymbols() const;
    void setButtonSymbols(QAbstractSpinBox::ButtonSymbols bs);
    QString text() const;
    QString specialValueText() const;
    void setSpecialValueText(const QString &s);
    bool wrapping() const;
    void setWrapping(bool w);
    void setReadOnly(bool r);
    bool isReadOnly() const;
    void setAlignment(Qt::Alignment flag);
    Qt::Alignment alignment() const;
    void setFrame(bool);
    bool hasFrame() const;
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    void interpretText();
    virtual bool event(QEvent *event);
    virtual QValidator::State validate(QString &input /In,Out/, int &pos /In,Out/) const /API=QString:2 - /;
    virtual QValidator::State validate(QString &input /Constrained/, int &pos /In,Out/) const /API=QString: - 2/;
    virtual void fixup(QString &input /In,Out/) const /API=QString:2 - /;
    virtual void fixup(QString &input /Constrained/) const /API=QString: - 2/;
    virtual void stepBy(int steps);

public slots:
    void stepUp();
    void stepDown();
    void selectAll();
    virtual void clear();

signals:
    void editingFinished();

protected:
    virtual void resizeEvent(QResizeEvent *e);
    virtual void keyPressEvent(QKeyEvent *e);
    virtual void keyReleaseEvent(QKeyEvent *e);
    virtual void wheelEvent(QWheelEvent *e);
    virtual void focusInEvent(QFocusEvent *e);
    virtual void focusOutEvent(QFocusEvent *e);
    virtual void contextMenuEvent(QContextMenuEvent *e);
    virtual void changeEvent(QEvent *e);
    virtual void closeEvent(QCloseEvent *e);
    virtual void hideEvent(QHideEvent *e);
    virtual void mousePressEvent(QMouseEvent *e);
    virtual void mouseReleaseEvent(QMouseEvent *e);
    virtual void mouseMoveEvent(QMouseEvent *e);
    virtual void timerEvent(QTimerEvent *e);
    virtual void paintEvent(QPaintEvent *e);
    virtual void showEvent(QShowEvent *e);
    QLineEdit *lineEdit() const;
    void setLineEdit(QLineEdit *e /Transfer/);
    virtual QFlags<QAbstractSpinBox::StepEnabledFlag> stepEnabled() const;

public:
%If (Qt_4_2_0 -)

    enum CorrectionMode
    {
        CorrectToPreviousValue,
        CorrectToNearestValue,
    };

%End
%If (Qt_4_2_0 -)
    void setCorrectionMode(QAbstractSpinBox::CorrectionMode cm);
%End
%If (Qt_4_2_0 -)
    QAbstractSpinBox::CorrectionMode correctionMode() const;
%End
%If (Qt_4_2_0 -)
    bool hasAcceptableInput() const;
%End
%If (Qt_4_2_0 -)
    void setAccelerated(bool on);
%End
%If (Qt_4_2_0 -)
    bool isAccelerated() const;
%End
%If (Qt_4_3_0 -)
    void setKeyboardTracking(bool kt);
%End
%If (Qt_4_3_0 -)
    bool keyboardTracking() const;
%End

protected:
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionSpinBox *option) const;
%End

public:
%If (Qt_4_6_0 -)
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery) const;
%End

private:
    QAbstractSpinBox(const QAbstractSpinBox &);
};

QFlags<QAbstractSpinBox::StepEnabledFlag> operator|(QAbstractSpinBox::StepEnabledFlag f1, QFlags<QAbstractSpinBox::StepEnabledFlag> f2);
