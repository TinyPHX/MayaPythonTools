// qtranslator.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTranslator : QObject
{
%TypeHeaderCode
#include <qtranslator.h>
%End

public:
    explicit QTranslator(QObject *parent /TransferThis/ = 0);
    virtual ~QTranslator();
%If (Qt_5_0_0 -)
    virtual QString translate(const char *context, const char *sourceText, const char *disambiguation = 0, int n = -1) const;
%End
%If (- Qt_5_0_0)
    virtual QString translate(const char *context, const char *sourceText, const char *disambiguation = 0) const;
%End
%If (Qt_4_2_0 - Qt_5_0_0)
    QString translate(const char *context, const char *sourceText, const char *comment, int n) const;
%End
    virtual bool isEmpty() const;
    bool load(const QString &fileName, const QString &directory /DocValue="Py_v3:''"/ = QString(), const QString &searchDelimiters /DocValue="Py_v3:''"/ = QString(), const QString &suffix /DocValue="Py_v3:''"/ = QString()) /ReleaseGIL/;
%If (Qt_4_8_0 -)
    bool load(const QLocale &locale, const QString &fileName, const QString &prefix /DocValue="Py_v3:''"/ = QString(), const QString &directory /DocValue="Py_v3:''"/ = QString(), const QString &suffix /DocValue="Py_v3:''"/ = QString()) /ReleaseGIL/;
%End
%If (Qt_5_0_0 -)
    bool load(const uchar *data /Array/, int len /ArraySize/, const QString &directory = QString()) /PyName=loadFromData,ReleaseGIL/;
%End
%If (- Qt_5_0_0)
    bool load(const uchar *data /Array/, int len /ArraySize/) /PyName=loadFromData,ReleaseGIL/;
%End

private:
    QTranslator(const QTranslator &);
};
