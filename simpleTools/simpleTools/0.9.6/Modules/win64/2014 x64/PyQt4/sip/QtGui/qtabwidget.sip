// qtabwidget.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTabWidget : QWidget
{
%TypeHeaderCode
#include <qtabwidget.h>
%End

public:
    explicit QTabWidget(QWidget *parent /TransferThis/ = 0);
    virtual ~QTabWidget();
%If (Qt_4_3_0 -)
    void clear();
%End
    int addTab(QWidget *widget /Transfer/, const QString &);
    int addTab(QWidget *widget /Transfer/, const QIcon &icon, const QString &label);
    int insertTab(int index, QWidget *widget /Transfer/, const QString &);
    int insertTab(int index, QWidget *widget /Transfer/, const QIcon &icon, const QString &label);
    void removeTab(int index);
    bool isTabEnabled(int index) const;
    void setTabEnabled(int index, bool);
    QString tabText(int index) const;
    void setTabText(int index, const QString &);
    QIcon tabIcon(int index) const;
    void setTabIcon(int index, const QIcon &icon);
%If (PyQt_ToolTip)
    void setTabToolTip(int index, const QString &tip);
%End
%If (PyQt_ToolTip)
    QString tabToolTip(int index) const;
%End
%If (PyQt_WhatsThis)
    void setTabWhatsThis(int index, const QString &text);
%End
%If (PyQt_WhatsThis)
    QString tabWhatsThis(int index) const;
%End
    int currentIndex() const;
    QWidget *currentWidget() const;
    QWidget *widget(int index) const;
    int indexOf(QWidget *widget) const;
    int count() const /__len__/;

    enum TabPosition
    {
        North,
        South,
        West,
        East,
    };

    QTabWidget::TabPosition tabPosition() const;
    void setTabPosition(QTabWidget::TabPosition);

    enum TabShape
    {
        Rounded,
        Triangular,
    };

    QTabWidget::TabShape tabShape() const;
    void setTabShape(QTabWidget::TabShape s);
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    void setCornerWidget(QWidget *widget /Transfer/, Qt::Corner corner = Qt::TopRightCorner);
    QWidget *cornerWidget(Qt::Corner corner = Qt::TopRightCorner) const;

public slots:
    void setCurrentIndex(int index);
    void setCurrentWidget(QWidget *widget);

signals:
    void currentChanged(int index);

protected:
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionTabWidgetFrame *option) const;
%End
    virtual void tabInserted(int index);
    virtual void tabRemoved(int index);
    virtual bool event(QEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void paintEvent(QPaintEvent *);
    void setTabBar(QTabBar * /Transfer/);

public:
%If (Qt_5_0_0 -)
    QTabBar *tabBar() const;
%End

protected:
%If (- Qt_5_0_0)
    QTabBar *tabBar() const;
%End
    virtual void changeEvent(QEvent *);

public:
%If (Qt_4_2_0 -)
    Qt::TextElideMode elideMode() const;
%End
%If (Qt_4_2_0 -)
    void setElideMode(Qt::TextElideMode);
%End
%If (Qt_4_2_0 -)
    QSize iconSize() const;
%End
%If (Qt_4_2_0 -)
    void setIconSize(const QSize &size);
%End
%If (Qt_4_2_0 -)
    bool usesScrollButtons() const;
%End
%If (Qt_4_2_0 -)
    void setUsesScrollButtons(bool useButtons);
%End
%If (Qt_4_5_0 -)
    bool tabsClosable() const;
%End
%If (Qt_4_5_0 -)
    void setTabsClosable(bool closeable);
%End
%If (Qt_4_5_0 -)
    bool isMovable() const;
%End
%If (Qt_4_5_0 -)
    void setMovable(bool movable);
%End
%If (Qt_4_5_0 -)
    bool documentMode() const;
%End
%If (Qt_4_5_0 -)
    void setDocumentMode(bool set);
%End

signals:
%If (Qt_4_5_0 -)
    void tabCloseRequested(int index);
%End

public:
%If (Qt_4_8_0 -)
    virtual int heightForWidth(int width) const;
%End
%If (Qt_5_0_0 -)
    virtual bool hasHeightForWidth() const;
%End

private:
    QTabWidget(const QTabWidget &);
};
