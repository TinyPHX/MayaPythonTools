// abstractformwindow.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtDesigner Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QDesignerFormWindowInterface : QWidget /Abstract/
{
%TypeHeaderCode
#include <abstractformwindow.h>
%End

public:
    enum FeatureFlag
    {
        EditFeature,
        GridFeature,
        TabOrderFeature,
        DefaultFeature,
    };

    typedef QFlags<QDesignerFormWindowInterface::FeatureFlag> Feature;
    QDesignerFormWindowInterface(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
    virtual ~QDesignerFormWindowInterface();
    virtual QString fileName() const = 0;
    virtual QDir absoluteDir() const = 0;
    virtual QString contents() const = 0;
%If (Qt_5_0_0 -)
    virtual bool setContents(QIODevice *dev, QString *errorMessage = 0) = 0;
%End
%If (- Qt_5_0_0)
    virtual void setContents(QIODevice *dev) = 0;
%End
    virtual QFlags<QDesignerFormWindowInterface::FeatureFlag> features() const = 0;
    virtual bool hasFeature(QFlags<QDesignerFormWindowInterface::FeatureFlag> f) const = 0;
    virtual QString author() const = 0;
    virtual void setAuthor(const QString &author) = 0;
    virtual QString comment() const = 0;
    virtual void setComment(const QString &comment) = 0;
    virtual void layoutDefault(int *margin, int *spacing) = 0;
    virtual void setLayoutDefault(int margin, int spacing) = 0;
    virtual void layoutFunction(QString *margin /Out/, QString *spacing /Out/) = 0;
    virtual void setLayoutFunction(const QString &margin, const QString &spacing) = 0;
    virtual QString pixmapFunction() const = 0;
    virtual void setPixmapFunction(const QString &pixmapFunction) = 0;
    virtual QString exportMacro() const = 0;
    virtual void setExportMacro(const QString &exportMacro) = 0;
    virtual QStringList includeHints() const = 0;
    virtual void setIncludeHints(const QStringList &includeHints) = 0;
    virtual QDesignerFormEditorInterface *core() const;
    virtual QDesignerFormWindowCursorInterface *cursor() const = 0;
    virtual QPoint grid() const = 0;
    virtual QWidget *mainContainer() const = 0;
    virtual void setMainContainer(QWidget *mainContainer /KeepReference/) = 0;
    virtual bool isManaged(QWidget *widget) const = 0;
    virtual bool isDirty() const = 0;
    static QDesignerFormWindowInterface *findFormWindow(QWidget *w);
%If (Qt_4_4_0 -)
    static QDesignerFormWindowInterface *findFormWindow(QObject *obj);
%End
    virtual void emitSelectionChanged() = 0;
    virtual QStringList resourceFiles() const = 0;
    virtual void addResourceFile(const QString &path) = 0;
    virtual void removeResourceFile(const QString &path) = 0;

public slots:
    virtual void manageWidget(QWidget *widget) = 0;
    virtual void unmanageWidget(QWidget *widget) = 0;
    virtual void setFeatures(QFlags<QDesignerFormWindowInterface::FeatureFlag> f) = 0;
    virtual void setDirty(bool dirty) = 0;
    virtual void clearSelection(bool update = true) = 0;
    virtual void selectWidget(QWidget *widget, bool select = true) = 0;
    virtual void setGrid(const QPoint &grid) = 0;
    virtual void setFileName(const QString &fileName) = 0;
%If (Qt_5_0_0 -)
    virtual bool setContents(const QString &contents) = 0;
%End
%If (- Qt_5_0_0)
    virtual void setContents(const QString &contents) = 0;
%End

signals:
    void mainContainerChanged(QWidget *mainContainer);
    void fileNameChanged(const QString &fileName);
    void featureChanged(QFlags<QDesignerFormWindowInterface::FeatureFlag> f);
    void selectionChanged();
    void geometryChanged();
    void resourceFilesChanged();
    void widgetManaged(QWidget *widget);
    void widgetUnmanaged(QWidget *widget);
    void aboutToUnmanageWidget(QWidget *widget);
    void activated(QWidget *widget);
    void changed();
    void widgetRemoved(QWidget *w);
%If (Qt_4_5_0 -)
    void objectRemoved(QObject *o);
%End

public:
%If (Qt_5_0_0 -)
    virtual QStringList checkContents() const = 0;
%End
%If (Qt_5_0_0 -)
    QStringList activeResourceFilePaths() const;
%End
%If (Qt_5_0_0 -)
    virtual QWidget *formContainer() const = 0;
%End
%If (Qt_5_0_0 -)
    void activateResourceFilePaths(const QStringList &paths, int *errorCount = 0, QString *errorMessages /Out/ = 0);
%End
};
