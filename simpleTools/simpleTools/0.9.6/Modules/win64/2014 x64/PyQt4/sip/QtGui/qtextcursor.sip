// qtextcursor.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTextCursor
{
%TypeHeaderCode
#include <qtextcursor.h>
%End

public:
    QTextCursor();
    explicit QTextCursor(QTextDocument *document);
    explicit QTextCursor(QTextFrame *frame);
    explicit QTextCursor(const QTextBlock &block);
    QTextCursor(const QTextCursor &cursor);
    ~QTextCursor();
    bool isNull() const;

    enum MoveMode
    {
        MoveAnchor,
        KeepAnchor,
    };

    void setPosition(int pos, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor);
    int position() const;
    int anchor() const;
    void insertText(const QString &text);
    void insertText(const QString &text, const QTextCharFormat &format);

    enum MoveOperation
    {
        NoMove,
        Start,
        Up,
        StartOfLine,
        StartOfBlock,
        StartOfWord,
        PreviousBlock,
        PreviousCharacter,
        PreviousWord,
        Left,
        WordLeft,
        End,
        Down,
        EndOfLine,
        EndOfWord,
        EndOfBlock,
        NextBlock,
        NextCharacter,
        NextWord,
        Right,
        WordRight,
%If (Qt_4_5_0 -)
        NextCell,
%End
%If (Qt_4_5_0 -)
        PreviousCell,
%End
%If (Qt_4_5_0 -)
        NextRow,
%End
%If (Qt_4_5_0 -)
        PreviousRow,
%End
    };

    bool movePosition(QTextCursor::MoveOperation op, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor, int n = 1);
    void deleteChar();
    void deletePreviousChar();

    enum SelectionType
    {
        WordUnderCursor,
        LineUnderCursor,
        BlockUnderCursor,
%If (Qt_4_2_0 -)
        Document,
%End
    };

    void select(QTextCursor::SelectionType selection);
    bool hasSelection() const;
    bool hasComplexSelection() const;
    void removeSelectedText();
    void clearSelection();
    int selectionStart() const;
    int selectionEnd() const;
    QString selectedText() const;
    QTextDocumentFragment selection() const;
    void selectedTableCells(int *firstRow, int *numRows, int *firstColumn, int *numColumns) const;
    QTextBlock block() const;
    QTextCharFormat charFormat() const;
    void setCharFormat(const QTextCharFormat &format);
    void mergeCharFormat(const QTextCharFormat &modifier);
    QTextBlockFormat blockFormat() const;
    void setBlockFormat(const QTextBlockFormat &format);
    void mergeBlockFormat(const QTextBlockFormat &modifier);
    QTextCharFormat blockCharFormat() const;
    void setBlockCharFormat(const QTextCharFormat &format);
    void mergeBlockCharFormat(const QTextCharFormat &modifier);
    bool atBlockStart() const;
    bool atBlockEnd() const;
    bool atStart() const;
    bool atEnd() const;
    void insertBlock();
    void insertBlock(const QTextBlockFormat &format);
    void insertBlock(const QTextBlockFormat &format, const QTextCharFormat &charFormat);
    QTextList *insertList(const QTextListFormat &format);
    QTextList *insertList(QTextListFormat::Style style);
    QTextList *createList(const QTextListFormat &format);
    QTextList *createList(QTextListFormat::Style style);
    QTextList *currentList() const;
    QTextTable *insertTable(int rows, int cols, const QTextTableFormat &format);
    QTextTable *insertTable(int rows, int cols);
    QTextTable *currentTable() const;
    QTextFrame *insertFrame(const QTextFrameFormat &format);
    QTextFrame *currentFrame() const;
    void insertFragment(const QTextDocumentFragment &fragment);
%If (Qt_4_2_0 -)
    void insertHtml(const QString &html);
%End
    void insertImage(const QTextImageFormat &format);
%If (Qt_4_2_0 -)
    void insertImage(const QTextImageFormat &format, QTextFrameFormat::Position alignment);
%End
    void insertImage(const QString &name);
%If (Qt_4_5_0 -)
    void insertImage(const QImage &image, const QString &name /DocValue="Py_v3:''"/ = QString());
%End
    void beginEditBlock();
    void joinPreviousEditBlock();
    void endEditBlock();
%If (Qt_4_2_0 -)
    int blockNumber() const;
%End
%If (Qt_4_2_0 -)
    int columnNumber() const;
%End
    bool operator!=(const QTextCursor &rhs) const;
    bool operator<(const QTextCursor &rhs) const;
    bool operator<=(const QTextCursor &rhs) const;
    bool operator==(const QTextCursor &rhs) const;
    bool operator>=(const QTextCursor &rhs) const;
    bool operator>(const QTextCursor &rhs) const;
    bool isCopyOf(const QTextCursor &other) const;
%If (Qt_4_4_0 -)
    bool visualNavigation() const;
%End
%If (Qt_4_4_0 -)
    void setVisualNavigation(bool b);
%End
%If (Qt_4_5_0 -)
    QTextDocument *document() const;
%End
%If (Qt_4_7_0 -)
    int positionInBlock() const;
%End
%If (Qt_4_7_0 -)
    void setVerticalMovementX(int x);
%End
%If (Qt_4_7_0 -)
    int verticalMovementX() const;
%End
%If (Qt_4_7_0 -)
    void setKeepPositionOnInsert(bool b);
%End
%If (Qt_4_7_0 -)
    bool keepPositionOnInsert() const;
%End
%If (Qt_5_0_0 -)
    void swap(QTextCursor &other);
%End
};
