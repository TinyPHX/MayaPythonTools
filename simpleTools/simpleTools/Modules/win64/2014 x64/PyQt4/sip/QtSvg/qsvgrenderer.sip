// qsvgrenderer.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtSvg Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSvgRenderer : QObject
{
%TypeHeaderCode
#include <qsvgrenderer.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
            const char *name;
            sipTypeDef **type;
            int yes, no;
        } graph[] = {
            {sipName_QSvgWidget,	&sipType_QSvgWidget,	-1, 1},
    #if QT_VERSION >= 0x040200
            {sipName_QGraphicsSvgItem,	&sipType_QGraphicsSvgItem,	-1, 2},
    #else
            {0,	0, -1, 2},
    #endif
            {sipName_QSvgRenderer,	&sipType_QSvgRenderer,	-1, -1},
        };
    
        int i = 0;
    
        sipType = 0;
    
        do
        {
            struct class_graph *cg = &graph[i];
    
            if (cg->name != NULL && sipCpp->inherits(cg->name))
            {
                sipType = *cg->type;
                i = cg->yes;
            }
            else
                i = cg->no;
        }
        while (i >= 0);
%End

public:
    QSvgRenderer(QObject *parent /TransferThis/ = 0);
    QSvgRenderer(const QString &filename, QObject *parent /TransferThis/ = 0);
    QSvgRenderer(const QByteArray &contents, QObject *parent /TransferThis/ = 0);
%If (Qt_4_5_0 -)
    QSvgRenderer(QXmlStreamReader *contents, QObject *parent /TransferThis/ = 0);
%End
    virtual ~QSvgRenderer();
    bool isValid() const;
%If (Qt_4_2_0 -)
    QMatrix matrixForElement(const QString &id) const;
%End
    QSize defaultSize() const;
%If (Qt_4_2_0 -)
    bool elementExists(const QString &id) const;
%End
    QRect viewBox() const;
%If (Qt_4_2_0 -)
    QRectF viewBoxF() const;
%End
    void setViewBox(const QRect &viewbox);
%If (Qt_4_2_0 -)
    void setViewBox(const QRectF &viewbox);
%End
    bool animated() const;
%If (Qt_4_2_0 -)
    QRectF boundsOnElement(const QString &id) const;
%End
    int framesPerSecond() const;
    void setFramesPerSecond(int num);
    int currentFrame() const;
    void setCurrentFrame(int);
    int animationDuration() const;

public slots:
    bool load(const QString &filename);
    bool load(const QByteArray &contents);
%If (Qt_4_5_0 -)
    bool load(QXmlStreamReader *contents);
%End
    void render(QPainter *p);
%If (Qt_4_2_0 -)
    void render(QPainter *p, const QRectF &bounds);
%End
%If (Qt_4_2_0 -)
    void render(QPainter *painter, const QString &elementId, const QRectF &bounds = QRectF());
%End

signals:
    void repaintNeeded();
};
