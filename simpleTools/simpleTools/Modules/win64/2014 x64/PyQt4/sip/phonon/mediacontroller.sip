// mediacontroller.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the phonon Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)
%ModuleCode
#include <mediacontroller.h>
%End
%End

%If (Qt_4_4_0 -)

namespace Phonon
{
%TypeHeaderCode
#include <mediacontroller.h>
%End

    class MediaController : QObject
    {
%TypeHeaderCode
#include <mediacontroller.h>
%End

    public:
        enum Feature
        {
            Angles,
            Chapters,
            Titles,
        };

        typedef QFlags<Phonon::MediaController::Feature> Features;
        MediaController(Phonon::MediaObject *parent /TransferThis/);
        virtual ~MediaController();
        QFlags<Phonon::MediaController::Feature> supportedFeatures() const;
        int availableAngles() const;
        int currentAngle() const;
        int availableChapters() const;
        int currentChapter() const;
        int availableTitles() const;
        int currentTitle() const;
        bool autoplayTitles() const;

    public slots:
        void setCurrentAngle(int angleNumber);
        void setCurrentChapter(int chapterNumber);
        void setCurrentTitle(int titleNumber);
        void setAutoplayTitles(bool);
        void nextTitle();
        void previousTitle();

    signals:
        void availableAnglesChanged(int availableAngles);
        void angleChanged(int angleNumber);
        void availableChaptersChanged(int availableChapters);
        void chapterChanged(int chapterNumber);
        void availableTitlesChanged(int availableTitles);
        void titleChanged(int titleNumber);

    public:
%If (Qt_4_5_0 -)
        Phonon::AudioChannelDescription currentAudioChannel() const;
%End
%If (Qt_4_5_0 -)
        Phonon::SubtitleDescription currentSubtitle() const;
%End
%If (Qt_4_5_0 -)
        QList<Phonon::AudioChannelDescription> availableAudioChannels() const;
%End
%If (Qt_4_5_0 -)
        QList<Phonon::SubtitleDescription> availableSubtitles() const;
%End
%If (Qt_4_5_0 -)
        void setCurrentAudioChannel(const Phonon::AudioChannelDescription &stream);
%End
%If (Qt_4_5_0 -)
        void setCurrentSubtitle(const Phonon::SubtitleDescription &stream);
%End

    signals:
%If (Qt_4_5_0 -)
        void availableSubtitlesChanged();
%End
%If (Qt_4_5_0 -)
        void availableAudioChannelsChanged();
%End
    };
};

%End
%If (Qt_4_4_0 -)
QFlags<Phonon::MediaController::Feature> operator|(Phonon::MediaController::Feature f1, QFlags<Phonon::MediaController::Feature> f2);
%End
