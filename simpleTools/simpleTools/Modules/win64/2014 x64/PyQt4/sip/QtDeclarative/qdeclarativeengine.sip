// qdeclarativeengine.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtDeclarative Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDeclarativeEngine : QObject
{
%TypeHeaderCode
#include <qdeclarativeengine.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
        const char *name;
        sipTypeDef **type;
        int yes, no;
    } graph[] = {
        {sipName_QDeclarativeView, &sipType_QDeclarativeView, -1, 1},
        {sipName_QDeclarativeEngine, &sipType_QDeclarativeEngine, -1, 2},
        {sipName_QDeclarativeComponent, &sipType_QDeclarativeComponent, -1, 3},
        {sipName_QDeclarativeItem, &sipType_QDeclarativeItem, -1, 4},
        {sipName_QDeclarativeContext, &sipType_QDeclarativeContext, -1, -1},
    };
    
    int i = 0;
    
    sipType = NULL;
    
    do
    {
        struct class_graph *cg = &graph[i];
    
        if (cg->name != NULL && sipCpp->inherits(cg->name))
        {
            sipType = *cg->type;
            i = cg->yes;
        }
        else
            i = cg->no;
    }
    while (i >= 0);
%End

public:
    QDeclarativeEngine(QObject *parent /TransferThis/ = 0);
    virtual ~QDeclarativeEngine();
    QDeclarativeContext *rootContext() const /KeepReference/;
    void clearComponentCache();
    QStringList importPathList() const;
    void setImportPathList(const QStringList &paths);
    void addImportPath(const QString &dir);
    QStringList pluginPathList() const;
    void setPluginPathList(const QStringList &paths);
    void addPluginPath(const QString &dir);
    bool importPlugin(const QString &filePath, const QString &uri, QString *errorString /Out/);
    void setNetworkAccessManagerFactory(QDeclarativeNetworkAccessManagerFactory * /KeepReference/);
    QDeclarativeNetworkAccessManagerFactory *networkAccessManagerFactory() const;
    QNetworkAccessManager *networkAccessManager() const;
    void addImageProvider(const QString &id, QDeclarativeImageProvider *);
    QDeclarativeImageProvider *imageProvider(const QString &id) const;
    void removeImageProvider(const QString &id);
    void setOfflineStoragePath(const QString &dir);
    QString offlineStoragePath() const;
    QUrl baseUrl() const;
    void setBaseUrl(const QUrl &);
    bool outputWarningsToStandardError() const;
    void setOutputWarningsToStandardError(bool);
    static QDeclarativeContext *contextForObject(const QObject *);
    static void setContextForObject(QObject *, QDeclarativeContext *);

    enum ObjectOwnership
    {
        CppOwnership,
        JavaScriptOwnership,
    };

    static void setObjectOwnership(QObject *, QDeclarativeEngine::ObjectOwnership);
    static QDeclarativeEngine::ObjectOwnership objectOwnership(QObject *);

signals:
    void quit();
    void warnings(const QList<QDeclarativeError> &warnings);

private:
    QDeclarativeEngine(const QDeclarativeEngine &);
};

%End

%ModuleHeaderCode
#include <qpydeclarative_api.h>
%End

%PostInitialisationCode
qpydeclarative_post_init(sipModuleDict);
%End
