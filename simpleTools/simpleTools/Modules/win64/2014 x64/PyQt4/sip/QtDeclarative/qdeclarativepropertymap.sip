// qdeclarativepropertymap.sip generated by MetaSIP on Fri Mar  1 21:46:03 2013
//
// This file is part of the QtDeclarative Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDeclarativePropertyMap : QObject
{
%TypeHeaderCode
#include <qdeclarativepropertymap.h>
%End

public:
    QDeclarativePropertyMap(QObject *parent /TransferThis/ = 0);
    virtual ~QDeclarativePropertyMap();
    QVariant value(const QString &key) const;
    void insert(const QString &key, const QVariant &value);
    void clear(const QString &key);
    QStringList keys() const;
    int count() const /__len__/;
    int size() const;
    bool isEmpty() const;
    bool contains(const QString &key) const;
    QVariant operator[](const QString &key) const;

signals:
    void valueChanged(const QString &key, const QVariant &value);

private:
    QDeclarativePropertyMap(const QDeclarativePropertyMap &);
};

%End
