// qdeclarativeitem.sip generated by MetaSIP on Fri Mar  1 21:46:03 2013
//
// This file is part of the QtDeclarative Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDeclarativeItem : QGraphicsObject, QDeclarativeParserStatus
{
%TypeHeaderCode
#include <qdeclarativeitem.h>
%End

public:
    enum TransformOrigin
    {
        TopLeft,
        Top,
        TopRight,
        Left,
        Center,
        Right,
        BottomLeft,
        Bottom,
        BottomRight,
    };

    QDeclarativeItem(QDeclarativeItem *parent /TransferThis/ = 0);
    virtual ~QDeclarativeItem();
    QDeclarativeItem *parentItem() const;
    void setParentItem(QDeclarativeItem *parent /TransferThis/);
    QRectF childrenRect();
    bool clip() const;
    void setClip(bool);
    qreal baselineOffset() const;
    void setBaselineOffset(qreal);
    void setWidth(qreal);
    qreal implicitWidth() const;
    void setHeight(qreal);
    qreal implicitHeight() const;
    QDeclarativeItem::TransformOrigin transformOrigin() const;
    void setTransformOrigin(QDeclarativeItem::TransformOrigin);
    bool smooth() const;
    void setSmooth(bool);
    virtual QRectF boundingRect() const;
    virtual void paint(QPainter *, const QStyleOptionGraphicsItem *, QWidget *);
    bool hasFocus() const;
    bool keepMouseGrab() const;
    void setKeepMouseGrab(bool);

protected:
    bool isComponentComplete() const;
    virtual bool sceneEvent(QEvent *);
    virtual bool event(QEvent *);
    virtual QVariant itemChange(QGraphicsItem::GraphicsItemChange, const QVariant &);
    void setImplicitWidth(qreal);
    bool widthValid() const;
    void setImplicitHeight(qreal);
    bool heightValid() const;
    virtual void classBegin();
    virtual void componentComplete();
    virtual void keyPressEvent(QKeyEvent *event);
    virtual void keyReleaseEvent(QKeyEvent *event);
    virtual void inputMethodEvent(QInputMethodEvent *);
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;
    virtual void geometryChanged(const QRectF &newGeometry, const QRectF &oldGeometry);

private:
    QDeclarativeItem(const QDeclarativeItem &);
};

%End
