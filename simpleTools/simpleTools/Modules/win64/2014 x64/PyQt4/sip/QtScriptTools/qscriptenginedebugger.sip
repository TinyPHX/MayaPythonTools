// qscriptenginedebugger.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtScriptTools Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_5_0 -)

class QScriptEngineDebugger : QObject
{
%TypeHeaderCode
#include <qscriptenginedebugger.h>
%End

%ConvertToSubClassCode
    if (sipCpp->inherits(sipName_QScriptEngineDebugger))
        sipType = sipType_QScriptEngineDebugger;
    else
        sipType = 0;
%End

public:
    enum DebuggerWidget
    {
        ConsoleWidget,
        StackWidget,
        ScriptsWidget,
        LocalsWidget,
        CodeWidget,
        CodeFinderWidget,
        BreakpointsWidget,
        DebugOutputWidget,
        ErrorLogWidget,
    };

    enum DebuggerAction
    {
        InterruptAction,
        ContinueAction,
        StepIntoAction,
        StepOverAction,
        StepOutAction,
        RunToCursorAction,
        RunToNewScriptAction,
        ToggleBreakpointAction,
        ClearDebugOutputAction,
        ClearErrorLogAction,
        ClearConsoleAction,
        FindInScriptAction,
        FindNextInScriptAction,
        FindPreviousInScriptAction,
        GoToLineAction,
    };

    QScriptEngineDebugger(QObject *parent /TransferThis/ = 0);
    virtual ~QScriptEngineDebugger();
    void attachTo(QScriptEngine *engine);
    void detach();
    bool autoShowStandardWindow() const;
    void setAutoShowStandardWindow(bool autoShow);
    QMainWindow *standardWindow() const /Factory/;
    QToolBar *createStandardToolBar(QWidget *parent /TransferThis/ = 0);
    QMenu *createStandardMenu(QWidget *parent /TransferThis/ = 0);
    QWidget *widget(QScriptEngineDebugger::DebuggerWidget widget) const;
    QAction *action(QScriptEngineDebugger::DebuggerAction action) const;

signals:
    void evaluationSuspended();
    void evaluationResumed();

public:
%If (Qt_4_6_0 -)

    enum DebuggerState
    {
        RunningState,
        SuspendedState,
    };

%End
%If (Qt_4_6_0 -)
    QScriptEngineDebugger::DebuggerState state() const;
%End

private:
    QScriptEngineDebugger(const QScriptEngineDebugger &);
};

%End
