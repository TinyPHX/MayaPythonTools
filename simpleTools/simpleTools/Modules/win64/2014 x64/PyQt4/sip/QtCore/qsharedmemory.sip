// qsharedmemory.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QSharedMemory : QObject
{
%TypeHeaderCode
#include <qsharedmemory.h>
%End

public:
    enum AccessMode
    {
        ReadOnly,
        ReadWrite,
    };

    enum SharedMemoryError
    {
        NoError,
        PermissionDenied,
        InvalidSize,
        KeyError,
        AlreadyExists,
        NotFound,
        LockError,
        OutOfResources,
        UnknownError,
    };

    QSharedMemory(QObject *parent /TransferThis/ = 0);
    QSharedMemory(const QString &key, QObject *parent /TransferThis/ = 0);
    virtual ~QSharedMemory();
    void setKey(const QString &key);
    QString key() const;
    bool create(int size, QSharedMemory::AccessMode mode = QSharedMemory::ReadWrite);
    int size() const;
    bool attach(QSharedMemory::AccessMode mode = QSharedMemory::ReadWrite);
    bool isAttached() const;
    bool detach();
    SIP_PYOBJECT data() /DocType="sip.voidptr"/;
%MethodCode
        sipRes = sipConvertFromVoidPtrAndSize(sipCpp->data(), sipCpp->size());
%End

    SIP_PYOBJECT constData() const /DocType="sip.voidptr"/;
%MethodCode
        sipRes = sipConvertFromConstVoidPtrAndSize(sipCpp->constData(), sipCpp->size());
%End

    bool lock();
    bool unlock();
    QSharedMemory::SharedMemoryError error() const;
    QString errorString() const;
%If (Qt_4_8_0 -)
    void setNativeKey(const QString &key);
%End
%If (Qt_4_8_0 -)
    QString nativeKey() const;
%End

private:
    QSharedMemory(const QSharedMemory &);
};

%End
