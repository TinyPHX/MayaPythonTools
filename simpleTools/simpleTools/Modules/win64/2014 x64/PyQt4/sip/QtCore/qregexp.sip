// qregexp.sip generated by MetaSIP on Fri Mar  1 21:45:57 2013
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qregexp.h>
%End

class QRegExp
{
%TypeHeaderCode
#include <qregexp.h>
%End

public:
    enum PatternSyntax
    {
        RegExp,
%If (Qt_4_2_0 -)
        RegExp2,
%End
        Wildcard,
        FixedString,
%If (Qt_4_6_0 -)
        WildcardUnix,
%End
%If (Qt_4_6_0 -)
        W3CXmlSchema11,
%End
    };

    enum CaretMode
    {
        CaretAtZero,
        CaretAtOffset,
        CaretWontMatch,
    };

    QRegExp();
    QRegExp(const QString &pattern, Qt::CaseSensitivity cs = Qt::CaseSensitive, QRegExp::PatternSyntax syntax = QRegExp::RegExp);
    QRegExp(const QRegExp &rx);
    ~QRegExp();
    SIP_PYOBJECT __repr__() const /DocType="str"/;
%MethodCode
        PyObject *uni = qpycore_PyObject_FromQString(sipCpp->pattern());
        
        if (uni)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QRegExp(%R", uni);
        
            if (sipCpp->caseSensitivity() != Qt::CaseSensitive ||
                sipCpp->patternSyntax() != QRegExp::RegExp)
            {
                qpycore_Unicode_ConcatAndDel(&sipRes,
                        PyUnicode_FromFormat(", PyQt4.QtCore.Qt.CaseSensitivity(%i)",
                                (int)sipCpp->caseSensitivity()));
        
                if (sipCpp->patternSyntax() != QRegExp::RegExp)
                    qpycore_Unicode_ConcatAndDel(&sipRes,
                            PyUnicode_FromFormat(
                                    ", PyQt4.QtCore.QRegExp.PatternSyntax(%i)",
                                    (int)sipCpp->patternSyntax()));
            }
        
            qpycore_Unicode_ConcatAndDel(&sipRes, PyUnicode_FromString(")"));
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QRegExp(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(uni));
        
            if (sipCpp->caseSensitivity() != Qt::CaseSensitive ||
                sipCpp->patternSyntax() != QRegExp::RegExp)
            {
                PyString_ConcatAndDel(&sipRes,
                        PyString_FromFormat(", PyQt4.QtCore.Qt.CaseSensitivity(%i)",
                                (int)sipCpp->caseSensitivity()));
        
                if (sipCpp->patternSyntax() != QRegExp::RegExp)
                    PyString_ConcatAndDel(&sipRes,
                            PyString_FromFormat(
                                    ", PyQt4.QtCore.QRegExp.PatternSyntax(%i)",
                                    (int)sipCpp->patternSyntax()));
            }
        
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        
            Py_DECREF(uni);
        }
        else
        {
            sipRes = 0;
        }
%End

    bool operator==(const QRegExp &rx) const;
    bool operator!=(const QRegExp &rx) const;
    bool isEmpty() const;
    bool isValid() const;
    QString pattern() const;
    void setPattern(const QString &pattern);
    Qt::CaseSensitivity caseSensitivity() const;
    void setCaseSensitivity(Qt::CaseSensitivity cs);
    QRegExp::PatternSyntax patternSyntax() const;
    void setPatternSyntax(QRegExp::PatternSyntax syntax);
    bool isMinimal() const;
    void setMinimal(bool minimal);
    bool exactMatch(const QString &str) const;
    int indexIn(const QString &str, int offset = 0, QRegExp::CaretMode caretMode = QRegExp::CaretAtZero) const;
    int lastIndexIn(const QString &str, int offset = -1, QRegExp::CaretMode caretMode = QRegExp::CaretAtZero) const;
    int matchedLength() const;
%If (- Qt_5_0_0)
    int numCaptures() const;
%End
    QStringList capturedTexts();
    QString cap(int nth = 0);
    int pos(int nth = 0);
    QString errorString();
    static QString escape(const QString &str);
%If (Qt_4_6_0 -)
    int captureCount() const;
%End
%If (Qt_4_8_0 -)
    void swap(QRegExp &other);
%End
};

QDataStream &operator<<(QDataStream &out, const QRegExp &regExp /Constrained/);
QDataStream &operator>>(QDataStream &in, QRegExp &regExp /Constrained/);
