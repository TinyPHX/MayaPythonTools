// qdbusconnectioninterface.sip generated by MetaSIP on Fri Mar  1 21:46:03 2013
//
// This file is part of the QtDBus Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_7_0 -)

class QDBusConnectionInterface : QDBusAbstractInterface
{
%TypeHeaderCode
#include <qdbusconnectioninterface.h>
%End

    QDBusConnectionInterface(const QDBusConnection &connection, QObject *parent /TransferThis/);
    virtual ~QDBusConnectionInterface();

public:
    enum ServiceQueueOptions
    {
        DontQueueService,
        QueueService,
        ReplaceExistingService,
    };

    enum ServiceReplacementOptions
    {
        DontAllowReplacement,
        AllowReplacement,
    };

    enum RegisterServiceReply
    {
        ServiceNotRegistered,
        ServiceRegistered,
        ServiceQueued,
    };

    QDBusReply<QStringList> registeredServiceNames() const /ReleaseGIL/;
    QDBusReply<bool> isServiceRegistered(const QString &serviceName) const /ReleaseGIL/;
    QDBusReply<QString> serviceOwner(const QString &name) const /ReleaseGIL/;
    QDBusReply<bool> unregisterService(const QString &serviceName) /ReleaseGIL/;
    QDBusReply<QDBusConnectionInterface::RegisterServiceReply> registerService(const QString &serviceName, QDBusConnectionInterface::ServiceQueueOptions qoption = QDBusConnectionInterface::DontQueueService, QDBusConnectionInterface::ServiceReplacementOptions roption = QDBusConnectionInterface::DontAllowReplacement) /ReleaseGIL/;
    QDBusReply<unsigned int> servicePid(const QString &serviceName) const /ReleaseGIL/;
    QDBusReply<unsigned int> serviceUid(const QString &serviceName) const /ReleaseGIL/;
    QDBusReply<void> startService(const QString &name) /ReleaseGIL/;

signals:
    void serviceRegistered(const QString &service);
    void serviceUnregistered(const QString &service);
    void serviceOwnerChanged(const QString &name, const QString &oldOwner, const QString &newOwner);
    void callWithCallbackFailed(const QDBusError &error, const QDBusMessage &call);

protected:
%If (Qt_5_0_0 -)
    virtual void connectNotify(const QMetaMethod &);
%End
%If (- Qt_5_0_0)
    virtual void connectNotify(SIP_SIGNAL);
%End
%If (Qt_5_0_0 -)
    virtual void disconnectNotify(const QMetaMethod &);
%End
%If (- Qt_5_0_0)
    virtual void disconnectNotify(SIP_SIGNAL);
%End
};

%End
