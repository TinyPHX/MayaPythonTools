// qgesture.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QGesture : QObject
{
%TypeHeaderCode
#include <qgesture.h>
%End

public:
    explicit QGesture(QObject *parent /TransferThis/ = 0);
    virtual ~QGesture();
    Qt::GestureType gestureType() const;
    Qt::GestureState state() const;
    QPointF hotSpot() const;
    void setHotSpot(const QPointF &value);
    bool hasHotSpot() const;
    void unsetHotSpot();

    enum GestureCancelPolicy
    {
        CancelNone,
        CancelAllInContext,
    };

    void setGestureCancelPolicy(QGesture::GestureCancelPolicy policy);
    QGesture::GestureCancelPolicy gestureCancelPolicy() const;
};

%End
%If (Qt_4_6_0 -)

class QPanGesture : QGesture
{
%TypeHeaderCode
#include <qgesture.h>
%End

public:
%If (Qt_5_0_0 -)
    explicit QPanGesture(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QPanGesture(QObject *parent /TransferThis/ = 0);
%End
%If (Qt_5_0_0 -)
    virtual ~QPanGesture();
%End
    QPointF lastOffset() const;
    QPointF offset() const;
    QPointF delta() const;
    qreal acceleration() const;
    void setLastOffset(const QPointF &value);
    void setOffset(const QPointF &value);
    void setAcceleration(qreal value);
};

%End
%If (Qt_4_6_0 -)

class QPinchGesture : QGesture
{
%TypeHeaderCode
#include <qgesture.h>
%End

public:
    enum ChangeFlag
    {
        ScaleFactorChanged,
        RotationAngleChanged,
        CenterPointChanged,
    };

    typedef QFlags<QPinchGesture::ChangeFlag> ChangeFlags;
%If (Qt_5_0_0 -)
    explicit QPinchGesture(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QPinchGesture(QObject *parent /TransferThis/ = 0);
%End
%If (Qt_5_0_0 -)
    virtual ~QPinchGesture();
%End
    QFlags<QPinchGesture::ChangeFlag> totalChangeFlags() const;
    void setTotalChangeFlags(QFlags<QPinchGesture::ChangeFlag> value);
    QFlags<QPinchGesture::ChangeFlag> changeFlags() const;
    void setChangeFlags(QFlags<QPinchGesture::ChangeFlag> value);
    QPointF startCenterPoint() const;
    QPointF lastCenterPoint() const;
    QPointF centerPoint() const;
    void setStartCenterPoint(const QPointF &value);
    void setLastCenterPoint(const QPointF &value);
    void setCenterPoint(const QPointF &value);
    qreal totalScaleFactor() const;
    qreal lastScaleFactor() const;
    qreal scaleFactor() const;
    void setTotalScaleFactor(qreal value);
    void setLastScaleFactor(qreal value);
    void setScaleFactor(qreal value);
    qreal totalRotationAngle() const;
    qreal lastRotationAngle() const;
    qreal rotationAngle() const;
    void setTotalRotationAngle(qreal value);
    void setLastRotationAngle(qreal value);
    void setRotationAngle(qreal value);
};

%End
%If (Qt_4_6_0 -)

class QSwipeGesture : QGesture
{
%TypeHeaderCode
#include <qgesture.h>
%End

public:
    enum SwipeDirection
    {
        NoDirection,
        Left,
        Right,
        Up,
        Down,
    };

%If (Qt_5_0_0 -)
    explicit QSwipeGesture(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QSwipeGesture(QObject *parent /TransferThis/ = 0);
%End
%If (Qt_5_0_0 -)
    virtual ~QSwipeGesture();
%End
    QSwipeGesture::SwipeDirection horizontalDirection() const;
    QSwipeGesture::SwipeDirection verticalDirection() const;
    qreal swipeAngle() const;
    void setSwipeAngle(qreal value);
};

%End
%If (Qt_4_6_0 -)

class QTapGesture : QGesture
{
%TypeHeaderCode
#include <qgesture.h>
%End

public:
%If (Qt_5_0_0 -)
    explicit QTapGesture(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QTapGesture(QObject *parent /TransferThis/ = 0);
%End
%If (Qt_5_0_0 -)
    virtual ~QTapGesture();
%End
    QPointF position() const;
    void setPosition(const QPointF &pos);
};

%End
%If (Qt_4_6_0 -)

class QTapAndHoldGesture : QGesture
{
%TypeHeaderCode
#include <qgesture.h>
%End

public:
%If (Qt_5_0_0 -)
    explicit QTapAndHoldGesture(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QTapAndHoldGesture(QObject *parent /TransferThis/ = 0);
%End
%If (Qt_5_0_0 -)
    virtual ~QTapAndHoldGesture();
%End
    QPointF position() const;
    void setPosition(const QPointF &pos);
%If (Qt_4_7_1 -)
    static void setTimeout(int msecs);
%End
%If (Qt_4_7_1 -)
    static int timeout();
%End
};

%End
%If (Qt_5_0_0 -)

class QGestureEvent : QEvent
{
%TypeHeaderCode
#include <qgesture.h>
%End

public:
    explicit QGestureEvent(const QList<QGesture*> &gestures);
    virtual ~QGestureEvent();
    QList<QGesture*> gestures() const;
    QGesture *gesture(Qt::GestureType type) const;
    QList<QGesture*> activeGestures() const;
    QList<QGesture*> canceledGestures() const;
    void setAccepted(bool accepted);
    bool isAccepted() const;
    void accept();
    void ignore();
    void setAccepted(QGesture *, bool);
    void accept(QGesture *);
    void ignore(QGesture *);
    bool isAccepted(QGesture *) const;
    void setAccepted(Qt::GestureType, bool);
    void accept(Qt::GestureType);
    void ignore(Qt::GestureType);
    bool isAccepted(Qt::GestureType) const;
    QWidget *widget() const;
    QPointF mapToGraphicsScene(const QPointF &gesturePoint) const;
};

%End
