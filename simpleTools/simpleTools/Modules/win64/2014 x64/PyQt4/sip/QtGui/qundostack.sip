// qundostack.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_2_0 -)

class QUndoCommand /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qundostack.h>
%End

public:
    explicit QUndoCommand(QUndoCommand *parent /TransferThis/ = 0);
    QUndoCommand(const QString &text, QUndoCommand *parent /TransferThis/ = 0);
    virtual ~QUndoCommand();
    virtual int id() const;
    virtual bool mergeWith(const QUndoCommand *other);
    virtual void redo();
    void setText(const QString &text);
    QString text() const;
    virtual void undo();
%If (Qt_4_4_0 -)
    int childCount() const;
%End
%If (Qt_4_4_0 -)
    const QUndoCommand *child(int index) const;
%End
%If (Qt_4_8_0 -)
    QString actionText() const;
%End

private:
    QUndoCommand(const QUndoCommand &);
};

%End
%If (Qt_4_2_0 -)

class QUndoStack : QObject
{
%TypeHeaderCode
#include <qundostack.h>
%End

public:
    explicit QUndoStack(QObject *parent /TransferThis/ = 0);
    virtual ~QUndoStack();
    void clear();
    void push(QUndoCommand *cmd /Transfer/);
    bool canUndo() const;
    bool canRedo() const;
    QString undoText() const;
    QString redoText() const;
    int count() const /__len__/;
    int index() const;
    QString text(int idx) const;
    QAction *createUndoAction(QObject *parent /TransferThis/, const QString &prefix /DocValue="Py_v3:''"/ = QString()) const /Factory/;
    QAction *createRedoAction(QObject *parent /TransferThis/, const QString &prefix /DocValue="Py_v3:''"/ = QString()) const /Factory/;
    bool isActive() const;
    bool isClean() const;
    int cleanIndex() const;
    void beginMacro(const QString &text);
    void endMacro();

public slots:
    void redo();
    void setActive(bool active = true);
    void setClean();
    void setIndex(int idx);
    void undo();

signals:
    void canRedoChanged(bool canRedo);
    void canUndoChanged(bool canUndo);
    void cleanChanged(bool clean);
    void indexChanged(int idx);
    void redoTextChanged(const QString &redoText);
    void undoTextChanged(const QString &undoText);

public:
%If (Qt_4_3_0 -)
    void setUndoLimit(int limit);
%End
%If (Qt_4_3_0 -)
    int undoLimit() const;
%End
%If (Qt_4_4_0 -)
    const QUndoCommand *command(int index) const;
%End

private:
    QUndoStack(const QUndoStack &);
};

%End
