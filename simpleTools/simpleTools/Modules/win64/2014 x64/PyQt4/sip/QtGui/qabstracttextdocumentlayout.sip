// qabstracttextdocumentlayout.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAbstractTextDocumentLayout : QObject
{
%TypeHeaderCode
#include <qabstracttextdocumentlayout.h>
%End

public:
    explicit QAbstractTextDocumentLayout(QTextDocument *doc);
    virtual ~QAbstractTextDocumentLayout();

    struct Selection
    {
%TypeHeaderCode
#include <qabstracttextdocumentlayout.h>
%End

        QTextCursor cursor;
        QTextCharFormat format;
    };

    struct PaintContext
    {
%TypeHeaderCode
#include <qabstracttextdocumentlayout.h>
%End

        PaintContext();
        int cursorPosition;
        QPalette palette;
        QRectF clip;
        QVector<QAbstractTextDocumentLayout::Selection> selections;
    };

    virtual void draw(QPainter *painter, const QAbstractTextDocumentLayout::PaintContext &context) = 0;
    virtual int hitTest(const QPointF &point, Qt::HitTestAccuracy accuracy) const = 0;
    QString anchorAt(const QPointF &pos) const;
    virtual int pageCount() const = 0;
    virtual QSizeF documentSize() const = 0;
    virtual QRectF frameBoundingRect(QTextFrame *frame) const = 0;
    virtual QRectF blockBoundingRect(const QTextBlock &block) const = 0;
    void setPaintDevice(QPaintDevice *device);
    QPaintDevice *paintDevice() const;
    QTextDocument *document() const;
    void registerHandler(int objectType, QObject *component /KeepReference/);
    QTextObjectInterface *handlerForObject(int objectType) const;

signals:
    void update(const QRectF &rect = QRectF(0.0, 0.0, 1.0e+9, 1.0e+9));
    void documentSizeChanged(const QSizeF &newSize);
    void pageCountChanged(int newPages);
%If (Qt_4_4_0 -)
    void updateBlock(const QTextBlock &block);
%End

protected:
    virtual void documentChanged(int from, int charsRemoved, int charsAdded) = 0;
    virtual void resizeInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &format);
    virtual void positionInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &format);
    virtual void drawInlineObject(QPainter *painter, const QRectF &rect, QTextInlineObject object, int posInDocument, const QTextFormat &format);
    QTextCharFormat format(int pos);
};

class QTextObjectInterface
{
%TypeHeaderCode
#include <qabstracttextdocumentlayout.h>
%End

public:
    virtual ~QTextObjectInterface();
    virtual QSizeF intrinsicSize(QTextDocument *doc, int posInDocument, const QTextFormat &format) = 0;
    virtual void drawObject(QPainter *painter, const QRectF &rect, QTextDocument *doc, int posInDocument, const QTextFormat &format) = 0;
};
