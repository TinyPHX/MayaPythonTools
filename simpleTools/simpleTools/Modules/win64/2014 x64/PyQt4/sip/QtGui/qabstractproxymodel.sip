// qabstractproxymodel.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAbstractProxyModel : QAbstractItemModel
{
%TypeHeaderCode
#include <qabstractproxymodel.h>
%End

public:
%If (Qt_5_0_0 -)
    explicit QAbstractProxyModel(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QAbstractProxyModel(QObject *parent /TransferThis/ = 0);
%End
    virtual ~QAbstractProxyModel();
    virtual void setSourceModel(QAbstractItemModel *sourceModel /KeepReference/);
    QAbstractItemModel *sourceModel() const;
    virtual QModelIndex mapToSource(const QModelIndex &proxyIndex) const = 0;
    virtual QModelIndex mapFromSource(const QModelIndex &sourceIndex) const = 0;
    virtual QItemSelection mapSelectionToSource(const QItemSelection &selection) const;
    virtual QItemSelection mapSelectionFromSource(const QItemSelection &selection) const;
    virtual bool submit();
    virtual void revert();
%If (Qt_4_4_0 -)
    virtual QVariant data(const QModelIndex &proxyIndex, int role = Qt::DisplayRole) const;
%End
%If (Qt_4_4_0 -)
    virtual bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
%End
%If (Qt_4_2_0 -)
    virtual QVariant headerData(int section, Qt::Orientation orientation, int role) const;
%End
%If (Qt_4_4_0 -)
    virtual bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role = Qt::EditRole);
%End
%If (Qt_4_3_0 -)
    virtual QMap<int, QVariant> itemData(const QModelIndex &index) const /DocType="Py_v3:dict-of-int-object;dict-of-int-QVariant"/;
%End
%If (Qt_4_2_0 -)
    virtual Qt::ItemFlags flags(const QModelIndex &index) const;
%End
%If (Qt_4_8_0 -)
    virtual bool setItemData(const QModelIndex &index, const QMap<int, QVariant> &roles /DocType="Py_v3:dict-of-int-object;dict-of-int-QVariant"/);
%End
%If (Qt_4_8_0 -)
    virtual QModelIndex buddy(const QModelIndex &index) const;
%End
%If (Qt_4_8_0 -)
    virtual bool canFetchMore(const QModelIndex &parent) const;
%End
%If (Qt_4_8_0 -)
    virtual void fetchMore(const QModelIndex &parent);
%End
%If (Qt_4_8_0 -)
    virtual void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);
%End
%If (Qt_4_8_0 -)
    virtual QSize span(const QModelIndex &index) const;
%End
%If (Qt_4_8_0 -)
    virtual bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
%End
%If (Qt_4_8_0 -)
    virtual QMimeData *mimeData(const QModelIndexList &indexes) const /TransferBack/;
%End
%If (Qt_4_8_0 -)
    virtual QStringList mimeTypes() const;
%End
%If (Qt_4_8_0 -)
    virtual Qt::DropActions supportedDropActions() const;
%End
%If (Qt_5_0_0 -)
    virtual QModelIndex sibling(int row, int column, const QModelIndex &idx) const;
%End

signals:
%If (Qt_5_0_0 -)
    void sourceModelChanged();
%End

private:
    QAbstractProxyModel(const QAbstractProxyModel &);
};
