// qmatrix.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qmatrix.h>
%End

class QMatrix
{
%TypeHeaderCode
#include <qmatrix.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"dddddd", sipCpp->m11(), sipCpp->m12(), sipCpp->m21(), sipCpp->m22(), sipCpp->dx(), sipCpp->dy());
%End

public:
    QMatrix();
    QMatrix(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy);
    QMatrix(const QMatrix &matrix);
    void setMatrix(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy);
    qreal m11() const;
    qreal m12() const;
    qreal m21() const;
    qreal m22() const;
    qreal dx() const;
    qreal dy() const;
    void map(int x /Constrained/, int y /Constrained/, int *tx, int *ty) const;
    void map(qreal x, qreal y, qreal *tx, qreal *ty) const;
    QRect mapRect(const QRect &) const;
    QRectF mapRect(const QRectF &) const;
    QPoint map(const QPoint &p) const;
    QPointF map(const QPointF &p) const;
    QLine map(const QLine &l) const;
    QLineF map(const QLineF &l) const;
    QPolygonF map(const QPolygonF &a) const;
    QPolygon map(const QPolygon &a) const;
    QRegion map(const QRegion &r) const;
    QPainterPath map(const QPainterPath &p) const;
    QPolygon mapToPolygon(const QRect &r) const;
    void reset();
    QMatrix &translate(qreal dx, qreal dy);
    QMatrix &scale(qreal sx, qreal sy);
    QMatrix &shear(qreal sh, qreal sv);
    QMatrix &rotate(qreal a);
    bool isInvertible() const;
%If (- Qt_5_0_0)
    qreal det() const;
%End
    QMatrix inverted(bool *invertible = 0) const;
    bool operator==(const QMatrix &) const;
    bool operator!=(const QMatrix &) const;
    QMatrix &operator*=(const QMatrix &);
    QMatrix operator*(const QMatrix &o) const;
    bool isIdentity() const;
%If (Qt_4_6_0 -)
    qreal determinant() const;
%End
};

QPoint operator*(const QPoint &p, const QMatrix &m);
QPointF operator*(const QPointF &p, const QMatrix &m);
QLineF operator*(const QLineF &l, const QMatrix &m);
QLine operator*(const QLine &l, const QMatrix &m);
QPolygon operator*(const QPolygon &a, const QMatrix &m);
QPolygonF operator*(const QPolygonF &a, const QMatrix &m);
QRegion operator*(const QRegion &r, const QMatrix &m);
QPainterPath operator*(const QPainterPath &p, const QMatrix &m);
QDataStream &operator<<(QDataStream &, const QMatrix & /Constrained/);
QDataStream &operator>>(QDataStream &, QMatrix & /Constrained/);
%If (Qt_4_6_0 -)
bool qFuzzyCompare(const QMatrix &m1, const QMatrix &m2);
%End
