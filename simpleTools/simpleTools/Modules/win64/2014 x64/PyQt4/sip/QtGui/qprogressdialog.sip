// qprogressdialog.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QProgressDialog : QDialog
{
%TypeHeaderCode
#include <qprogressdialog.h>
%End

public:
%If (Qt_4_2_0 -)
    QProgressDialog(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QProgressDialog(QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
%End
%If (Qt_4_2_0 -)
    QProgressDialog(const QString &labelText, const QString &cancelButtonText, int minimum, int maximum, QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QProgressDialog(const QString &labelText, const QString &cancelButtonText, int minimum, int maximum, QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
%End
    virtual ~QProgressDialog();
    void setLabel(QLabel *label /Transfer/);
    void setCancelButton(QPushButton *button /Transfer/);
    void setBar(QProgressBar *bar /Transfer/);
    bool wasCanceled() const;
    int minimum() const;
    int maximum() const;
    void setRange(int minimum, int maximum);
    int value() const;
    virtual QSize sizeHint() const;
    QString labelText() const;
    int minimumDuration() const;
    void setAutoReset(bool b);
    bool autoReset() const;
    void setAutoClose(bool b);
    bool autoClose() const;

public slots:
    void cancel();
    void reset();
    void setMaximum(int maximum);
    void setMinimum(int minimum);
    void setValue(int progress);
    void setLabelText(const QString &);
    void setCancelButtonText(const QString &);
    void setMinimumDuration(int ms);

signals:
    void canceled();

protected:
    virtual void resizeEvent(QResizeEvent *);
    virtual void closeEvent(QCloseEvent *);
    virtual void changeEvent(QEvent *);
    virtual void showEvent(QShowEvent *e);
    void forceShow();

public:
%If (Qt_4_5_0 -)
    void open();
%End
%If (Qt_4_5_0 -)
    void open(SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member) [void (QObject *receiver, const char *member)];
%End

private:
    QProgressDialog(const QProgressDialog &);
};
