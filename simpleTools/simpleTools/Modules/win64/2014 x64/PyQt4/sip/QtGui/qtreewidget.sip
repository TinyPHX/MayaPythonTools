// qtreewidget.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qtreewidget.h>
%End

class QTreeWidgetItem /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qtreewidget.h>
%End

public:
%If (Qt_4_2_0 -)

    enum ItemType
    {
        Type,
        UserType,
    };

%End
%If (- Qt_4_2_0)

    enum
    {
        Type,
        UserType,
    };

%End
%If (Qt_4_5_0 -)
    explicit QTreeWidgetItem(int type = Type);
%End
%If (- Qt_4_5_0)
    QTreeWidgetItem(int type = Type);
%End
    QTreeWidgetItem(const QStringList &strings, int type = Type);
    QTreeWidgetItem(QTreeWidget *parent /TransferThis/, int type = Type);
    QTreeWidgetItem(QTreeWidget *parent /TransferThis/, const QStringList &strings, int type = Type);
    QTreeWidgetItem(QTreeWidget *parent /TransferThis/, QTreeWidgetItem *preceding, int type = Type);
    QTreeWidgetItem(QTreeWidgetItem *parent /TransferThis/, int type = Type);
    QTreeWidgetItem(QTreeWidgetItem *parent /TransferThis/, const QStringList &strings, int type = Type);
    QTreeWidgetItem(QTreeWidgetItem *parent /TransferThis/, QTreeWidgetItem *preceding, int type = Type);
    QTreeWidgetItem(const QTreeWidgetItem &other);
    virtual ~QTreeWidgetItem();
    virtual QTreeWidgetItem *clone() const /Factory/;
    QTreeWidget *treeWidget() const;
    Qt::ItemFlags flags() const;
    QString text(int column) const;
    QIcon icon(int column) const;
    QString statusTip(int column) const;
%If (PyQt_ToolTip)
    QString toolTip(int column) const;
%End
%If (PyQt_WhatsThis)
    QString whatsThis(int column) const;
%End
    QFont font(int column) const;
    int textAlignment(int column) const;
    void setTextAlignment(int column, int alignment);
    QColor backgroundColor(int column) const;
    void setBackgroundColor(int column, const QColor &color);
    QColor textColor(int column) const;
    void setTextColor(int column, const QColor &color);
    Qt::CheckState checkState(int column) const;
    void setCheckState(int column, Qt::CheckState state);
    virtual QVariant data(int column, int role) const;
    virtual void setData(int column, int role, const QVariant &value);
    virtual bool operator<(const QTreeWidgetItem &other /NoCopy/) const;
    virtual void read(QDataStream &in) /ReleaseGIL/;
    virtual void write(QDataStream &out) const /ReleaseGIL/;
    QTreeWidgetItem *parent() const;
    QTreeWidgetItem *child(int index) const;
    int childCount() const;
    int columnCount() const;
    void addChild(QTreeWidgetItem *child /Transfer/);
    void insertChild(int index, QTreeWidgetItem *child /Transfer/);
    QTreeWidgetItem *takeChild(int index) /TransferBack/;
    int type() const;
    void setFlags(Qt::ItemFlags aflags);
    void setText(int column, const QString &atext);
    void setIcon(int column, const QIcon &aicon);
    void setStatusTip(int column, const QString &astatusTip);
%If (PyQt_ToolTip)
    void setToolTip(int column, const QString &atoolTip);
%End
%If (PyQt_WhatsThis)
    void setWhatsThis(int column, const QString &awhatsThis);
%End
    void setFont(int column, const QFont &afont);
    int indexOfChild(QTreeWidgetItem *achild) const;
    QSize sizeHint(int column) const;
    void setSizeHint(int column, const QSize &size);
    void addChildren(const QList<QTreeWidgetItem*> &children /Transfer/);
    void insertChildren(int index, const QList<QTreeWidgetItem*> &children /Transfer/);
    QList<QTreeWidgetItem*> takeChildren() /TransferBack/;
%If (Qt_4_2_0 -)
    QBrush background(int column) const;
%End
%If (Qt_4_2_0 -)
    void setBackground(int column, const QBrush &brush);
%End
%If (Qt_4_2_0 -)
    QBrush foreground(int column) const;
%End
%If (Qt_4_2_0 -)
    void setForeground(int column, const QBrush &brush);
%End
%If (Qt_4_2_0 -)
    void sortChildren(int column, Qt::SortOrder order);
%End
%If (Qt_4_2_0 -)
    void setSelected(bool aselect);
%End
%If (Qt_4_2_0 -)
    bool isSelected() const;
%End
%If (Qt_4_2_0 -)
    void setHidden(bool ahide);
%End
%If (Qt_4_2_0 -)
    bool isHidden() const;
%End
%If (Qt_4_2_0 -)
    void setExpanded(bool aexpand);
%End
%If (Qt_4_2_0 -)
    bool isExpanded() const;
%End
%If (Qt_4_3_0 -)

    enum ChildIndicatorPolicy
    {
        ShowIndicator,
        DontShowIndicator,
        DontShowIndicatorWhenChildless,
    };

%End
%If (Qt_4_3_0 -)
    void setChildIndicatorPolicy(QTreeWidgetItem::ChildIndicatorPolicy policy);
%End
%If (Qt_4_3_0 -)
    QTreeWidgetItem::ChildIndicatorPolicy childIndicatorPolicy() const;
%End
%If (Qt_4_3_0 -)
    void removeChild(QTreeWidgetItem *child /TransferBack/);
%End
%If (Qt_4_3_0 -)
    void setFirstColumnSpanned(bool aspan);
%End
%If (Qt_4_3_0 -)
    bool isFirstColumnSpanned() const;
%End
%If (Qt_4_3_0 -)
    void setDisabled(bool disabled);
%End
%If (Qt_4_3_0 -)
    bool isDisabled() const;
%End

protected:
%If (Qt_4_5_0 -)
    void emitDataChanged();
%End

private:
    QTreeWidgetItem &operator=(const QTreeWidgetItem &);
};

QDataStream &operator<<(QDataStream &out, const QTreeWidgetItem &item /Constrained/);
QDataStream &operator>>(QDataStream &in, QTreeWidgetItem &item /Constrained/);

class QTreeWidget : QTreeView
{
%TypeHeaderCode
#include <qtreewidget.h>
%End

public:
    explicit QTreeWidget(QWidget *parent /TransferThis/ = 0);
    virtual ~QTreeWidget();
    int columnCount() const;
    void setColumnCount(int columns);
    QTreeWidgetItem *topLevelItem(int index) const;
    int topLevelItemCount() const;
    void insertTopLevelItem(int index, QTreeWidgetItem *item /Transfer/);
    void addTopLevelItem(QTreeWidgetItem *item /Transfer/);
    QTreeWidgetItem *takeTopLevelItem(int index) /TransferBack/;
%If (Qt_4_2_0 -)
    int indexOfTopLevelItem(QTreeWidgetItem *item) const;
%End
%If (- Qt_4_2_0)
    int indexOfTopLevelItem(QTreeWidgetItem *item);
%End
    void insertTopLevelItems(int index, const QList<QTreeWidgetItem*> &items /Transfer/);
    void addTopLevelItems(const QList<QTreeWidgetItem*> &items /Transfer/);
    QTreeWidgetItem *headerItem() const;
    void setHeaderItem(QTreeWidgetItem *item /Transfer/);
    void setHeaderLabels(const QStringList &labels);
    QTreeWidgetItem *currentItem() const;
    int currentColumn() const;
    void setCurrentItem(QTreeWidgetItem *item);
    void setCurrentItem(QTreeWidgetItem *item, int column);
%If (Qt_4_4_0 -)
    void setCurrentItem(QTreeWidgetItem *item, int column, QFlags<QItemSelectionModel::SelectionFlag> command);
%End
    QTreeWidgetItem *itemAt(const QPoint &p) const;
    QTreeWidgetItem *itemAt(int ax, int ay) const;
    QRect visualItemRect(const QTreeWidgetItem *item) const;
    int sortColumn() const;
    void sortItems(int column, Qt::SortOrder order);
%If (- Qt_5_0_0)
    void setSortingEnabled(bool enable);
%End
%If (- Qt_5_0_0)
    bool isSortingEnabled() const;
%End
    void editItem(QTreeWidgetItem *item, int column = 0);
    void openPersistentEditor(QTreeWidgetItem *item, int column = 0);
    void closePersistentEditor(QTreeWidgetItem *item, int column = 0);
    QWidget *itemWidget(QTreeWidgetItem *item, int column) const;
    void setItemWidget(QTreeWidgetItem *item, int column, QWidget *widget /Transfer/);
%MethodCode
        // We have to break the association with any existing widget.  Note that I'm
        // not sure this is really necessary as it should get tidied up when Qt
        // destroys any current widget, except (possibly) when the widget wasn't
        // created from PyQt.  See also removeItemWidget(), QListWidget and
        // QTableWidget.
        QWidget *w = sipCpp->itemWidget(a0, a1);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setItemWidget(a0, a1, a2);
        Py_END_ALLOW_THREADS
%End

    bool isItemSelected(const QTreeWidgetItem *item) const;
    void setItemSelected(const QTreeWidgetItem *item, bool select);
    QList<QTreeWidgetItem*> selectedItems() const;
    QList<QTreeWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags, int column = 0) const;
    bool isItemHidden(const QTreeWidgetItem *item) const;
    void setItemHidden(const QTreeWidgetItem *item, bool hide);
    bool isItemExpanded(const QTreeWidgetItem *item) const;
    void setItemExpanded(const QTreeWidgetItem *item, bool expand);

public slots:
    void scrollToItem(const QTreeWidgetItem *item, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    void expandItem(const QTreeWidgetItem *item);
    void collapseItem(const QTreeWidgetItem *item);
    void clear();

signals:
    void itemPressed(QTreeWidgetItem *item, int column);
    void itemClicked(QTreeWidgetItem *item, int column);
    void itemDoubleClicked(QTreeWidgetItem *item, int column);
    void itemActivated(QTreeWidgetItem *item, int column);
    void itemEntered(QTreeWidgetItem *item, int column);
    void itemChanged(QTreeWidgetItem *item, int column);
    void itemExpanded(QTreeWidgetItem *item);
    void itemCollapsed(QTreeWidgetItem *item);
    void currentItemChanged(QTreeWidgetItem *current, QTreeWidgetItem *previous);
    void itemSelectionChanged();

protected:
    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QList<QTreeWidgetItem*> items) const /TransferBack/;
    virtual bool dropMimeData(QTreeWidgetItem *parent, int index, const QMimeData *data, Qt::DropAction action);
    virtual Qt::DropActions supportedDropActions() const;
    QList<QTreeWidgetItem*> items(const QMimeData *data) const;
    QModelIndex indexFromItem(QTreeWidgetItem *item, int column = 0) const;
    QTreeWidgetItem *itemFromIndex(const QModelIndex &index) const;
    virtual bool event(QEvent *e);
%If (Qt_4_2_0 -)
    virtual void dropEvent(QDropEvent *event);
%End

public:
%If (Qt_4_2_0 -)
    QTreeWidgetItem *invisibleRootItem() const;
%End
%If (Qt_4_2_0 -)
    void setHeaderLabel(const QString &alabel);
%End
%If (Qt_4_3_0 -)
    bool isFirstItemColumnSpanned(const QTreeWidgetItem *item) const;
%End
%If (Qt_4_3_0 -)
    void setFirstItemColumnSpanned(const QTreeWidgetItem *item, bool span);
%End
%If (Qt_4_3_0 -)
    QTreeWidgetItem *itemAbove(const QTreeWidgetItem *item) const;
%End
%If (Qt_4_3_0 -)
    QTreeWidgetItem *itemBelow(const QTreeWidgetItem *item) const;
%End
%If (Qt_4_3_0 -)
    void removeItemWidget(QTreeWidgetItem *item, int column);
%MethodCode
        // We have to break the association with any existing widget.
        QWidget *w = sipCpp->itemWidget(a0, a1);
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferTo(wo, 0);
        }
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->removeItemWidget(a0, a1);
        Py_END_ALLOW_THREADS
%End

%End
%If (Qt_4_5_0 -)
    virtual void setSelectionModel(QItemSelectionModel *selectionModel /KeepReference/);
%End

private:
    virtual void setModel(QAbstractItemModel *model /KeepReference/);
    QTreeWidget(const QTreeWidget &);
};
