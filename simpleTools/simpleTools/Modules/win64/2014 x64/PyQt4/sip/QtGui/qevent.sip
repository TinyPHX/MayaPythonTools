// qevent.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qevent.h>
%End

class QInputEvent : QEvent /NoDefaultCtors/
{
%TypeHeaderCode
#include <qevent.h>
%End

%ConvertToSubClassCode
    switch (sipCpp->type())
    {
    case QEvent::ActionAdded:
    case QEvent::ActionChanged:
    case QEvent::ActionRemoved:
        sipType = sipType_QActionEvent;
        break;
    
    case QEvent::Close:
        sipType = sipType_QCloseEvent;
        break;
    
    case QEvent::ContextMenu:
        sipType = sipType_QContextMenuEvent;
        break;
    
    case QEvent::DragEnter:
        sipType = sipType_QDragEnterEvent;
        break;
    
    case QEvent::DragLeave:
        sipType = sipType_QDragLeaveEvent;
        break;
    
    case QEvent::DragMove:
        sipType = sipType_QDragMoveEvent;
        break;
    
    case QEvent::Drop:
        sipType = sipType_QDropEvent;
        break;
    
    #if QT_VERSION >= 0x050000
    case QEvent::Enter:
        sipType = sipType_QEnterEvent;
        break;
    #endif
    
    case QEvent::FileOpen:
        sipType = sipType_QFileOpenEvent;
        break;
    
    case QEvent::FocusIn:
    case QEvent::FocusOut:
        sipType = sipType_QFocusEvent;
        break;
    
    case QEvent::Hide:
        sipType = sipType_QHideEvent;
        break;
    
    case QEvent::HoverEnter:
    case QEvent::HoverLeave:
    case QEvent::HoverMove:
        sipType = sipType_QHoverEvent;
        break;
    
    case QEvent::IconDrag:
        sipType = sipType_QIconDragEvent;
        break;
    
    case QEvent::InputMethod:
        sipType = sipType_QInputMethodEvent;
        break;
    
    case QEvent::KeyPress:
    case QEvent::KeyRelease:
    case QEvent::ShortcutOverride:
        sipType = sipType_QKeyEvent;
        break;
    
    case QEvent::MouseButtonDblClick:
    case QEvent::MouseButtonPress:
    case QEvent::MouseButtonRelease:
    case QEvent::MouseMove:
        sipType = sipType_QMouseEvent;
        break;
    
    case QEvent::Move:
        sipType = sipType_QMoveEvent;
        break;
    
    case QEvent::Paint:
        sipType = sipType_QPaintEvent;
        break;
    
    case QEvent::Resize:
        sipType = sipType_QResizeEvent;
        break;
    
    case QEvent::Shortcut:
        sipType = sipType_QShortcutEvent;
        break;
    
    case QEvent::Show:
        sipType = sipType_QShowEvent;
        break;
    
    case QEvent::StatusTip:
        sipType = sipType_QStatusTipEvent;
        break;
    
    case QEvent::TabletMove:
    case QEvent::TabletPress:
    case QEvent::TabletRelease:
    #if QT_VERSION >= 0x040200
    case QEvent::TabletEnterProximity:
    case QEvent::TabletLeaveProximity:
    #endif
        sipType = sipType_QTabletEvent;
        break;
    
    case QEvent::ToolTip:
    case QEvent::WhatsThis:
        sipType = sipType_QHelpEvent;
        break;
    
    case QEvent::WhatsThisClicked:
        sipType = sipType_QWhatsThisClickedEvent;
        break;
    
    case QEvent::Wheel:
        sipType = sipType_QWheelEvent;
        break;
    
    case QEvent::WindowStateChange:
        sipType = sipType_QWindowStateChangeEvent;
        break;
    
    #if QT_VERSION >= 0x040200
    case QEvent::GraphicsSceneContextMenu:
        sipType = sipType_QGraphicsSceneContextMenuEvent;
        break;
    
    case QEvent::GraphicsSceneDragEnter:
    case QEvent::GraphicsSceneDragLeave:
    case QEvent::GraphicsSceneDragMove:
    case QEvent::GraphicsSceneDrop:
        sipType = sipType_QGraphicsSceneDragDropEvent;
        break;
    
    case QEvent::GraphicsSceneHelp:
        sipType = sipType_QGraphicsSceneHelpEvent;
        break;
    
    case QEvent::GraphicsSceneHoverEnter:
    case QEvent::GraphicsSceneHoverLeave:
    case QEvent::GraphicsSceneHoverMove:
        sipType = sipType_QGraphicsSceneHoverEvent;
        break;
    
    case QEvent::GraphicsSceneMouseDoubleClick:
    case QEvent::GraphicsSceneMouseMove:
    case QEvent::GraphicsSceneMousePress:
    case QEvent::GraphicsSceneMouseRelease:
        sipType = sipType_QGraphicsSceneMouseEvent;
        break;
    
    case QEvent::GraphicsSceneWheel:
        sipType = sipType_QGraphicsSceneWheelEvent;
        break;
    #endif
    
    #if QT_VERSION >= 0x040400
    case QEvent::GraphicsSceneMove:
        sipType = sipType_QGraphicsSceneMoveEvent;
        break;
    
    case QEvent::GraphicsSceneResize:
        sipType = sipType_QGraphicsSceneResizeEvent;
        break;
    #endif
    
    #if QT_VERSION >= 0x040600
    case QEvent::TouchBegin:
    case QEvent::TouchUpdate:
    case QEvent::TouchEnd:
        sipType = sipType_QTouchEvent;
        break;
    
    case QEvent::Gesture:
        sipType = sipType_QGestureEvent;
        break;
    #endif
    
    #if QT_VERSION >= 0x050000
    case QEvent::InputMethodQuery:
        sipType = sipType_QInputMethodQueryEvent;
        break;
    
    case QEvent::Expose:
        sipType = sipType_QExposeEvent;
        break;
    
    case QEvent::ScrollPrepare:
        sipType = sipType_QScrollPrepareEvent;
        break;
    
    case QEvent::Scroll:
        sipType = sipType_QScrollEvent;
        break;
    #endif
    
    default:
        sipType = 0;
    }
%End

public:
    virtual ~QInputEvent();
    Qt::KeyboardModifiers modifiers() const;
%If (Qt_5_0_0 -)
    ulong timestamp() const;
%End
%If (Qt_5_0_0 -)
    void setTimestamp(ulong atimestamp);
%End
};

class QMouseEvent : QInputEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
%If (Qt_5_0_0 -)
    QMouseEvent(QEvent::Type type, const QPointF &pos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
%End
%If (- Qt_5_0_0)
    QMouseEvent(QEvent::Type type, const QPoint &pos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
%End
%If (Qt_5_0_0 -)
    QMouseEvent(QEvent::Type type, const QPointF &pos, const QPointF &globalPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
%End
%If (- Qt_5_0_0)
    QMouseEvent(QEvent::Type type, const QPoint &pos, const QPoint &globalPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
%End
%If (Qt_5_0_0 -)
    QMouseEvent(QEvent::Type type, const QPointF &pos, const QPointF &windowPos, const QPointF &globalPos, Qt::MouseButton button, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
%End
    virtual ~QMouseEvent();
%If (Qt_5_0_0 -)
    QPoint pos() const;
%End
%If (- Qt_5_0_0)
    const QPoint &pos() const;
%End
%If (Qt_5_0_0 -)
    QPoint globalPos() const;
%End
%If (- Qt_5_0_0)
    const QPoint &globalPos() const;
%End
    int x() const;
    int y() const;
    int globalX() const;
    int globalY() const;
    Qt::MouseButton button() const;
    Qt::MouseButtons buttons() const;
%If (Qt_4_4_0 - Qt_5_0_0)
    bool hasExtendedInfo() const;
%End
%If (Qt_4_4_0 -)
%If (PyQt_Deprecated_5_0)
    QPointF posF() const;
%End
%End
%If (Qt_5_0_0 -)
    const QPointF &localPos() const;
%End
%If (Qt_5_0_0 -)
    const QPointF &windowPos() const;
%End
%If (Qt_5_0_0 -)
    const QPointF &screenPos() const;
%End
};

%If (Qt_5_0_0 -)

class QHoverEvent : QInputEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QHoverEvent(QEvent::Type type, const QPointF &pos, const QPointF &oldPos, Qt::KeyboardModifiers modifiers = Qt::NoModifier);
    virtual ~QHoverEvent();
    QPoint pos() const;
    QPoint oldPos() const;
    const QPointF &posF() const;
    const QPointF &oldPosF() const;
};

%End
%If (- Qt_5_0_0)

class QHoverEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QHoverEvent(QEvent::Type type, const QPoint &pos, const QPoint &oldPos);
    virtual ~QHoverEvent();
    const QPoint &pos() const;
    const QPoint &oldPos() const;
};

%End

class QWheelEvent : QInputEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
%If (Qt_5_0_0 -)
    QWheelEvent(const QPointF &pos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orientation = Qt::Vertical);
%End
%If (- Qt_5_0_0)
    QWheelEvent(const QPoint &pos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orientation = Qt::Vertical);
%End
%If (Qt_5_0_0 -)
    QWheelEvent(const QPointF &pos, const QPointF &globalPos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orientation = Qt::Vertical);
%End
%If (- Qt_5_0_0)
    QWheelEvent(const QPoint &pos, const QPoint &globalPos, int delta, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, Qt::Orientation orientation = Qt::Vertical);
%End
%If (Qt_5_0_0 -)
    QWheelEvent(const QPointF &pos, const QPointF &globalPos, QPoint pixelDelta, QPoint angleDelta, int qt4Delta, Qt::Orientation qt4Orientation, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
%End
    virtual ~QWheelEvent();
    int delta() const;
%If (Qt_5_0_0 -)
    QPoint pos() const;
%End
%If (- Qt_5_0_0)
    const QPoint &pos() const;
%End
%If (Qt_5_0_0 -)
    QPoint globalPos() const;
%End
%If (- Qt_5_0_0)
    const QPoint &globalPos() const;
%End
    int x() const;
    int y() const;
    int globalX() const;
    int globalY() const;
    Qt::MouseButtons buttons() const;
    Qt::Orientation orientation() const;
%If (Qt_5_0_0 -)
    QPoint pixelDelta() const;
%End
%If (Qt_5_0_0 -)
    QPoint angleDelta() const;
%End
%If (Qt_5_0_0 -)
    const QPointF &posF() const;
%End
%If (Qt_5_0_0 -)
    const QPointF &globalPosF() const;
%End
};

class QTabletEvent : QInputEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    enum TabletDevice
    {
        NoDevice,
        Puck,
        Stylus,
        Airbrush,
        FourDMouse,
        XFreeEraser,
        RotationStylus,
    };

    enum PointerType
    {
        UnknownPointer,
        Pen,
        Cursor,
        Eraser,
    };

%If (Qt_5_0_0 -)
    QTabletEvent(QEvent::Type t, const QPointF &pos, const QPointF &globalPos, int device, int pointerType, qreal pressure, int xTilt, int yTilt, qreal tangentialPressure, qreal rotation, int z, Qt::KeyboardModifiers keyState, qint64 uniqueID);
%End
%If (- Qt_5_0_0)
    QTabletEvent(QEvent::Type t, const QPoint &pos, const QPoint &globalPos, const QPointF &hiResGlobalPos, int device, int pointerType, qreal pressure, int xTilt, int yTilt, qreal tangentialPressure, qreal rotation, int z, Qt::KeyboardModifiers keyState, qint64 uniqueID);
%End
    virtual ~QTabletEvent();
%If (Qt_5_0_0 -)
    QPoint pos() const;
%End
%If (- Qt_5_0_0)
    const QPoint &pos() const;
%End
%If (Qt_5_0_0 -)
    QPoint globalPos() const;
%End
%If (- Qt_5_0_0)
    const QPoint &globalPos() const;
%End
%If (PyQt_Deprecated_5_0)
    const QPointF &hiResGlobalPos() const;
%End
    int x() const;
    int y() const;
    int globalX() const;
    int globalY() const;
    qreal hiResGlobalX() const;
    qreal hiResGlobalY() const;
    QTabletEvent::TabletDevice device() const;
    QTabletEvent::PointerType pointerType() const;
    qint64 uniqueId() const;
    qreal pressure() const;
    int z() const;
    qreal tangentialPressure() const;
    qreal rotation() const;
    int xTilt() const;
    int yTilt() const;
%If (Qt_5_0_0 -)
    const QPointF &posF() const;
%End
%If (Qt_5_0_0 -)
    const QPointF &globalPosF() const;
%End
};

class QKeyEvent : QInputEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
%If (Qt_5_0_0 -)
    QKeyEvent(QEvent::Type type, int key, Qt::KeyboardModifiers modifiers, quint32 nativeScanCode, quint32 nativeVirtualKey, quint32 nativeModifiers, const QString &text = QString(), bool autorep = false, ushort count = 1);
%End
    QKeyEvent(QEvent::Type type, int key, Qt::KeyboardModifiers modifiers, const QString &text /DocValue="Py_v3:''"/ = QString(), bool autorep = false, ushort count = 1);
    virtual ~QKeyEvent();
    int key() const;
    Qt::KeyboardModifiers modifiers() const;
    QString text() const;
    bool isAutoRepeat() const;
    int count() const /__len__/;
%If (Qt_4_2_0 -)
    bool matches(QKeySequence::StandardKey key) const;
%End
%If (Qt_4_2_0 -)
    quint32 nativeModifiers() const;
%End
%If (Qt_4_2_0 -)
    quint32 nativeScanCode() const;
%End
%If (Qt_4_2_0 -)
    quint32 nativeVirtualKey() const;
%End
};

class QFocusEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QFocusEvent(QEvent::Type type, Qt::FocusReason reason = Qt::OtherFocusReason);
    virtual ~QFocusEvent();
    bool gotFocus() const;
    bool lostFocus() const;
%If (Qt_4_2_0 -)
    Qt::FocusReason reason() const;
%End
%If (- Qt_4_2_0)
    Qt::FocusReason reason();
%End
};

class QPaintEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
%If (Qt_5_0_0 -)
    explicit QPaintEvent(const QRegion &paintRegion);
%End
%If (- Qt_5_0_0)
    QPaintEvent(const QRegion &paintRegion);
%End
%If (Qt_5_0_0 -)
    explicit QPaintEvent(const QRect &paintRect);
%End
%If (- Qt_5_0_0)
    QPaintEvent(const QRect &paintRect);
%End
    virtual ~QPaintEvent();
    const QRect &rect() const;
    const QRegion &region() const;
};

class QMoveEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QMoveEvent(const QPoint &pos, const QPoint &oldPos);
    virtual ~QMoveEvent();
    const QPoint &pos() const;
    const QPoint &oldPos() const;
};

class QResizeEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QResizeEvent(const QSize &size, const QSize &oldSize);
    virtual ~QResizeEvent();
    const QSize &size() const;
    const QSize &oldSize() const;
};

class QCloseEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QCloseEvent();
    virtual ~QCloseEvent();
};

class QIconDragEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QIconDragEvent();
    virtual ~QIconDragEvent();
};

class QShowEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QShowEvent();
    virtual ~QShowEvent();
};

class QHideEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QHideEvent();
    virtual ~QHideEvent();
};

class QContextMenuEvent : QInputEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    enum Reason
    {
        Mouse,
        Keyboard,
        Other,
    };

%If (Qt_4_4_0 -)
    QContextMenuEvent(QContextMenuEvent::Reason reason, const QPoint &pos, const QPoint &globalPos, Qt::KeyboardModifiers modifiers);
%End
    QContextMenuEvent(QContextMenuEvent::Reason reason, const QPoint &pos, const QPoint &globalPos);
    QContextMenuEvent(QContextMenuEvent::Reason reason, const QPoint &pos);
    virtual ~QContextMenuEvent();
    int x() const;
    int y() const;
    int globalX() const;
    int globalY() const;
    const QPoint &pos() const;
    const QPoint &globalPos() const;
    QContextMenuEvent::Reason reason() const;
};

class QInputMethodEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    enum AttributeType
    {
        TextFormat,
        Cursor,
        Language,
        Ruby,
%If (Qt_4_6_0 -)
        Selection,
%End
    };

    class Attribute
    {
%TypeHeaderCode
#include <qevent.h>
%End

    public:
        Attribute(QInputMethodEvent::AttributeType t, int s, int l, QVariant val);
        QInputMethodEvent::AttributeType type;
        int start;
        int length;
        QVariant value;
    };

    QInputMethodEvent();
    QInputMethodEvent(const QString &preeditText, const QList<QInputMethodEvent::Attribute> &attributes);
    QInputMethodEvent(const QInputMethodEvent &other);
    void setCommitString(const QString &commitString, int from = 0, int length = 0);
    const QList<QInputMethodEvent::Attribute> &attributes() const;
    const QString &preeditString() const;
    const QString &commitString() const;
    int replacementStart() const;
    int replacementLength() const;
};

%If (Qt_5_0_0 -)

class QInputMethodQueryEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    explicit QInputMethodQueryEvent(Qt::InputMethodQueries queries);
    virtual ~QInputMethodQueryEvent();
    Qt::InputMethodQueries queries() const;
    void setValue(Qt::InputMethodQuery query, const QVariant &value);
    QVariant value(Qt::InputMethodQuery query) const;
};

%End
%If (Qt_5_0_0 -)

class QDropEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QDropEvent(const QPointF &pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, QEvent::Type type = QEvent::Drop);
    virtual ~QDropEvent();
%If (Qt_5_0_0 -)
    QPoint pos() const;
%End
%If (- Qt_5_0_0)
    const QPoint pos() const;
%End
    const QPointF &posF() const;
    Qt::MouseButtons mouseButtons() const;
    Qt::KeyboardModifiers keyboardModifiers() const;
    Qt::DropActions possibleActions() const;
    Qt::DropAction proposedAction() const;
    void acceptProposedAction();
    Qt::DropAction dropAction() const;
    void setDropAction(Qt::DropAction action);
    QObject *source() const;
    const QMimeData *mimeData() const;
};

%End
%If (- Qt_5_0_0)

class QDropEvent : QEvent, QMimeSource
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QDropEvent(const QPoint &pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, QEvent::Type type = QEvent::Drop);
    virtual ~QDropEvent();
    const QPoint &pos() const;
    Qt::MouseButtons mouseButtons() const;
    Qt::KeyboardModifiers keyboardModifiers() const;
    Qt::DropActions possibleActions() const;
    Qt::DropAction proposedAction() const;
    void acceptProposedAction();
    Qt::DropAction dropAction() const;
    void setDropAction(Qt::DropAction action);
    QWidget *source() const;
    const QMimeData *mimeData() const;
    virtual const char *format(int n = 0) const;
    virtual QByteArray encodedData(const char *) const;
    virtual bool provides(const char *) const;
};

%End

class QDragMoveEvent : QDropEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QDragMoveEvent(const QPoint &pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers, QEvent::Type type = QEvent::DragMove);
    virtual ~QDragMoveEvent();
    QRect answerRect() const;
    void accept();
    void ignore();
    void accept(const QRect &r);
    void ignore(const QRect &r);
};

class QDragEnterEvent : QDragMoveEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QDragEnterEvent(const QPoint &pos, Qt::DropActions actions, const QMimeData *data, Qt::MouseButtons buttons, Qt::KeyboardModifiers modifiers);
    virtual ~QDragEnterEvent();
};

class QDragLeaveEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QDragLeaveEvent();
    virtual ~QDragLeaveEvent();
};

class QHelpEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QHelpEvent(QEvent::Type type, const QPoint &pos, const QPoint &globalPos);
    virtual ~QHelpEvent();
    int x() const;
    int y() const;
    int globalX() const;
    int globalY() const;
    const QPoint &pos() const;
    const QPoint &globalPos() const;
};

class QStatusTipEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
%If (Qt_5_0_0 -)
    explicit QStatusTipEvent(const QString &tip);
%End
%If (- Qt_5_0_0)
    QStatusTipEvent(const QString &tip);
%End
    virtual ~QStatusTipEvent();
    QString tip() const;
};

class QWhatsThisClickedEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
%If (Qt_5_0_0 -)
    explicit QWhatsThisClickedEvent(const QString &href);
%End
%If (- Qt_5_0_0)
    QWhatsThisClickedEvent(const QString &href);
%End
    virtual ~QWhatsThisClickedEvent();
    QString href() const;
};

class QActionEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QActionEvent(int type, QAction *action, QAction *before = 0);
    virtual ~QActionEvent();
    QAction *action() const;
    QAction *before() const;
};

class QFileOpenEvent : QEvent /NoDefaultCtors/
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    virtual ~QFileOpenEvent();
    QString file() const;
%If (Qt_4_6_0 -)
    QUrl url() const;
%End
%If (Qt_4_8_0 -)
    bool openFile(QFile &file, QFlags<QIODevice::OpenModeFlag> flags) const;
%End
};

class QShortcutEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QShortcutEvent(const QKeySequence &key, int id, bool ambiguous = false);
    virtual ~QShortcutEvent();
%If (Qt_4_2_0 -)
    bool isAmbiguous() const;
%End
%If (- Qt_4_2_0)
    bool isAmbiguous();
%End
%If (Qt_4_2_0 -)
    const QKeySequence &key() const;
%End
%If (- Qt_4_2_0)
    const QKeySequence &key();
%End
%If (Qt_4_2_0 -)
    int shortcutId() const;
%End
%If (- Qt_4_2_0)
    int shortcutId();
%End
};

class QWindowStateChangeEvent : QEvent /NoDefaultCtors/
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    virtual ~QWindowStateChangeEvent();
    Qt::WindowStates oldState() const;
};

%If (Qt_4_6_0 -)

class QTouchEvent : QInputEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    class TouchPoint /NoDefaultCtors/
    {
%TypeHeaderCode
#include <qevent.h>
%End

    public:
        int id() const;
        Qt::TouchPointState state() const;
%If (- Qt_5_0_0)
        bool isPrimary() const;
%End
        QPointF pos() const;
        QPointF startPos() const;
        QPointF lastPos() const;
        QPointF scenePos() const;
        QPointF startScenePos() const;
        QPointF lastScenePos() const;
        QPointF screenPos() const;
        QPointF startScreenPos() const;
        QPointF lastScreenPos() const;
        QPointF normalizedPos() const;
        QPointF startNormalizedPos() const;
        QPointF lastNormalizedPos() const;
        QRectF rect() const;
        QRectF sceneRect() const;
        QRectF screenRect() const;
        qreal pressure() const;
%If (Qt_5_0_0 -)

        enum InfoFlag
        {
            Pen,
        };

%End
%If (Qt_5_0_0 -)
        typedef QFlags<QTouchEvent::TouchPoint::InfoFlag> InfoFlags;
%End
%If (Qt_5_0_0 -)
        QVector2D velocity() const;
%End
%If (Qt_5_0_0 -)
        QFlags<QTouchEvent::TouchPoint::InfoFlag> flags() const;
%End
%If (Qt_5_0_0 -)
        QVector<QPointF> rawScreenPositions() const;
%End
    };

%If (PyQt_Deprecated_5_0)

    enum DeviceType
    {
        TouchScreen,
        TouchPad,
    };

%End
%If (Qt_5_0_0 -)
    QTouchEvent(QEvent::Type eventType, QTouchDevice *device = 0, Qt::KeyboardModifiers modifiers = Qt::NoModifier, Qt::TouchPointStates touchPointStates = 0, const QList<QTouchEvent::TouchPoint> &touchPoints = QList<QTouchEvent::TouchPoint>());
%End
%If (- Qt_5_0_0)
    QTouchEvent(QEvent::Type eventType, QTouchEvent::DeviceType deviceType = QTouchEvent::TouchScreen, Qt::KeyboardModifiers modifiers = Qt::NoModifier, Qt::TouchPointStates touchPointStates = 0, const QList<QTouchEvent::TouchPoint> &touchPoints = QList<QTouchEvent::TouchPoint>());
%End
    virtual ~QTouchEvent();
%If (Qt_5_0_0 -)
    QObject *target() const;
%End
%If (- Qt_5_0_0)
    QWidget *widget() const;
%End
%If (PyQt_Deprecated_5_0)
    QTouchEvent::DeviceType deviceType() const;
%End
    Qt::TouchPointStates touchPointStates() const;
    const QList<QTouchEvent::TouchPoint> &touchPoints() const;
%If (Qt_5_0_0 -)
    QTouchDevice *device() const;
%End
%If (Qt_5_0_0 -)
    void setDevice(QTouchDevice *adevice);
%End
};

%End
%If (Qt_5_0_0 -)
QFlags<QTouchEvent::TouchPoint::InfoFlag> operator|(QTouchEvent::TouchPoint::InfoFlag f1, QFlags<QTouchEvent::TouchPoint::InfoFlag> f2);
%End
%If (Qt_5_0_0 -)
QFlags<QTouchEvent::TouchPoint::InfoFlag> operator|(QTouchEvent::TouchPoint::InfoFlag f1, QTouchEvent::TouchPoint::InfoFlag f2);
%End
%If (Qt_4_6_0 - Qt_5_0_0)

class QGestureEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QGestureEvent(const QList<QGesture*> &gestures);
    virtual ~QGestureEvent();
    QList<QGesture*> gestures() const;
    QGesture *gesture(Qt::GestureType type) const;
    QList<QGesture*> activeGestures() const;
    QList<QGesture*> canceledGestures() const;
    void setAccepted(bool accepted);
    bool isAccepted() const;
    void accept();
    void ignore();
    void setAccepted(QGesture *, bool);
    void accept(QGesture *);
    void ignore(QGesture *);
    bool isAccepted(QGesture *) const;
    void setAccepted(Qt::GestureType, bool);
    void accept(Qt::GestureType);
    void ignore(Qt::GestureType);
    bool isAccepted(Qt::GestureType) const;
    QWidget *widget() const;
    QPointF mapToGraphicsScene(const QPointF &gesturePoint) const;
};

%End
%If (Qt_5_0_0 -)

class QExposeEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    explicit QExposeEvent(const QRegion &rgn);
    virtual ~QExposeEvent();
    const QRegion &region() const;
};

%End
%If (Qt_5_0_0 -)

class QScrollPrepareEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    explicit QScrollPrepareEvent(const QPointF &startPos);
    virtual ~QScrollPrepareEvent();
    QPointF startPos() const;
    QSizeF viewportSize() const;
    QRectF contentPosRange() const;
    QPointF contentPos() const;
    void setViewportSize(const QSizeF &size);
    void setContentPosRange(const QRectF &rect);
    void setContentPos(const QPointF &pos);
};

%End
%If (Qt_5_0_0 -)

class QScrollEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    enum ScrollState
    {
        ScrollStarted,
        ScrollUpdated,
        ScrollFinished,
    };

    QScrollEvent(const QPointF &contentPos, const QPointF &overshoot, QScrollEvent::ScrollState scrollState);
    virtual ~QScrollEvent();
    QPointF contentPos() const;
    QPointF overshootDistance() const;
    QScrollEvent::ScrollState scrollState() const;
};

%End
%If (Qt_4_2_0 -)
bool operator==(QKeyEvent *e, QKeySequence::StandardKey key);
%End
%If (Qt_4_2_0 -)
bool operator==(QKeySequence::StandardKey key, QKeyEvent *e);
%End
%If (Qt_5_0_0 -)

class QEnterEvent : QEvent
{
%TypeHeaderCode
#include <qevent.h>
%End

public:
    QEnterEvent(const QPointF &localPos, const QPointF &windowPos, const QPointF &screenPos);
    virtual ~QEnterEvent();
    QPoint pos() const;
    QPoint globalPos() const;
    int x() const;
    int y() const;
    int globalX() const;
    int globalY() const;
    const QPointF &localPos() const;
    const QPointF &windowPos() const;
    const QPointF &screenPos() const;
};

%End
