// qpixmapcache.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QPixmapCache
{
%TypeHeaderCode
#include <qpixmapcache.h>
%End

public:
%If (Qt_4_6_0 -)

    class Key
    {
%TypeHeaderCode
#include <qpixmapcache.h>
%End

    public:
        Key();
        Key(const QPixmapCache::Key &other);
        ~Key();
        bool operator==(const QPixmapCache::Key &key) const;
        bool operator!=(const QPixmapCache::Key &key) const;
    };

%End
    static int cacheLimit();
    static void clear();
    static QPixmap *find(const QString &key);
%If (- Qt_4_6_0)
    static bool find(const QString &key, QPixmap &);
%End
%If (Qt_4_6_0 -)
    static bool find(const QString &key, QPixmap *pixmap);
%End
%If (Qt_4_6_0 -)
    static bool find(const QPixmapCache::Key &key, QPixmap *pixmap);
%End
    static bool insert(const QString &key, const QPixmap &);
%If (Qt_4_6_0 -)
    static QPixmapCache::Key insert(const QPixmap &pixmap);
%End
    static void remove(const QString &key);
%If (Qt_4_6_0 -)
    static void remove(const QPixmapCache::Key &key);
%End
%If (Qt_4_6_0 -)
    static bool replace(const QPixmapCache::Key &key, const QPixmap &pixmap);
%End
    static void setCacheLimit(int);
};
