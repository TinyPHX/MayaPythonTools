// qdatawidgetmapper.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_2_0 -)

class QDataWidgetMapper : QObject
{
%TypeHeaderCode
#include <qdatawidgetmapper.h>
%End

public:
    enum SubmitPolicy
    {
        AutoSubmit,
        ManualSubmit,
    };

%If (Qt_5_0_0 -)
    explicit QDataWidgetMapper(QObject *parent /TransferThis/ = 0);
%End
%If (- Qt_5_0_0)
    QDataWidgetMapper(QObject *parent /TransferThis/ = 0);
%End
    virtual ~QDataWidgetMapper();
    void setModel(QAbstractItemModel *model /KeepReference/);
    QAbstractItemModel *model() const;
    void setItemDelegate(QAbstractItemDelegate *delegate /KeepReference/);
    QAbstractItemDelegate *itemDelegate() const;
    void setRootIndex(const QModelIndex &index);
    QModelIndex rootIndex() const;
    void setOrientation(Qt::Orientation aOrientation);
    Qt::Orientation orientation() const;
    void setSubmitPolicy(QDataWidgetMapper::SubmitPolicy policy);
    QDataWidgetMapper::SubmitPolicy submitPolicy() const;
    void addMapping(QWidget *widget, int section);
%If (Qt_4_3_0 -)
    void addMapping(QWidget *widget, int section, const QByteArray &propertyName);
%End
    void removeMapping(QWidget *widget);
%If (Qt_4_3_0 -)
    QByteArray mappedPropertyName(QWidget *widget) const;
%End
    int mappedSection(QWidget *widget) const;
    QWidget *mappedWidgetAt(int section) const;
    void clearMapping();
    int currentIndex() const;

public slots:
    void revert();
    virtual void setCurrentIndex(int index);
    void setCurrentModelIndex(const QModelIndex &index);
    bool submit();
    void toFirst();
    void toLast();
    void toNext();
    void toPrevious();

signals:
    void currentIndexChanged(int index);

private:
    QDataWidgetMapper(const QDataWidgetMapper &);
};

%End
