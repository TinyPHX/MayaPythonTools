// qshortcut.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QShortcut : QObject
{
%TypeHeaderCode
#include <qshortcut.h>
%End

public:
    explicit QShortcut(QWidget *parent /TransferThis/);
    QShortcut(const QKeySequence &key, QWidget *parent /TransferThis/, SIP_ANYSLOT member = 0, SIP_ANYSLOT ambiguousMember = 0, Qt::ShortcutContext context = Qt::WindowShortcut) [(const QKeySequence &key, QWidget *parent, const char *member = 0, const char *ambiguousMember = 0, Qt::ShortcutContext context = Qt::WindowShortcut)];
%MethodCode
        // Construct the shortcut without any connections.
        Py_BEGIN_ALLOW_THREADS
        sipCpp = new sipQShortcut(*a0, a1, 0, 0, a4);
        Py_END_ALLOW_THREADS
        
        if (a2Name || a2Callable)
        {
            void *rx2;
            const char *member2;
        
            // For convenience we use sipOwner from /TransferThis/ rather than
            // a1Wrapper from /GetWrapper/.
            rx2 = sipConvertRx(0, "()", (a2Callable ? a2Callable : (PyObject *)*sipOwner), a2Name, &member2, 0);
        
            if (rx2)
            {
                Py_BEGIN_ALLOW_THREADS
                QObject::connect(sipCpp, SIGNAL(activated()),
                                 reinterpret_cast<QObject *>(rx2), member2);
                Py_END_ALLOW_THREADS
            }
            else
                sipIsErr = 1;
        }
        
        if (a3Name || a3Callable)
        {
            void *rx3;
            const char *member3;
        
            // For convenience we use sipOwner from /TransferThis/ rather than
            // a1Wrapper from /GetWrapper/.
            rx3 = sipConvertRx(0, "()", (a3Callable ? a3Callable : (PyObject *)*sipOwner), a3Name, &member3, 0);
        
            if (rx3)
            {
                Py_BEGIN_ALLOW_THREADS
                QObject::connect(sipCpp, SIGNAL(activatedAmbiguously()),
                                 reinterpret_cast<QObject *>(rx3), member3);
                Py_END_ALLOW_THREADS
            }
            else
                sipIsErr = 1;
        }
        
        if (sipIsErr)
            delete sipCpp;
%End

    virtual ~QShortcut();
    void setKey(const QKeySequence &key);
    QKeySequence key() const;
    void setEnabled(bool enable);
    bool isEnabled() const;
    void setContext(Qt::ShortcutContext context);
%If (Qt_5_0_0 -)
    Qt::ShortcutContext context() const;
%End
%If (- Qt_5_0_0)
    Qt::ShortcutContext context();
%End
    void setWhatsThis(const QString &text);
    QString whatsThis() const;
    int id() const;
    QWidget *parentWidget() const;
%If (Qt_4_2_0 -)
    void setAutoRepeat(bool on);
%End
%If (Qt_4_2_0 -)
    bool autoRepeat() const;
%End

signals:
    void activated();
    void activatedAmbiguously();

protected:
    virtual bool event(QEvent *e);
};
