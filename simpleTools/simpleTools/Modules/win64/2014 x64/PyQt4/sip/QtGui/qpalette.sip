// qpalette.sip generated by MetaSIP on Fri Mar  1 21:46:00 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qpalette.h>
%End

class QPalette
{
%TypeHeaderCode
#include <qpalette.h>
%End

public:
    QPalette();
    QPalette(const QColor &button);
    QPalette(Qt::GlobalColor button);
    QPalette(const QColor &button, const QColor &background);
    QPalette(const QBrush &foreground, const QBrush &button, const QBrush &light, const QBrush &dark, const QBrush &mid, const QBrush &text, const QBrush &bright_text, const QBrush &base, const QBrush &background);
    QPalette(const QColor &foreground, const QColor &background, const QColor &light, const QColor &dark, const QColor &mid, const QColor &text, const QColor &base);
    QPalette(const QPalette &palette);
    QPalette(const QVariant &variant) /NoDerived/;
%MethodCode
        #if QT_VERSION >= 0x050000
        sipCpp = new QPalette(a0->value<QPalette>());
        #else
        sipCpp = new QPalette(qVariantValue<QPalette>(*a0));
        #endif
%End

    ~QPalette();

    enum ColorGroup
    {
        Active,
        Disabled,
        Inactive,
        NColorGroups,
        Current,
        All,
        Normal,
    };

    enum ColorRole
    {
        WindowText,
        Foreground,
        Button,
        Light,
        Midlight,
        Dark,
        Mid,
        Text,
        BrightText,
        ButtonText,
        Base,
        Window,
        Background,
        Shadow,
        Highlight,
        HighlightedText,
        Link,
        LinkVisited,
        AlternateBase,
%If (Qt_4_4_0 -)
        ToolTipBase,
%End
%If (Qt_4_4_0 -)
        ToolTipText,
%End
        NColorRoles,
        NoRole,
    };

    QPalette::ColorGroup currentColorGroup() const;
    void setCurrentColorGroup(QPalette::ColorGroup cg);
    const QColor &color(QPalette::ColorGroup cg, QPalette::ColorRole cr) const;
    const QBrush &brush(QPalette::ColorGroup cg, QPalette::ColorRole cr) const;
    void setBrush(QPalette::ColorGroup cg, QPalette::ColorRole cr, const QBrush &brush);
    void setColorGroup(QPalette::ColorGroup cr, const QBrush &foreground, const QBrush &button, const QBrush &light, const QBrush &dark, const QBrush &mid, const QBrush &text, const QBrush &bright_text, const QBrush &base, const QBrush &background);
    bool isEqual(QPalette::ColorGroup cr1, QPalette::ColorGroup cr2) const;
    const QColor &color(QPalette::ColorRole cr) const;
    const QBrush &brush(QPalette::ColorRole cr) const;
    const QBrush &foreground() const;
    const QBrush &windowText() const;
    const QBrush &button() const;
    const QBrush &light() const;
    const QBrush &dark() const;
    const QBrush &mid() const;
    const QBrush &text() const;
    const QBrush &base() const;
    const QBrush &alternateBase() const;
    const QBrush &window() const;
    const QBrush &background() const;
    const QBrush &midlight() const;
    const QBrush &brightText() const;
    const QBrush &buttonText() const;
    const QBrush &shadow() const;
    const QBrush &highlight() const;
    const QBrush &highlightedText() const;
    const QBrush &link() const;
    const QBrush &linkVisited() const;
%If (Qt_4_4_0 -)
    const QBrush &toolTipBase() const;
%End
%If (Qt_4_4_0 -)
    const QBrush &toolTipText() const;
%End
    bool operator==(const QPalette &p) const;
    bool operator!=(const QPalette &p) const;
    bool isCopyOf(const QPalette &p) const;
%If (PyQt_Deprecated_5_0)
    int serialNumber() const;
%End
    QPalette resolve(const QPalette &) const;
    uint resolve() const;
    void resolve(uint mask);
    void setColor(QPalette::ColorGroup acg, QPalette::ColorRole acr, const QColor &acolor);
    void setColor(QPalette::ColorRole acr, const QColor &acolor);
    void setBrush(QPalette::ColorRole acr, const QBrush &abrush);
%If (Qt_4_2_0 -)
    bool isBrushSet(QPalette::ColorGroup cg, QPalette::ColorRole cr) const;
%End
%If (Qt_4_3_0 -)
    qint64 cacheKey() const;
%End
%If (Qt_5_0_0 -)
    void swap(QPalette &other);
%End
};

QDataStream &operator<<(QDataStream &s, const QPalette &p /Constrained/);
QDataStream &operator>>(QDataStream &ds, QPalette &p /Constrained/);
