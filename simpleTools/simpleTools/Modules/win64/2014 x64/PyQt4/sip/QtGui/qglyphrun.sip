// qglyphrun.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_8_0 -)
%If (PyQt_RawFont)

class QGlyphRun
{
%TypeHeaderCode
#include <qglyphrun.h>
%End

public:
    QGlyphRun();
    QGlyphRun(const QGlyphRun &other);
    ~QGlyphRun();
    QRawFont rawFont() const;
    void setRawFont(const QRawFont &rawFont);
    QVector<unsigned int> glyphIndexes() const;
    void setGlyphIndexes(const QVector<unsigned int> &glyphIndexes);
    QVector<QPointF> positions() const;
    void setPositions(const QVector<QPointF> &positions);
    void clear();
    bool operator==(const QGlyphRun &other) const;
    bool operator!=(const QGlyphRun &other) const;
    void setOverline(bool overline);
    bool overline() const;
    void setUnderline(bool underline);
    bool underline() const;
    void setStrikeOut(bool strikeOut);
    bool strikeOut() const;
%If (Qt_5_0_0 -)

    enum GlyphRunFlag
    {
        Overline,
        Underline,
        StrikeOut,
        RightToLeft,
        SplitLigature,
    };

%End
%If (Qt_5_0_0 -)
    typedef QFlags<QGlyphRun::GlyphRunFlag> GlyphRunFlags;
%End
%If (Qt_5_0_0 -)
    void setRightToLeft(bool on);
%End
%If (Qt_5_0_0 -)
    bool isRightToLeft() const;
%End
%If (Qt_5_0_0 -)
    void setFlag(QGlyphRun::GlyphRunFlag flag, bool enabled = true);
%End
%If (Qt_5_0_0 -)
    void setFlags(QFlags<QGlyphRun::GlyphRunFlag> flags);
%End
%If (Qt_5_0_0 -)
    QFlags<QGlyphRun::GlyphRunFlag> flags() const;
%End
%If (Qt_5_0_0 -)
    void setBoundingRect(const QRectF &boundingRect);
%End
%If (Qt_5_0_0 -)
    QRectF boundingRect() const;
%End
%If (Qt_5_0_0 -)
    bool isEmpty() const;
%End
%If (Qt_5_0_0 -)
    void swap(QGlyphRun &other);
%End
};

%End
%End
