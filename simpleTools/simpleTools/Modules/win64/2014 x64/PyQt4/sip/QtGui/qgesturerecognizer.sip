// qgesturerecognizer.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)
%ModuleCode
#include <qgesturerecognizer.h>
%End
%End

%If (Qt_4_6_0 -)

class QGestureRecognizer /Supertype=sip.wrapper/
{
%TypeHeaderCode
#include <qgesturerecognizer.h>
%End

public:
    enum ResultFlag
    {
        Ignore,
        MayBeGesture,
        TriggerGesture,
        FinishGesture,
        CancelGesture,
        ConsumeEventHint,
    };

    typedef QFlags<QGestureRecognizer::ResultFlag> Result;
    QGestureRecognizer();
    virtual ~QGestureRecognizer();
    virtual QGesture *create(QObject *target) /Factory/;
    virtual QFlags<QGestureRecognizer::ResultFlag> recognize(QGesture *state, QObject *watched, QEvent *event) = 0;
    virtual void reset(QGesture *state);
    static Qt::GestureType registerRecognizer(QGestureRecognizer *recognizer /Transfer/);
    static void unregisterRecognizer(Qt::GestureType type);
};

%End
%If (Qt_4_6_0 -)
QFlags<QGestureRecognizer::ResultFlag> operator|(QGestureRecognizer::ResultFlag f1, QFlags<QGestureRecognizer::ResultFlag> f2);
%End
