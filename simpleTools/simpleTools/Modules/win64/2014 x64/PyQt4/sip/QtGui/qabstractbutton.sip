// qabstractbutton.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAbstractButton : QWidget
{
%TypeHeaderCode
#include <qabstractbutton.h>
%End

public:
    explicit QAbstractButton(QWidget *parent /TransferThis/ = 0);
    virtual ~QAbstractButton();
%If (Qt_4_2_0 -)
    void setAutoRepeatDelay(int);
%End
%If (Qt_4_2_0 -)
    int autoRepeatDelay() const;
%End
%If (Qt_4_2_0 -)
    void setAutoRepeatInterval(int);
%End
%If (Qt_4_2_0 -)
    int autoRepeatInterval() const;
%End
    void setText(const QString &text);
    QString text() const;
    void setIcon(const QIcon &icon);
    QIcon icon() const;
    QSize iconSize() const;
    void setShortcut(const QKeySequence &key);
    QKeySequence shortcut() const;
    void setCheckable(bool);
    bool isCheckable() const;
    bool isChecked() const;
    void setDown(bool);
    bool isDown() const;
    void setAutoRepeat(bool);
    bool autoRepeat() const;
    void setAutoExclusive(bool);
    bool autoExclusive() const;
    QButtonGroup *group() const;

public slots:
    void setIconSize(const QSize &size);
    void animateClick(int msecs = 100);
    void click();
    void toggle();
    void setChecked(bool);

signals:
    void pressed();
    void released();
    void clicked(bool checked = false);
    void toggled(bool checked);

protected:
    virtual void paintEvent(QPaintEvent *e) = 0;
    virtual bool hitButton(const QPoint &pos) const;
    virtual void checkStateSet();
    virtual void nextCheckState();
    virtual bool event(QEvent *e);
    virtual void keyPressEvent(QKeyEvent *e);
    virtual void keyReleaseEvent(QKeyEvent *e);
    virtual void mousePressEvent(QMouseEvent *e);
    virtual void mouseReleaseEvent(QMouseEvent *e);
    virtual void mouseMoveEvent(QMouseEvent *e);
    virtual void focusInEvent(QFocusEvent *e);
    virtual void focusOutEvent(QFocusEvent *e);
    virtual void changeEvent(QEvent *e);
    virtual void timerEvent(QTimerEvent *e);
};
