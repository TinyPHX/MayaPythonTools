// qmessagebox.sip generated by MetaSIP on Fri Mar  1 21:45:59 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qmessagebox.h>
%End

class QMessageBox : QDialog
{
%TypeHeaderCode
#include <qmessagebox.h>
%End

public:
%If (Qt_4_2_0 -)

    enum ButtonRole
    {
        InvalidRole,
        AcceptRole,
        RejectRole,
        DestructiveRole,
        ActionRole,
        HelpRole,
        YesRole,
        NoRole,
        ResetRole,
        ApplyRole,
    };

%End

    enum Icon
    {
        NoIcon,
        Information,
        Warning,
        Critical,
        Question,
    };

%If (Qt_4_2_0 -)

    enum StandardButton
    {
        NoButton,
        Ok,
        Save,
        SaveAll,
        Open,
        Yes,
        YesToAll,
        No,
        NoToAll,
        Abort,
        Retry,
        Ignore,
        Close,
        Cancel,
        Discard,
        Help,
        Apply,
        Reset,
        RestoreDefaults,
        FirstButton,
        LastButton,
        YesAll,
        NoAll,
        Default,
        Escape,
        FlagMask,
        ButtonMask,
    };

%End
%If (Qt_4_2_0 -)
    typedef QFlags<QMessageBox::StandardButton> StandardButtons;
%End
%If (Qt_4_2_0 -)
    typedef QMessageBox::StandardButton Button;
%End
%If (- Qt_4_2_0)

    enum Button
    {
        NoButton,
        Ok,
        Cancel,
        Yes,
        No,
        Abort,
        Retry,
        Ignore,
        YesAll,
        NoAll,
        ButtonMask,
        Default,
        Escape,
        FlagMask,
    };

%End
    explicit QMessageBox(QWidget *parent /TransferThis/ = 0);
%If (Qt_4_2_0 -)
    QMessageBox(QMessageBox::Icon icon, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::NoButton, QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint);
%End
%If (Qt_4_2_0 -)
    QMessageBox(const QString &title, const QString &text, QMessageBox::Icon icon, int button0, int button1, int button2, QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint);
%End
%If (- Qt_4_2_0)
    QMessageBox(const QString &caption, const QString &text, QMessageBox::Icon icon, int button0, int button1, int button2, QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint);
%End
    virtual ~QMessageBox();
    QString text() const;
    void setText(const QString &);
    QMessageBox::Icon icon() const;
    void setIcon(QMessageBox::Icon);
    QPixmap iconPixmap() const;
    void setIconPixmap(const QPixmap &);
    QString buttonText(int button) const;
    void setButtonText(int button, const QString &);
    Qt::TextFormat textFormat() const;
    void setTextFormat(Qt::TextFormat);
%If (Qt_4_2_0 -)
    static QMessageBox::StandardButton information(QWidget *parent, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::Ok, QMessageBox::StandardButton defaultButton = QMessageBox::NoButton) /ReleaseGIL/;
%End
    static int information(QWidget *parent, const QString &title, const QString &text, int button0, int button1 = 0, int button2 = 0) /ReleaseGIL/;
%If (Qt_4_2_0 -)
    static int information(QWidget *parent, const QString &title, const QString &text, const QString &button0Text, const QString &button1Text /DocValue="Py_v3:''"/ = QString(), const QString &button2Text /DocValue="Py_v3:''"/ = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (- Qt_4_2_0)
    static int information(QWidget *parent, const QString &title, const QString &text, const QString &button0Text /DocValue="Py_v3:''"/ = QString(), const QString &button1Text /DocValue="Py_v3:''"/ = QString(), const QString &button2Text /DocValue="Py_v3:''"/ = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (Qt_4_2_0 -)
    static QMessageBox::StandardButton question(QWidget *parent, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::Ok, QMessageBox::StandardButton defaultButton = QMessageBox::NoButton) /ReleaseGIL/;
%End
    static int question(QWidget *parent, const QString &title, const QString &text, int button0, int button1 = 0, int button2 = 0) /ReleaseGIL/;
%If (Qt_4_2_0 -)
    static int question(QWidget *parent, const QString &title, const QString &text, const QString &button0Text, const QString &button1Text /DocValue="Py_v3:''"/ = QString(), const QString &button2Text /DocValue="Py_v3:''"/ = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (- Qt_4_2_0)
    static int question(QWidget *parent, const QString &title, const QString &text, const QString &button0Text /DocValue="Py_v3:''"/ = QString(), const QString &button1Text /DocValue="Py_v3:''"/ = QString(), const QString &button2Text /DocValue="Py_v3:''"/ = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (Qt_4_2_0 -)
    static QMessageBox::StandardButton warning(QWidget *parent, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::Ok, QMessageBox::StandardButton defaultButton = QMessageBox::NoButton) /ReleaseGIL/;
%End
    static int warning(QWidget *parent, const QString &title, const QString &text, int button0, int button1, int button2 = 0) /ReleaseGIL/;
%If (Qt_4_2_0 -)
    static int warning(QWidget *parent, const QString &title, const QString &text, const QString &button0Text, const QString &button1Text /DocValue="Py_v3:''"/ = QString(), const QString &button2Text /DocValue="Py_v3:''"/ = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (- Qt_4_2_0)
    static int warning(QWidget *parent, const QString &title, const QString &text, const QString &button0Text /DocValue="Py_v3:''"/ = QString(), const QString &button1Text /DocValue="Py_v3:''"/ = QString(), const QString &button2Text /DocValue="Py_v3:''"/ = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (Qt_4_2_0 -)
    static QMessageBox::StandardButton critical(QWidget *parent, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::Ok, QMessageBox::StandardButton defaultButton = QMessageBox::NoButton) /ReleaseGIL/;
%End
    static int critical(QWidget *parent, const QString &title, const QString &text, int button0, int button1, int button2 = 0) /ReleaseGIL/;
%If (Qt_4_2_0 -)
    static int critical(QWidget *parent, const QString &title, const QString &text, const QString &button0Text, const QString &button1Text /DocValue="Py_v3:''"/ = QString(), const QString &button2Text /DocValue="Py_v3:''"/ = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (- Qt_4_2_0)
    static int critical(QWidget *parent, const QString &title, const QString &text, const QString &button0Text /DocValue="Py_v3:''"/ = QString(), const QString &button1Text /DocValue="Py_v3:''"/ = QString(), const QString &button2Text /DocValue="Py_v3:''"/ = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
    static void about(QWidget *parent, const QString &caption, const QString &text) /ReleaseGIL/;
    static void aboutQt(QWidget *parent, const QString &title /DocValue="Py_v3:''"/ = QString()) /ReleaseGIL/;
%If (- Qt_5_0_0)
    virtual QSize sizeHint() const;
%End
    static QPixmap standardIcon(QMessageBox::Icon icon);

protected:
%If (Qt_4_3_0 -)
    virtual bool event(QEvent *e);
%End
    virtual void resizeEvent(QResizeEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void closeEvent(QCloseEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void changeEvent(QEvent *);

public:
%If (Qt_4_2_0 -)
    void addButton(QAbstractButton *button /Transfer/, QMessageBox::ButtonRole role);
%End
%If (Qt_4_2_0 -)
    QPushButton *addButton(const QString &text, QMessageBox::ButtonRole role) /Transfer/;
%End
%If (Qt_4_2_0 -)
    QPushButton *addButton(QMessageBox::StandardButton button) /Transfer/;
%End
%If (Qt_4_2_0 -)
    void removeButton(QAbstractButton *button /TransferBack/);
%End
%If (Qt_4_2_0 -)
    void setStandardButtons(QMessageBox::StandardButtons buttons);
%End
%If (Qt_4_2_0 -)
    QMessageBox::StandardButtons standardButtons() const;
%End
%If (Qt_4_2_0 -)
    QMessageBox::StandardButton standardButton(QAbstractButton *button) const;
%End
%If (Qt_4_2_0 -)
    QAbstractButton *button(QMessageBox::StandardButton which) const;
%End
%If (Qt_4_2_0 -)
    QPushButton *defaultButton() const;
%End
%If (Qt_4_2_0 -)
    void setDefaultButton(QPushButton *button /KeepReference/);
%End
%If (Qt_4_3_0 -)
    void setDefaultButton(QMessageBox::StandardButton button);
%End
%If (Qt_4_2_0 -)
    QAbstractButton *escapeButton() const;
%End
%If (Qt_4_2_0 -)
    void setEscapeButton(QAbstractButton *button /KeepReference/);
%End
%If (Qt_4_3_0 -)
    void setEscapeButton(QMessageBox::StandardButton button);
%End
%If (Qt_4_2_0 -)
    QAbstractButton *clickedButton() const;
%End
%If (Qt_4_2_0 -)
    QString informativeText() const;
%End
%If (Qt_4_2_0 -)
    void setInformativeText(const QString &text);
%End
%If (Qt_4_2_0 -)
    QString detailedText() const;
%End
%If (Qt_4_2_0 -)
    void setDetailedText(const QString &text);
%End
%If (Qt_4_2_0 -)
    void setWindowTitle(const QString &title);
%End
%If (Qt_4_2_0 -)
    void setWindowModality(Qt::WindowModality windowModality);
%End
%If (Qt_4_5_0 -)
    void open();
%End
%If (Qt_4_5_0 -)
    void open(SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member) [void (QObject *receiver, const char *member)];
%End
%If (Qt_4_5_0 -)
    QList<QAbstractButton*> buttons() const;
%End
%If (Qt_4_5_0 -)
    QMessageBox::ButtonRole buttonRole(QAbstractButton *button) const;
%End

signals:
%If (Qt_4_5_0 -)
    void buttonClicked(QAbstractButton *button);
%End

private:
    QMessageBox(const QMessageBox &);
};

%If (Qt_4_2_0 -)
QFlags<QMessageBox::StandardButton> operator|(QMessageBox::StandardButton f1, QFlags<QMessageBox::StandardButton> f2);
%End
