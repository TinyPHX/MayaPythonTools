// qtreeview.sip generated by MetaSIP on Fri Mar  1 21:46:01 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTreeView : QAbstractItemView
{
%TypeHeaderCode
#include <qtreeview.h>
%End

public:
    explicit QTreeView(QWidget *parent /TransferThis/ = 0);
    virtual ~QTreeView();
    virtual void setModel(QAbstractItemModel *model /KeepReference/);
    virtual void setRootIndex(const QModelIndex &index);
    virtual void setSelectionModel(QItemSelectionModel *selectionModel /KeepReference/);
    QHeaderView *header() const;
    void setHeader(QHeaderView *header /Transfer/);
    int indentation() const;
    void setIndentation(int i);
    bool rootIsDecorated() const;
    void setRootIsDecorated(bool show);
    bool uniformRowHeights() const;
    void setUniformRowHeights(bool uniform);
    bool itemsExpandable() const;
    void setItemsExpandable(bool enable);
    int columnViewportPosition(int column) const;
    int columnWidth(int column) const;
    int columnAt(int x) const;
    bool isColumnHidden(int column) const;
    void setColumnHidden(int column, bool hide);
    bool isRowHidden(int row, const QModelIndex &parent) const;
    void setRowHidden(int row, const QModelIndex &parent, bool hide);
    bool isExpanded(const QModelIndex &index) const;
    void setExpanded(const QModelIndex &index, bool expand);
    virtual void keyboardSearch(const QString &search);
    virtual QRect visualRect(const QModelIndex &index) const;
    virtual void scrollTo(const QModelIndex &index, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    virtual QModelIndex indexAt(const QPoint &p) const;
    QModelIndex indexAbove(const QModelIndex &index) const;
    QModelIndex indexBelow(const QModelIndex &index) const;
    virtual void reset();

signals:
    void expanded(const QModelIndex &index);
    void collapsed(const QModelIndex &index);

public:
%If (Qt_5_0_0 -)
    virtual void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight, const QVector<int> &roles /DocValue="[]"/ = QVector<int>());
%End

public slots:
%If (- Qt_5_0_0)
    virtual void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
%End
    void hideColumn(int column);
    void showColumn(int column);
    void expand(const QModelIndex &index);
%If (Qt_4_2_0 -)
    void expandAll();
%End
    void collapse(const QModelIndex &index);
%If (Qt_4_2_0 -)
    void collapseAll();
%End
    void resizeColumnToContents(int column);
    void sortByColumn(int column);
    virtual void selectAll();

protected slots:
    void columnResized(int column, int oldSize, int newSize);
    void columnCountChanged(int oldCount, int newCount);
    void columnMoved();
    void reexpand();
    void rowsRemoved(const QModelIndex &parent, int first, int last);

protected:
    virtual void scrollContentsBy(int dx, int dy);
    virtual void rowsInserted(const QModelIndex &parent, int start, int end);
    virtual void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);
    virtual QModelIndex moveCursor(QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
    virtual int horizontalOffset() const;
    virtual int verticalOffset() const;
    virtual void setSelection(const QRect &rect, QFlags<QItemSelectionModel::SelectionFlag> command);
    virtual QRegion visualRegionForSelection(const QItemSelection &selection) const;
    virtual QModelIndexList selectedIndexes() const;
    virtual void paintEvent(QPaintEvent *e);
    virtual void timerEvent(QTimerEvent *event);
    virtual void mouseReleaseEvent(QMouseEvent *event);
    virtual void drawRow(QPainter *painter, const QStyleOptionViewItem &options /NoCopy/, const QModelIndex &index) const;
    virtual void drawBranches(QPainter *painter, const QRect &rect, const QModelIndex &index) const;
%If (Qt_4_2_0 -)
    void drawTree(QPainter *painter, const QRegion &region) const;
%End
    virtual void mousePressEvent(QMouseEvent *e);
%If (Qt_4_2_0 -)
    virtual void mouseMoveEvent(QMouseEvent *event);
%End
    virtual void mouseDoubleClickEvent(QMouseEvent *e);
%If (Qt_4_2_0 -)
    virtual void keyPressEvent(QKeyEvent *event);
%End
    virtual void updateGeometries();
    virtual int sizeHintForColumn(int column) const;
    int indexRowSizeHint(const QModelIndex &index) const;
    virtual void horizontalScrollbarAction(int action);
    virtual bool isIndexHidden(const QModelIndex &index) const;

public:
%If (Qt_4_2_0 -)
    void setColumnWidth(int column, int width);
%End
%If (Qt_4_2_0 -)
    void setSortingEnabled(bool enable);
%End
%If (Qt_4_2_0 -)
    bool isSortingEnabled() const;
%End
%If (Qt_4_2_0 -)
    void setAnimated(bool enable);
%End
%If (Qt_4_2_0 -)
    bool isAnimated() const;
%End
%If (Qt_4_2_0 -)
    void setAllColumnsShowFocus(bool enable);
%End
%If (Qt_4_2_0 -)
    bool allColumnsShowFocus() const;
%End
%If (Qt_4_2_0 -)
    void sortByColumn(int column, Qt::SortOrder order);
%End
%If (Qt_4_3_0 -)
    int autoExpandDelay() const;
%End
%If (Qt_4_3_0 -)
    void setAutoExpandDelay(int delay);
%End
%If (Qt_4_3_0 -)
    bool isFirstColumnSpanned(int row, const QModelIndex &parent) const;
%End
%If (Qt_4_3_0 -)
    void setFirstColumnSpanned(int row, const QModelIndex &parent, bool span);
%End
%If (Qt_4_3_0 -)
    void setWordWrap(bool on);
%End
%If (Qt_4_3_0 -)
    bool wordWrap() const;
%End

public slots:
%If (Qt_4_3_0 -)
    void expandToDepth(int depth);
%End

protected:
%If (Qt_4_3_0 -)
    virtual void dragMoveEvent(QDragMoveEvent *event);
%End
%If (Qt_4_3_0 -)
    virtual bool viewportEvent(QEvent *event);
%End
%If (Qt_4_3_0 -)
    int rowHeight(const QModelIndex &index) const;
%End
%If (Qt_4_3_0 -)
    virtual void selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);
%End
%If (Qt_4_3_0 -)
    virtual void currentChanged(const QModelIndex &current, const QModelIndex &previous);
%End

public:
%If (Qt_4_4_0 -)
    bool expandsOnDoubleClick() const;
%End
%If (Qt_4_4_0 -)
    void setExpandsOnDoubleClick(bool enable);
%End
%If (Qt_4_4_0 -)
    bool isHeaderHidden() const;
%End
%If (Qt_4_4_0 -)
    void setHeaderHidden(bool hide);
%End

private:
    QTreeView(const QTreeView &);
};
