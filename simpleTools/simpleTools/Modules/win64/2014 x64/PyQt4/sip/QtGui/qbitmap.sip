// qbitmap.sip generated by MetaSIP on Fri Mar  1 21:45:58 2013
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qbitmap.h>
%End

class QBitmap : QPixmap
{
%TypeHeaderCode
#include <qbitmap.h>
%End

public:
    QBitmap();
    QBitmap(const QPixmap &);
    QBitmap(int w, int h);
    explicit QBitmap(const QSize &);
    QBitmap(const QString &fileName, const char *format = 0);
    QBitmap(const QVariant &variant) /NoDerived/;
%MethodCode
        #if QT_VERSION >= 0x050000
        sipCpp = new sipQBitmap(a0->value<QBitmap>());
        #else
        sipCpp = new sipQBitmap(qVariantValue<QBitmap>(*a0));
        #endif
%End

    virtual ~QBitmap();
    void clear();
    static QBitmap fromImage(const QImage &image, Qt::ImageConversionFlags flags = Qt::AutoColor);
    static QBitmap fromData(const QSize &size, const uchar *bits, QImage::Format format = QImage::Format_MonoLSB);
    QBitmap transformed(const QMatrix &) const;
%If (Qt_4_3_0 -)
    QBitmap transformed(const QTransform &matrix) const;
%End
%If (Qt_4_8_0 -)
    void swap(QBitmap &other);
%End
};

%If (Qt_4_3_0 -)
void qSwap(QBitmap &value1, QBitmap &value2);
%End
