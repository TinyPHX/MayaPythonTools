// qxmlschemavalidator.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtXmlPatterns Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QXmlSchemaValidator
{
%TypeHeaderCode
#include <qxmlschemavalidator.h>
%End

public:
    QXmlSchemaValidator();
    QXmlSchemaValidator(const QXmlSchema &schema);
    ~QXmlSchemaValidator();
    void setSchema(const QXmlSchema &schema);
    bool validate(const QUrl &source) const /ReleaseGIL/;
    bool validate(QIODevice *source, const QUrl &documentUri = QUrl()) const /ReleaseGIL/;
    bool validate(const QByteArray &data, const QUrl &documentUri = QUrl()) const;
    QXmlNamePool namePool() const;
    QXmlSchema schema() const;
%MethodCode
        // For reasons we don't quite understand QXmlSchema's copy ctor has to be
        // private as far as sip is concerned - otherwise we get compiler errors.
        // However that means that sip generates the wrong code here, because it
        // doesn't realise it can take a copy of the result.
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QXmlSchema(sipCpp->schema());
        Py_END_ALLOW_THREADS
%End

    void setMessageHandler(QAbstractMessageHandler *handler /KeepReference/);
    QAbstractMessageHandler *messageHandler() const;
    void setUriResolver(const QAbstractUriResolver *resolver /KeepReference/);
    const QAbstractUriResolver *uriResolver() const;
    void setNetworkAccessManager(QNetworkAccessManager *networkmanager /KeepReference/);
    QNetworkAccessManager *networkAccessManager() const;

private:
    QXmlSchemaValidator(const QXmlSchemaValidator &);
};

%End
