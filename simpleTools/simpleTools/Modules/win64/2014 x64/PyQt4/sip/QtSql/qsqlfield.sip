// qsqlfield.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSqlField
{
%TypeHeaderCode
#include <qsqlfield.h>
%End

public:
    enum RequiredStatus
    {
        Unknown,
        Optional,
        Required,
    };

    QSqlField(const QString &fieldName /DocValue="Py_v3:''"/ = QString(), QVariant::Type type = QVariant::Invalid);
    QSqlField(const QSqlField &other);
    bool operator==(const QSqlField &other) const;
    bool operator!=(const QSqlField &other) const;
    ~QSqlField();
    void setValue(const QVariant &value);
    QVariant value() const;
    void setName(const QString &name);
    QString name() const;
    bool isNull() const;
    void setReadOnly(bool readOnly);
    bool isReadOnly() const;
    void clear();
    QVariant::Type type() const;
    bool isAutoValue() const;
    void setType(QVariant::Type type);
    void setRequiredStatus(QSqlField::RequiredStatus status);
    void setRequired(bool required);
    void setLength(int fieldLength);
    void setPrecision(int precision);
    void setDefaultValue(const QVariant &value);
    void setSqlType(int type);
    void setGenerated(bool gen);
    void setAutoValue(bool autoVal);
    QSqlField::RequiredStatus requiredStatus() const;
    int length() const;
    int precision() const;
    QVariant defaultValue() const;
    int typeID() const;
    bool isGenerated() const;
    bool isValid() const;
};
