// qsqlrelationaltablemodel.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSqlRelation
{
%TypeHeaderCode
#include <qsqlrelationaltablemodel.h>
%End

public:
    QSqlRelation();
    QSqlRelation(const QString &aTableName, const QString &indexCol, const QString &displayCol);
    QString tableName() const;
    QString indexColumn() const;
    QString displayColumn() const;
    bool isValid() const;
};

class QSqlRelationalTableModel : QSqlTableModel
{
%TypeHeaderCode
#include <qsqlrelationaltablemodel.h>
%End

public:
    QSqlRelationalTableModel(QObject *parent /TransferThis/ = 0, QSqlDatabase db = QSqlDatabase());
    virtual ~QSqlRelationalTableModel();
    virtual QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
    virtual bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
    virtual void clear();
    virtual bool select();
    virtual void setTable(const QString &tableName);
    virtual void setRelation(int column, const QSqlRelation &relation);
    QSqlRelation relation(int column) const;
    virtual QSqlTableModel *relationModel(int column) const;
    virtual void revertRow(int row);
%If (Qt_4_2_0 -)
    virtual bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());
%End

protected:
    virtual QString selectStatement() const;
    virtual bool updateRowInTable(int row, const QSqlRecord &values);
    virtual QString orderByClause() const;
%If (Qt_4_2_0 -)
    virtual bool insertRowIntoTable(const QSqlRecord &values);
%End

public:
%If (Qt_4_8_0 -)

    enum JoinMode
    {
        InnerJoin,
        LeftJoin,
    };

%End
%If (Qt_4_8_0 -)
    void setJoinMode(QSqlRelationalTableModel::JoinMode joinMode);
%End
};
