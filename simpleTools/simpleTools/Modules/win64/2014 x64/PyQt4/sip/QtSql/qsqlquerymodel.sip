// qsqlquerymodel.sip generated by MetaSIP on Fri Mar  1 21:46:02 2013
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2013 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSqlQueryModel : QAbstractTableModel
{
%TypeHeaderCode
#include <qsqlquerymodel.h>
%End

public:
    explicit QSqlQueryModel(QObject *parent /TransferThis/ = 0);
    virtual ~QSqlQueryModel();
    virtual int rowCount(const QModelIndex &parent = QModelIndex()) const;
    virtual int columnCount(const QModelIndex &parent = QModelIndex()) const;
    QSqlRecord record(int row) const;
    QSqlRecord record() const;
    virtual QVariant data(const QModelIndex &item, int role = Qt::DisplayRole) const;
    virtual QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const;
    virtual bool setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role = Qt::EditRole);
    virtual bool insertColumns(int column, int count, const QModelIndex &parent = QModelIndex());
    virtual bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());
    void setQuery(const QSqlQuery &query);
    void setQuery(const QString &query, const QSqlDatabase &db = QSqlDatabase());
    QSqlQuery query() const;
    virtual void clear();
    QSqlError lastError() const;
    virtual void fetchMore(const QModelIndex &parent = QModelIndex());
    virtual bool canFetchMore(const QModelIndex &parent = QModelIndex()) const;

protected:
    virtual void queryChange();
%If (Qt_5_0_0 -)
    virtual QModelIndex indexInQuery(const QModelIndex &item) const;
%End
%If (- Qt_5_0_0)
    QModelIndex indexInQuery(const QModelIndex &item) const;
%End
    void setLastError(const QSqlError &error);
%If (Qt_5_0_0 -)
    void beginResetModel();
%End
%If (Qt_5_0_0 -)
    void endResetModel();
%End
%If (Qt_5_0_0 -)
    void beginInsertRows(const QModelIndex &parent, int first, int last);
%End
%If (Qt_5_0_0 -)
    void endInsertRows();
%End
%If (Qt_5_0_0 -)
    void beginRemoveRows(const QModelIndex &parent, int first, int last);
%End
%If (Qt_5_0_0 -)
    void endRemoveRows();
%End
%If (Qt_5_0_0 -)
    void beginInsertColumns(const QModelIndex &parent, int first, int last);
%End
%If (Qt_5_0_0 -)
    void endInsertColumns();
%End
%If (Qt_5_0_0 -)
    void beginRemoveColumns(const QModelIndex &parent, int first, int last);
%End
%If (Qt_5_0_0 -)
    void endRemoveColumns();
%End
};
